{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/MacBook Air/Desktop/shifai1VV/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { finalize } from 'rxjs/operators';\nimport { inscritUid } from '../login/login.page';\nimport { getDocumentsIS, medecinUid } from 'src/firebaseConfig';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/compat/storage\";\nimport * as i2 from \"@angular/fire/compat/firestore\";\nimport * as i3 from \"@ionic/angular\";\nimport * as i4 from \"@angular/router\";\nimport * as i5 from \"@angular/common\";\nimport * as i6 from \"@angular/forms\";\nfunction DocumentPage_div_25_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\")(1, \"ion-input\", 11);\n    i0.ɵɵlistener(\"ngModelChange\", function DocumentPage_div_25_Template_ion_input_ngModelChange_1_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.description = $event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(2, \"ion-button\", 12);\n    i0.ɵɵelement(3, \"ion-icon\", 13);\n    i0.ɵɵtext(4, \" \\u00A0\\u00A0Envoyer \");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(5, \"img\", 14);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngModel\", ctx_r0.description);\n    i0.ɵɵadvance(4);\n    i0.ɵɵproperty(\"src\", ctx_r0.selectedFile, i0.ɵɵsanitizeUrl);\n  }\n}\nfunction DocumentPage_ion_item_32_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ion-item\");\n    i0.ɵɵelement(1, \"img\", 15);\n    i0.ɵɵelementStart(2, \"ion-label\");\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(4, \"a\", 16);\n    i0.ɵɵtext(5, \" Voir d\\u00E9tail..\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const document_r4 = ctx.$implicit;\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"src\", document_r4.url, i0.ɵɵsanitizeUrl);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(document_r4.description);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"href\", document_r4.url, i0.ɵɵsanitizeUrl);\n  }\n}\nexport let DocumentPage = /*#__PURE__*/(() => {\n  var _DocumentPage;\n  class DocumentPage {\n    constructor(storage, firestore, toastController, modalController, cdr, router) {\n      this.storage = storage;\n      this.firestore = firestore;\n      this.toastController = toastController;\n      this.modalController = modalController;\n      this.cdr = cdr;\n      this.router = router;\n      this.Vfiche = true;\n      this.Vconsultation = false;\n      this.Vdocument = false;\n      this.uid = '';\n      this.nom = '';\n      this.prenom = '';\n      this.age = 0;\n      this.adresse = '';\n      this.telephone = '';\n      this.sexe = '';\n      this.groupeSanguin = '';\n      this.situationFamiliale = '';\n      this.profession = '';\n      this.email = '';\n      this.telephone2 = '';\n      this.numeroAssurance = '';\n      this.note = '';\n      this.antecedentsMedicaux = '';\n      this.antecedentsChirurgicaux = '';\n      this.antecedentsFamiliaux = '';\n      this.autresAntecedents = '';\n      this.medicaments = '';\n      this.description = '';\n      this.selectedFile = null;\n      this.selectedFileUrl = null;\n      this.documents = [];\n      this.consultationDate = ''; // Variable pour stocker la date de consultation\n      this.consultationdate1 = '';\n      this.searchDescription = '';\n    }\n    ngOnInit() {\n      var _this = this;\n      return _asyncToGenerator(function* () {\n        _this.getdoc();\n      })();\n    }\n    back() {\n      var _this2 = this;\n      return _asyncToGenerator(function* () {\n        _this2.router.navigate(['/patient']);\n        console.log('going to patient');\n      })();\n    }\n    onFileSelected(event) {\n      var _this3 = this;\n      return _asyncToGenerator(function* () {\n        const file = event.target.files[0];\n        if (!file) {\n          console.error('Aucun fichier sélectionné.');\n          return;\n        }\n        // Validate file type (optional)\n        // if (!this.isValidFileType(file)) {\n        //   console.error('Type de fichier non supporté.');\n        //   return;\n        // }\n        _this3.selectedFile = file;\n        try {\n          // Generate a unique ID using Firestore's createId() method\n          const fileId = _this3.firestore.createId();\n          // Construct the file path in Firebase Storage\n          const filePath = `documents/${fileId}_${file.name}`;\n          // Create a reference to the file in Firebase Storage\n          const fileRef = _this3.storage.ref(filePath);\n          // Upload the file to Firebase Storage\n          const uploadTask = _this3.storage.upload(filePath, file);\n          // Handle upload progress and completion\n          uploadTask.snapshotChanges().pipe(finalize( /*#__PURE__*/_asyncToGenerator(function* () {\n            try {\n              // Get the downloadable URL of the uploaded file\n              const fileUrl = yield fileRef.getDownloadURL().toPromise();\n              // Check if description is empty\n              if (!_this3.description) {\n                console.error('La description est obligatoire pour télécharger le fichier.');\n                return;\n              }\n              console.log(_this3.description);\n              console.log(fileId);\n              // Validate and sanitize the description if necessary\n              // Create a document data object with relevant information\n              const documentData = {\n                uid: fileId,\n                // Use the generated fileId as the document ID\n                medecinUid: medecinUid.uid,\n                patientUid: inscritUid,\n                url: fileUrl,\n                description: _this3.description\n              };\n              // Add the document to Firestore using the docRef\n              const docRef = _this3.firestore.collection('documents').doc(fileId);\n              yield docRef.set(documentData);\n              // Handle successful document creation\n              console.log('Document ajouté avec succès.');\n              _this3.getdoc(); // Assuming getdocument fetches and updates documents list\n            } catch (error) {\n              // Handle errors during document creation\n              console.error('Erreur lors de l\\'ajout du document :', error);\n              // Provide more specific error messages based on error.code and error.message\n            }\n          }))).subscribe();\n        } catch (error) {\n          // Handle errors during file upload\n          console.error('Erreur lors de l\\'ajout du document :', error);\n          // Provide more specific error messages based on error.code and error.message\n        }\n      })();\n    }\n    /* async envoyer() {\n      if (!this.selectedFile) {\n        console.error('Aucun fichier sélectionné.');\n        return;\n      }\n      const file: File | null = event.target.files[0];\n         this.selectedFile = file;\n         // Check if description is empty (already in your code)\n    \n      if (file instanceof File) {\n        try {\n          // Generate a unique ID using Firestore's createId() method\n          const fileId = this.firestore.createId();\n    \n          // Construct the file path in Firebase Storage\n          const filePath = `documents/${fileId}_${file.name}`;\n    \n          // Create a reference to the file in Firebase Storage\n          const fileRef = this.storage.ref(filePath);\n    \n          // Upload the file to Firebase Storage\n          const uploadTask = this.storage.upload(filePath, file);\n    \n          // Handle upload progress and completion\n          uploadTask.snapshotChanges().pipe(\n            finalize(async () => {\n              try {\n                // Get the downloadable URL of the uploaded file\n                const fileUrl = await fileRef.getDownloadURL().toPromise();\n    \n                // Retrieve the description from the input field\n                const description = this.description;\n    \n                // Validate and sanitize the description if necessary\n    \n                // Create a document data object with relevant information\n                const documentData = {\n                  uid: fileId, // Use the generated fileId as the document ID\n                  medecinUid: medecinUid.uid,\n                  patientUid: inscritUid,\n                  url: fileUrl,\n                  description: description\n                };\n    \n                // Add the document to Firestore using the docRef\n                const docRef = this.firestore.collection('documents').doc(fileId);\n                await docRef.set(documentData);\n    \n                // Handle successful document creation\n                console.log('Document ajouté avec succès.');\n                this.getdoc(); // Assuming getdocument fetches and updates documents list\n    \n              } catch (error) {\n                // Handle errors during document creation\n                console.error('Erreur lors de l\\'ajout du document :', error);\n                // Provide more specific error messages based on error.code and error.message\n              }\n            })\n          ).subscribe();\n        } catch (error) {\n          // Handle errors during file upload\n          console.error('Erreur lors de l\\'ajout du document :', error);\n          // Provide more specific error messages based on error.code and error.message\n        }\n      }\n    }\n    */\n    closeModal() {\n      this.modalController.dismiss();\n    }\n    searchDocumentsByDescription(description) {\n      var _this4 = this;\n      return _asyncToGenerator(function* () {\n        try {\n          if (!description) {\n            console.log('Veuillez entrer une description.');\n            return;\n          }\n          // Filtrer les documents pour la description spécifiée\n          const filteredDocuments = _this4.documents.filter(document => document.description === description);\n          if (filteredDocuments.length > 0) {\n            console.log('Documents trouvés avec la description', description, ':', filteredDocuments);\n            _this4.documents = filteredDocuments;\n          } else {\n            console.log('Aucun document trouvé avec la description', description);\n          }\n        } catch (error) {\n          console.error('Erreur lors de la recherche des documents pour la description :', error);\n        }\n      })();\n    }\n    getdoc() {\n      var _this5 = this;\n      return _asyncToGenerator(function* () {\n        const doc = yield getDocumentsIS(_this5.firestore, inscritUid);\n        console.log(doc);\n        if (doc) {\n          _this5.documents = doc;\n        }\n        console.log(inscritUid);\n      })();\n    }\n  }\n  _DocumentPage = DocumentPage;\n  _DocumentPage.ɵfac = function DocumentPage_Factory(t) {\n    return new (t || _DocumentPage)(i0.ɵɵdirectiveInject(i1.AngularFireStorage), i0.ɵɵdirectiveInject(i2.AngularFirestore), i0.ɵɵdirectiveInject(i3.ToastController), i0.ɵɵdirectiveInject(i3.ModalController), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef), i0.ɵɵdirectiveInject(i4.Router));\n  };\n  _DocumentPage.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: _DocumentPage,\n    selectors: [[\"app-document\"]],\n    decls: 35,\n    vars: 5,\n    consts: [[3, \"translucent\"], [\"slot\", \"start\"], [\"routerLink\", \"/tabs/tab1\", \"fill\", \"clear\"], [3, \"fullscreen\"], [\"placeholder\", \"Rechercher\"], [1, \"upload-document\"], [\"type\", \"file\", \"id\", \"fileInput\", \"name\", \"fileInput\", \"accept\", \"*/*\", 3, \"change\"], [4, \"ngIf\"], [\"type\", \"text\", \"placeholder\", \"entrer une description a rechercher\", \"color\", \"primary\", 3, \"ngModel\", \"ngModelChange\"], [3, \"click\"], [4, \"ngFor\", \"ngForOf\"], [\"type\", \"text\", \"placeholder\", \"Enter document description\", \"required\", \"\", 3, \"ngModel\", \"ngModelChange\"], [1, \"ion-text-end\"], [\"name\", \"send-outline\"], [\"alt\", \"Selected Image\", 3, \"src\"], [\"width\", \"60\", \"height\", \"60\", 3, \"src\"], [\"float\", \"right\", \"target\", \"_blank\", 3, \"href\"]],\n    template: function DocumentPage_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"ion-header\", 0)(1, \"ion-toolbar\")(2, \"ion-buttons\", 1)(3, \"ion-button\", 2);\n        i0.ɵɵtext(4, \"Retour\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(5, \"ion-title\");\n        i0.ɵɵtext(6, \"Documents\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(7, \"ion-content\", 3)(8, \"ion-card\")(9, \"ion-card-content\")(10, \"ion-card-header\");\n        i0.ɵɵelement(11, \"br\")(12, \"ion-searchbar\", 4)(13, \"br\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(14, \"ion-card\", 5)(15, \"ion-card-content\");\n        i0.ɵɵelement(16, \"br\")(17, \"br\")(18, \"br\")(19, \"br\")(20, \"br\")(21, \"br\")(22, \"br\")(23, \"br\");\n        i0.ɵɵelementStart(24, \"input\", 6);\n        i0.ɵɵlistener(\"change\", function DocumentPage_Template_input_change_24_listener($event) {\n          return ctx.onFileSelected($event);\n        });\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵtemplate(25, DocumentPage_div_25_Template, 6, 2, \"div\", 7);\n        i0.ɵɵelementStart(26, \"ion-card\")(27, \"div\")(28, \"ion-list\")(29, \"ion-input\", 8);\n        i0.ɵɵlistener(\"ngModelChange\", function DocumentPage_Template_ion_input_ngModelChange_29_listener($event) {\n          return ctx.searchDescription = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(30, \"ion-button\", 9);\n        i0.ɵɵlistener(\"click\", function DocumentPage_Template_ion_button_click_30_listener() {\n          return ctx.searchDocumentsByDescription(ctx.searchDescription);\n        });\n        i0.ɵɵtext(31, \"Rechercher\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(32, DocumentPage_ion_item_32_Template, 6, 3, \"ion-item\", 10);\n        i0.ɵɵelement(33, \"br\")(34, \"br\");\n        i0.ɵɵelementEnd()()()()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"translucent\", true);\n        i0.ɵɵadvance(7);\n        i0.ɵɵproperty(\"fullscreen\", true);\n        i0.ɵɵadvance(18);\n        i0.ɵɵproperty(\"ngIf\", ctx.selectedFile);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngModel\", ctx.searchDescription);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngForOf\", ctx.documents);\n      }\n    },\n    dependencies: [i5.NgForOf, i5.NgIf, i6.NgControlStatus, i6.RequiredValidator, i6.NgModel, i3.IonButton, i3.IonButtons, i3.IonCard, i3.IonCardContent, i3.IonCardHeader, i3.IonContent, i3.IonHeader, i3.IonIcon, i3.IonInput, i3.IonItem, i3.IonLabel, i3.IonList, i3.IonSearchbar, i3.IonTitle, i3.IonToolbar, i3.TextValueAccessor, i3.RouterLinkDelegate, i4.RouterLink]\n  });\n  return DocumentPage;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}