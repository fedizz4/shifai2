{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/MacBook Air/Desktop/shifai1VV/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _RendezvousmodalComponent;\nimport { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"./rendezvousmodal.component.html?ngResource\";\nimport __NG_CLI_RESOURCE__1 from \"./rendezvousmodal.component.scss?ngResource\";\nimport { Component, Input, NgModule } from '@angular/core';\nimport { IonicModule, ModalController } from '@ionic/angular';\nimport { AngularFirestore } from '@angular/fire/compat/firestore';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { selectedDate } from '../work-hours-modal/work-hours-modal.component';\nimport { selectedHour } from '../heure/heure.component';\nimport { selectedNom, selectedPrenom } from '../personne-modal/personne-modal.component';\nimport { medecinUid } from 'src/app/recherche-medecin/recherche-medecin.page';\nimport { inscritUid } from 'src/app/login/login.page';\nimport { AddRendezVous, AddRendezVousForUser, getMedecinByUid, generateUniqueKey, AddPatientWithNomPrenom, ajouterConsultation, checkExistingPatient } from 'src/firebaseConfig';\nlet RendezvousmodalComponent = (_RendezvousmodalComponent = class RendezvousmodalComponent {\n  constructor(modalController, firestore) {\n    this.modalController = modalController;\n    this.firestore = firestore;\n    this.medecin = {\n      nom: '',\n      prenom: '',\n      uid: ''\n    };\n    this.selectedTime = selectedHour;\n    this.dates = selectedDate;\n    this.patientName = selectedPrenom;\n    this.patientnom = selectedNom;\n    this.uid = inscritUid;\n    this.nommed = this.medecin.nom;\n    this.medecinuid = medecinUid; // Assignation du nom du médecin\n  }\n  ngOnInit() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      console.log(\"prenom = \", selectedNom);\n      console.log(\"time = \", selectedHour);\n      console.log(\"medecinuid =\", medecinUid);\n      console.log(\"useruid =\", inscritUid);\n      console.log(\"date selectionne =\", selectedDate);\n      try {\n        const medecinData = yield getMedecinByUid(_this.firestore, medecinUid);\n        if (medecinData && medecinData.length > 0) {\n          // Vérifiez si des données de médecin ont été récupérées et si elles ne sont pas null\n          _this.medecin = medecinData[0];\n          _this.nommed = _this.medecin.nom;\n        }\n      } catch (error) {\n        console.error('Erreur lors de la récupération des informations du médecin:', error);\n      }\n    })();\n  }\n  saveRendezVous() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const rendezVousData = {\n        date: selectedDate,\n        heure: selectedHour,\n        nom: selectedNom,\n        prenom: selectedPrenom,\n        useruid: inscritUid,\n        medecinNom: _this2.medecin.nom,\n        medecinPrenom: _this2.medecin.prenom,\n        medecinuid: medecinUid,\n        key: yield generateUniqueKey() // Générer une clé unique pour le rendez-vous\n      };\n      const k = rendezVousData.key;\n      AddRendezVous(_this2.firestore, medecinUid, rendezVousData).then(() => {\n        console.log('Rendez-vous enregistré avec succès.');\n        console.log('key= ', k);\n        _this2.closeModal();\n      }).catch(error => {\n        console.error('Erreur lors de l\\'enregistrement du rendez-vous :', error);\n      });\n      AddRendezVousForUser(_this2.firestore, inscritUid, rendezVousData).then(() => {\n        console.log('Rendez-vous enregistré avec succès chez le patient.');\n        _this2.closeModal();\n      }).catch(error => {\n        console.error('Erreur lors de l\\'enregistrement du rendez-vous chez le patient:', error);\n      });\n      try {\n        // Vérifiez d'abord si le patient existe déjà\n        const existingPatientUid = yield checkExistingPatient(_this2.firestore, medecinUid, rendezVousData.nom, rendezVousData.prenom);\n        const consultationData = {\n          date: rendezVousData.date,\n          details: '' // Vous pouvez fournir les détails de la consultation ici\n        };\n        if (existingPatientUid) {\n          // Le patient existe, ajoutez simplement la consultation\n          yield ajouterConsultation(_this2.firestore, medecinUid, existingPatientUid, consultationData);\n        } else {\n          // Le patient n'existe pas, ajoutez d'abord le patient puis la consultation\n          yield AddPatientWithNomPrenom(_this2.firestore, medecinUid, rendezVousData);\n        }\n        console.log('Rendez-vous ajouté avec succès.');\n      } catch (error) {\n        console.error('Erreur lors de l\\'ajout du rendez-vous :', error);\n      }\n    })();\n  }\n  closeModal() {\n    this.modalController.dismiss();\n  }\n}, _RendezvousmodalComponent.ctorParameters = () => [{\n  type: ModalController\n}, {\n  type: AngularFirestore\n}], _RendezvousmodalComponent.propDecorators = {\n  medecin: [{\n    type: Input\n  }]\n}, _RendezvousmodalComponent);\nRendezvousmodalComponent = __decorate([Component({\n  selector: 'app-rendezvousmodal',\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n})], RendezvousmodalComponent);\nexport { RendezvousmodalComponent };\nlet RendezvousmodalModule = class RendezvousmodalModule {};\nRendezvousmodalModule = __decorate([NgModule({\n  declarations: [RendezvousmodalComponent],\n  imports: [CommonModule, FormsModule, IonicModule],\n  providers: [AngularFirestore]\n})], RendezvousmodalModule);\nexport { RendezvousmodalModule };","map":{"version":3,"names":["Component","Input","NgModule","IonicModule","ModalController","AngularFirestore","CommonModule","FormsModule","selectedDate","selectedHour","selectedNom","selectedPrenom","medecinUid","inscritUid","AddRendezVous","AddRendezVousForUser","getMedecinByUid","generateUniqueKey","AddPatientWithNomPrenom","ajouterConsultation","checkExistingPatient","RendezvousmodalComponent","_RendezvousmodalComponent","constructor","modalController","firestore","medecin","nom","prenom","uid","selectedTime","dates","patientName","patientnom","nommed","medecinuid","ngOnInit","_this","_asyncToGenerator","console","log","medecinData","length","error","saveRendezVous","_this2","rendezVousData","date","heure","useruid","medecinNom","medecinPrenom","key","k","then","closeModal","catch","existingPatientUid","consultationData","details","dismiss","__decorate","selector","template","__NG_CLI_RESOURCE__0","RendezvousmodalModule","declarations","imports","providers"],"sources":["C:\\Users\\MacBook Air\\Desktop\\shifai1VV\\src\\app\\affiche-medecin\\rendezvousmodal\\rendezvousmodal.component.ts"],"sourcesContent":["import { Component, Input, NgModule } from '@angular/core';\nimport { IonicModule, ModalController } from '@ionic/angular';\nimport { AngularFirestore } from '@angular/fire/compat/firestore';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport {  selectedDate } from '../work-hours-modal/work-hours-modal.component';\nimport { selectedHour } from '../heure/heure.component';\nimport { selectedNom, selectedPrenom } from '../personne-modal/personne-modal.component';\nimport { medecinUid } from 'src/app/recherche-medecin/recherche-medecin.page';\nimport { inscritUid } from 'src/app/login/login.page';\nimport { AddRendezVous, AddRendezVousForUser, getMedecinByUid,generateUniqueKey, AddPatientWithNomPrenom, ajouterConsultation, getPatientsUIDByMedecinId, checkExistingPatient } from 'src/firebaseConfig';\n\ninterface consultationData {\n  date: string;\n  details?: string;\n  \n}\ninterface MedecinData {\n  nom: string;\n  prenom: string;\n  uid: string;\n}\n\ninterface RendezVousData {\n  date: string;\n  heure: string;\n  nom: string;\n  prenom: string;\n  useruid: string;\n  medecinNom: string;\n  medecinPrenom: string;\n  medecinuid:string;\n  key: string; // Ajout de la clé unique pour le rendez-vous\n}\n\n@Component({\n  selector: 'app-rendezvousmodal',\n  templateUrl: './rendezvousmodal.component.html',\n  styleUrls: ['./rendezvousmodal.component.scss'],\n})\nexport class RendezvousmodalComponent {\n  @Input() medecin: MedecinData = { nom: '', prenom: '', uid: '' };\n  selectedTime: string = selectedHour;\n  dates: string = selectedDate;\n  patientName = selectedPrenom;\n  patientnom = selectedNom;\n  uid = inscritUid;\n  nommed = this.medecin.nom; \n  medecinuid=medecinUid;// Assignation du nom du médecin\n  \n  constructor(private modalController: ModalController, private firestore: AngularFirestore) {}\n\n  async ngOnInit() {\n    console.log(\"prenom = \", selectedNom);\n    console.log(\"time = \", selectedHour);\n    console.log(\"medecinuid =\", medecinUid);\n    console.log(\"useruid =\", inscritUid);\n    console.log(\"date selectionne =\", selectedDate);\n\n    try {\n      const medecinData: MedecinData[] | null = await getMedecinByUid(this.firestore, medecinUid);\n      if (medecinData && medecinData.length > 0) { // Vérifiez si des données de médecin ont été récupérées et si elles ne sont pas null\n        this.medecin = medecinData[0];\n        this.nommed = this.medecin.nom;\n      }\n    } catch (error) {\n      console.error('Erreur lors de la récupération des informations du médecin:', error);\n    }\n  }\n\n  async saveRendezVous() {\n    \n    const rendezVousData: RendezVousData = {\n      date: selectedDate,\n      heure: selectedHour,\n      nom: selectedNom,\n      prenom: selectedPrenom,\n      useruid: inscritUid,\n      medecinNom: this.medecin.nom,\n      medecinPrenom: this.medecin.prenom,\n      medecinuid : medecinUid ,\n      key: await generateUniqueKey(), // Générer une clé unique pour le rendez-vous\n    };\n    const k=rendezVousData.key;\n    AddRendezVous(this.firestore, medecinUid, rendezVousData)\n      .then(() => {\n        console.log('Rendez-vous enregistré avec succès.');\n        console.log('key= ',k);\n        this.closeModal();\n      })\n      .catch((error) => {\n        console.error('Erreur lors de l\\'enregistrement du rendez-vous :', error);\n    \n      });\n\n    AddRendezVousForUser(this.firestore, inscritUid, rendezVousData)\n      .then(() => {\n        console.log('Rendez-vous enregistré avec succès chez le patient.');\n        \n        this.closeModal();\n      })\n      .catch((error) => {\n        console.error('Erreur lors de l\\'enregistrement du rendez-vous chez le patient:', error);\n      });\n      try {\n        // Vérifiez d'abord si le patient existe déjà\n        const existingPatientUid = await checkExistingPatient(this.firestore, medecinUid, rendezVousData.nom, rendezVousData.prenom);\n        const consultationData: consultationData = {\n          date: rendezVousData.date,\n          details: '' // Vous pouvez fournir les détails de la consultation ici\n      };\n    \n        if (existingPatientUid) {\n          // Le patient existe, ajoutez simplement la consultation\n          await ajouterConsultation(this.firestore, medecinUid, existingPatientUid,consultationData);\n        } else {\n          // Le patient n'existe pas, ajoutez d'abord le patient puis la consultation\n          await AddPatientWithNomPrenom(this.firestore, medecinUid, rendezVousData);\n        }\n    \n        console.log('Rendez-vous ajouté avec succès.');\n      } catch (error) {\n        console.error('Erreur lors de l\\'ajout du rendez-vous :', error);\n      }\n    }\n\n    \n  closeModal() {\n    this.modalController.dismiss();\n  }\n}\n\n@NgModule({\n  declarations: [RendezvousmodalComponent],\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule\n  ],\n  providers: [AngularFirestore],\n})\nexport class RendezvousmodalModule {}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}