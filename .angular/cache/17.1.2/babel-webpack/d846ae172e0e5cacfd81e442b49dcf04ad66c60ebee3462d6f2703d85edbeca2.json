{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/MacBook Air/Desktop/shifai1VV/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n// Import des modules nécessaires\nimport { initializeApp } from 'firebase/app';\nimport { getAnalytics } from 'firebase/analytics';\nimport { getAuth } from 'firebase/auth';\nimport { finalize } from 'rxjs/operators';\nimport { getStorage } from 'firebase/storage';\nimport { getFirestore } from 'firebase/firestore';\n// Configuration Firebase\nexport const firebaseConfig = {\n  apiKey: \"AIzaSyA7iKnEnxTdm9UdRnegNamwRDsLFESDk7s\",\n  authDomain: \"shifai-f46a0.firebaseapp.com\",\n  projectId: \"shifai-f46a0\",\n  storageBucket: \"shifai-f46a0.appspot.com\",\n  messagingSenderId: \"383597072570\",\n  appId: \"1:383597072570:web:870d9d280b22a1aa28b283\",\n  measurementId: \"G-Y2QLPH92NB\"\n};\n// Initialisation Firebase\nexport const app = initializeApp(firebaseConfig);\nexport const storage = getStorage(app, 'gs://shifai-f46a0.appspot.com');\nconst analytics = getAnalytics(app);\n// Objet d'authentification pour être utilisé dans d'autres fichiers\n// Fonction pour connecter l'utilisateur\n/* export async function loginUser(email: string, password: string) {\n  try {\n    \n    const userCredential = await signInWithEmailAndPassword(auth, email, password);\n    console.log('Utilisateur connecté :', userCredential.user);\n    return userCredential;\n  } catch (error) {\n    console.error(error);\n    throw error;\n  }\n}\n*/\nconst auth = getAuth(app);\nconst firestore = getFirestore(app);\nexport { auth, firestore };\nexport function AddUser(_x, _x2, _x3, _x4, _x5, _x6, _x7, _x8, _x9) {\n  return _AddUser.apply(this, arguments);\n}\nfunction _AddUser() {\n  _AddUser = _asyncToGenerator(function* (firestore, app, familyName, name, email, password, date, sexe, role) {\n    const user = {\n      familyName: familyName,\n      name: name,\n      email: email,\n      password: password,\n      date: date,\n      sexe: sexe,\n      role: role\n    };\n    try {\n      // Ajouter l'utilisateur à la collection \"inscrits\"\n      const userDocRef = yield firestore.collection('inscrits').add(user);\n      console.log('Utilisateur ajouté avec succès à Firebase.');\n      // Récupérer l'uid généré pour ce document\n      const uid = userDocRef.id;\n      // Mettre à jour le document avec l'uid\n      yield userDocRef.update({\n        uid: uid\n      });\n      console.log('UID ajouté avec succès à l\\'utilisateur.');\n      // Créer une sous-collection \"rdv\" pour l'utilisateur\n      yield userDocRef.collection('rdv').add({}); // Ajouter ici les données de rendez-vous si nécessaire\n      yield userDocRef.collection('documents').add({});\n      console.log('Sous-collection \"rdv\" créée avec succès pour l\\'utilisateur.');\n    } catch (error) {\n      console.error('Erreur lors de l\\'ajout de l\\'utilisateur et de la sous-collection \"rdv\" à Firebase :', error);\n      throw error; // Vous pouvez gérer l'erreur selon vos besoins\n    }\n  });\n  return _AddUser.apply(this, arguments);\n}\nexport function AddUserToAuth(_x10, _x11, _x12) {\n  return _AddUserToAuth.apply(this, arguments);\n}\nfunction _AddUserToAuth() {\n  _AddUserToAuth = _asyncToGenerator(function* (auth, email, password) {\n    try {\n      // Ajouter l'utilisateur à l'authentification Firebase\n      const userCredential = yield auth.createUserWithEmailAndPassword(email, password);\n      console.log('Utilisateur ajouté avec succès à l\\'authentification Firebase.');\n      return userCredential.user;\n    } catch (error) {\n      console.error('Erreur lors de l\\'ajout de l\\'utilisateur à l\\'authentification Firebase :', error);\n      throw error; // Vous pouvez gérer l'erreur selon vos besoins\n    }\n  });\n  return _AddUserToAuth.apply(this, arguments);\n}\nexport function AddMedicament(_x13, _x14, _x15, _x16, _x17, _x18) {\n  return _AddMedicament.apply(this, arguments);\n}\nfunction _AddMedicament() {\n  _AddMedicament = _asyncToGenerator(function* (firestore, app, nom, dosage, prises, uid) {\n    const medicament = {\n      nom: nom,\n      dosage: dosage,\n      prises: prises.map(prise => ({\n        label: prise.label,\n        checked: prise.checked\n      })),\n      uid: uid\n    };\n    try {\n      const medref = yield firestore.collection('medicaments').add(medicament);\n      const uid = medref.id;\n      // Mettre à jour le document avec l'uid\n      yield medref.update({\n        idd: uid\n      });\n    } catch (error) {\n      console.error('Erreur lors de l\\'ajout du médicament:', error);\n      throw error; // Renvoyer l'erreur pour que le gestionnaire puisse la gérer\n    }\n  });\n  return _AddMedicament.apply(this, arguments);\n}\nexport function ModifierMedicament(_x19, _x20, _x21, _x22, _x23) {\n  return _ModifierMedicament.apply(this, arguments);\n}\nfunction _ModifierMedicament() {\n  _ModifierMedicament = _asyncToGenerator(function* (firestore, medicamentID, nom, dosage, prises) {\n    const medicament = {\n      nom: nom,\n      dosage: dosage,\n      prises: prises.map(prise => ({\n        label: prise.label,\n        checked: prise.checked\n      }))\n    };\n    try {\n      yield firestore.collection('medicaments').doc(medicamentID).update(medicament);\n      console.log('Médicament mis à jour avec succès.');\n    } catch (error) {\n      console.error('Erreur lors de la modification du médicament:', error);\n      throw error; // Renvoyer l'erreur pour que le gestionnaire puisse la gérer\n    }\n  });\n  return _ModifierMedicament.apply(this, arguments);\n}\nexport function getMedicamentsByUid(_x24, _x25) {\n  return _getMedicamentsByUid.apply(this, arguments);\n}\nfunction _getMedicamentsByUid() {\n  _getMedicamentsByUid = _asyncToGenerator(function* (firestore, uid) {\n    try {\n      const snapshot = yield firestore.collection('medicaments').ref.where('uid', '==', uid).get();\n      // Convertir le snapshot en tableau de médicaments en utilisant l'interface\n      const medicaments = snapshot.docs.map(doc => {\n        const data = doc.data(); // Cast vers l'interface définie\n        return {\n          id: doc.id,\n          ...data\n        };\n      });\n      return medicaments;\n    } catch (error) {\n      console.error('Erreur lors de la récupération des médicaments :', error);\n      throw error;\n    }\n  });\n  return _getMedicamentsByUid.apply(this, arguments);\n}\nexport function getMedicamentsByid(_x26, _x27) {\n  return _getMedicamentsByid.apply(this, arguments);\n}\nfunction _getMedicamentsByid() {\n  _getMedicamentsByid = _asyncToGenerator(function* (firestore, id) {\n    try {\n      const snapshot = yield firestore.collection('medicaments').doc(id).ref.get();\n      // Convertir le snapshot en tableau de médicaments en utilisant l'interface\n      const medicaments = [snapshot.data()];\n      return medicaments[0];\n    } catch (error) {\n      console.error('Erreur lors de la récupération des médicaments :', error);\n      throw error;\n    }\n  });\n  return _getMedicamentsByid.apply(this, arguments);\n}\nexport function modifierMedicament(_x28, _x29, _x30) {\n  return _modifierMedicament.apply(this, arguments);\n}\nfunction _modifierMedicament() {\n  _modifierMedicament = _asyncToGenerator(function* (firestore, medicamentId, medicament) {\n    const medicamentDoc = firestore.collection(`medicaments`).doc(medicamentId);\n    medicamentDoc.update({\n      dosage: medicament.dosage,\n      nom: medicament.nom,\n      prises: medicament.prises\n    });\n  });\n  return _modifierMedicament.apply(this, arguments);\n}\nexport function supprimerMedicament(_x31, _x32) {\n  return _supprimerMedicament.apply(this, arguments);\n}\nfunction _supprimerMedicament() {\n  _supprimerMedicament = _asyncToGenerator(function* (firestore, medicamentId) {\n    firestore.collection('medicaments').doc(medicamentId).delete().then(() => {\n      console.log('Médicament supprimé avec succès!');\n      // Afficher un message de succès\n    }).catch(error => {\n      console.error('Erreur lors de la suppression du médicament :', error);\n      // Afficher un message d'erreur\n    });\n  });\n  return _supprimerMedicament.apply(this, arguments);\n}\nexport function getMedicaments(_x33) {\n  return _getMedicaments.apply(this, arguments);\n}\nfunction _getMedicaments() {\n  _getMedicaments = _asyncToGenerator(function* (firestore) {\n    try {\n      const snapshot = yield firestore.collection('med').ref.get();\n      // Convertir le snapshot en tableau de médicaments en utilisant l'interface\n      const medicaments = snapshot.docs.map(doc => {\n        const data = doc.data(); // Cast vers l'interface définie\n        return {\n          id: doc.id,\n          ...data\n        };\n      });\n      return medicaments;\n    } catch (error) {\n      console.error('Erreur lors de la récupération des médicaments :', error);\n      throw error;\n    }\n  });\n  return _getMedicaments.apply(this, arguments);\n}\nexport function getMedecinsByLocalisationAndSpecialite(_x34, _x35, _x36) {\n  return _getMedecinsByLocalisationAndSpecialite.apply(this, arguments);\n}\nfunction _getMedecinsByLocalisationAndSpecialite() {\n  _getMedecinsByLocalisationAndSpecialite = _asyncToGenerator(function* (firestore, localisation, specialite) {\n    try {\n      const snapshot = yield firestore.collection('medecin').ref.where('specialite', '==', specialite).where('etat', '==', localisation).get();\n      // Vérifier si snapshot est défini avant de l'utiliser\n      if (snapshot) {\n        // Convertir le snapshot en tableau de médecins\n        const medecins = snapshot.docs.map(doc => {\n          const data = doc.data();\n          return {\n            id: doc.id,\n            ...data\n          };\n        });\n        return medecins;\n      } else {\n        console.error('La requête n\\'a pas renvoyé de snapshot.');\n        return []; // Ou lancez une erreur appropriée selon vos besoins\n      }\n    } catch (error) {\n      console.error('Erreur lors de la récupération des médecins (firebase) :', error);\n      throw error;\n    }\n  });\n  return _getMedecinsByLocalisationAndSpecialite.apply(this, arguments);\n}\nexport function AddMedecin(_x37, _x38, _x39, _x40, _x41, _x42, _x43, _x44, _x45, _x46, _x47, _x48, _x49, _x50) {\n  return _AddMedecin.apply(this, arguments);\n}\nfunction _AddMedecin() {\n  _AddMedecin = _asyncToGenerator(function* (firestore, storage, nom, prenom, email, password, date, sexe, role, delegation, etat, specialite, telephone, file) {\n    let fileUrl = null;\n    if (file) {\n      const filePath = `gs://shifai-f46a0.appspot.com/${file.name}`; // Replace 'votre/chemin/dans/storage' with your storage path\n      const fileRef = storage.refFromURL(filePath);\n      const uploadTask = fileRef.put(file);\n      yield uploadTask.snapshotChanges().pipe(finalize( /*#__PURE__*/_asyncToGenerator(function* () {\n        fileUrl = yield fileRef.getDownloadURL().toPromise(); // Wait for the Observable to resolve\n      }))).toPromise(); // Wait for the upload task to complete\n    }\n    function AddMedecin(_x199, _x200, _x201, _x202, _x203, _x204, _x205, _x206, _x207, _x208, _x209, _x210, _x211) {\n      return _AddMedecin2.apply(this, arguments);\n    }\n    function _AddMedecin2() {\n      _AddMedecin2 = _asyncToGenerator(function* (firestore, nom, prenom, email, password, date, sexe, role, specialite, telephone, fileUrl, delegation, etat) {\n        try {\n          const medecin = {\n            nom: nom,\n            prenom: prenom,\n            email: email,\n            password: password,\n            date: date,\n            sexe: sexe,\n            role: role,\n            specialite: specialite,\n            telephone: telephone,\n            fileUrl: fileUrl,\n            delegation: delegation,\n            etat: etat\n          };\n          // Ajoutez le médecin à la collection \"admin\"\n          const medecinRef = yield firestore.collection('admin').add(medecin);\n          // Récupérez l'ID du médecin nouvellement ajouté\n          const medecinId = medecinRef.id;\n          yield medecinRef.update({\n            uid: medecinRef.id\n          });\n          // Créez automatiquement une sous-collection \"appointments\" pour ce médecin\n          yield firestore.collection('admin').doc(medecinId).collection('rdv').add({/* Données initiales des rendez-vous si nécessaire */});\n          console.log('Médecin ajouté avec succès à Firebase.');\n        } catch (error) {\n          console.error('Erreur lors de l\\'ajout du médecin à Firebase :', error);\n        }\n      });\n      return _AddMedecin2.apply(this, arguments);\n    }\n  });\n  return _AddMedecin.apply(this, arguments);\n}\nexport function getMedecinByUid(_x51, _x52) {\n  return _getMedecinByUid.apply(this, arguments);\n}\nfunction _getMedecinByUid() {\n  _getMedecinByUid = _asyncToGenerator(function* (firestore, uid) {\n    const snapshot = yield firestore.collection('medecin').ref.where('uid', '==', uid).get();\n    if (snapshot) {\n      // Convertir le snapshot en tableau de médecins\n      const medecins = snapshot.docs.map(doc => {\n        const data = doc.data();\n        return {\n          id: doc.id,\n          ...data\n        };\n      });\n      return medecins;\n    } else {\n      console.log('Aucun médecin trouvé pour cet UID :', uid);\n      return null; // Ou renvoyez un objet vide, selon vos besoins\n    }\n  });\n  return _getMedecinByUid.apply(this, arguments);\n}\nexport function getMedecinByUidA(_x53, _x54) {\n  return _getMedecinByUidA.apply(this, arguments);\n}\nfunction _getMedecinByUidA() {\n  _getMedecinByUidA = _asyncToGenerator(function* (firestore, uid) {\n    try {\n      const snapshot = yield firestore.collection('medecin').ref.where('uid', '==', uid).get();\n      if (!snapshot.empty) {\n        const doc = snapshot.docs[0]; // Récupérez le premier document du snapshot\n        const data = doc.data();\n        const medecin = {\n          ...data\n        };\n        return medecin;\n      } else {\n        console.log('Aucun médecin trouvé pour cet UID :', uid);\n        return null; // Ou renvoyez un objet vide, selon vos besoins\n      }\n    } catch (error) {\n      console.error('Erreur lors de la récupération du médecin :', error);\n      return null;\n    }\n  });\n  return _getMedecinByUidA.apply(this, arguments);\n}\nexport function loginMedecins(_x55, _x56, _x57) {\n  return _loginMedecins.apply(this, arguments);\n}\nfunction _loginMedecins() {\n  _loginMedecins = _asyncToGenerator(function* (firestore, email, password) {\n    try {\n      // Recherchez le médecin dans la base de données avec l'email fourni\n      const medecinCollection = firestore.collection('medecin').ref;\n      const medecinQuery = yield medecinCollection.where('email', '==', email).get();\n      if (medecinQuery.size === 1) {\n        // Vérifiez le mot de passe (vous pouvez utiliser une bibliothèque de hachage appropriée)\n        const medecinData = medecinQuery.docs[0].data();\n        const uid = medecinQuery.docs[0].id;\n        if (medecinData && medecinData.password === password) {\n          console.log('Connexion réussie en tant que médecin.');\n          return {\n            medecinData,\n            uid\n          }; // Authentification réussie, renvoie les informations du médecin et son UID\n        }\n      }\n      console.error('Identifiants invalides.');\n      return null; // Authentification échouée\n    } catch (error) {\n      console.error('Erreur lors de la connexion du médecin :', error);\n      throw error; // Vous pouvez gérer l'erreur ici ou la laisser remonter\n    }\n  });\n  return _loginMedecins.apply(this, arguments);\n}\nexport function loginsecretaire(_x58, _x59, _x60) {\n  return _loginsecretaire.apply(this, arguments);\n}\nfunction _loginsecretaire() {\n  _loginsecretaire = _asyncToGenerator(function* (firestore, email, password) {\n    try {\n      // Recherchez le médecin dans la base de données avec l'email fourni\n      const medecinCollection = firestore.collection('secretaire').ref;\n      const secQuery = yield medecinCollection.where('gmail', '==', email).get();\n      if (secQuery.size === 1) {\n        // Vérifiez le mot de passe (vous pouvez utiliser une bibliothèque de hachage appropriée)\n        const secretaireData = secQuery.docs[0].data();\n        const uid = secQuery.docs[0].id;\n        if (secretaireData && secretaireData.password === password) {\n          console.log('Connexion réussie en tant que médecin.');\n          medsec = secretaireData.medecinUid;\n          return {\n            secretaireData,\n            uid\n          }; // Authentification réussie, renvoie les informations du médecin et son UID\n        }\n      }\n      console.error('Identifiants invalides.');\n      return null; // Authentification échouée\n    } catch (error) {\n      console.error('Erreur lors de la connexion du médecin :', error);\n      throw error; // Vous pouvez gérer l'erreur ici ou la laisser remonter\n    }\n  });\n  return _loginsecretaire.apply(this, arguments);\n}\nexport let medsec;\nexport let secuid = {\n  uid: ''\n};\nexport const medecinUid = {\n  uid: ''\n};\nexport function ajouterSecretaire(_x61, _x62, _x63, _x64, _x65, _x66, _x67) {\n  return _ajouterSecretaire.apply(this, arguments);\n}\nfunction _ajouterSecretaire() {\n  _ajouterSecretaire = _asyncToGenerator(function* (firestore, nom, prenom, mail, numero, password, medecinUid) {\n    try {\n      // Ajoutez votre logique pour ajouter les données du formulaire à la collection 'secretaire'\n      // Utilisez firestore.collection('secretaire') pour accéder à la collection 'secretaire' dans Firebase\n      const secretaire = {\n        nom: nom,\n        prenom: prenom,\n        mail: mail,\n        numero: numero,\n        password: password,\n        medecinUid: medecinUid\n      };\n      const userDocRef = yield firestore.collection('secretaire').add(secretaire);\n      const uid = userDocRef.id;\n      // Mettre à jour le document avec l'uid\n      yield userDocRef.update({\n        uid: uid\n      });\n      console.log('Secrétaire ajoutée avec succès à la base de données.');\n    } catch (error) {\n      console.error('Erreur lors de l\\'ajout du secrétaire à la base de données :', error);\n      throw error; // Vous pouvez gérer l'erreur ici ou la laisser remonter\n    }\n  });\n  return _ajouterSecretaire.apply(this, arguments);\n}\nexport function getSecretaireByUid(_x68, _x69) {\n  return _getSecretaireByUid.apply(this, arguments);\n}\nfunction _getSecretaireByUid() {\n  _getSecretaireByUid = _asyncToGenerator(function* (firestore, uid) {\n    const snapshot1 = yield firestore.collection('secretaire').ref.where('medecinUid', '==', uid).get();\n    const secretaires = snapshot1.docs.map(doc => {\n      const data = doc.data();\n      return {\n        uid: doc.id,\n        nom: data.nom,\n        prenom: data.prenom,\n        gmail: data.gmail,\n        numero: data.numero,\n        password: data.password\n      };\n    });\n    return secretaires;\n  });\n  return _getSecretaireByUid.apply(this, arguments);\n}\nexport function getSecretaireBysecUid(_x70, _x71) {\n  return _getSecretaireBysecUid.apply(this, arguments);\n}\nfunction _getSecretaireBysecUid() {\n  _getSecretaireBysecUid = _asyncToGenerator(function* (firestore, uid) {\n    try {\n      // Récupérer le document du secrétaire par UID\n      const secretaireDoc = yield firestore.collection('secretaire').doc(uid).ref.get();\n      // Vérifier si le document existe\n      if (secretaireDoc) {\n        // Récupérer les données du secrétaire à partir du document\n        const secretaireData = secretaireDoc.data();\n        return secretaireData;\n      } else {\n        console.log('Aucun secrétaire trouvé avec l\\'UID spécifié.');\n        return null;\n      }\n    } catch (error) {\n      console.error('Erreur lors de la récupération du secrétaire :', error);\n      throw error; // Vous pouvez gérer l'erreur ici ou la laisser remonter\n    }\n  });\n  return _getSecretaireBysecUid.apply(this, arguments);\n}\nexport function modifierSecretaire(_x72, _x73, _x74, _x75, _x76, _x77, _x78, _x79) {\n  return _modifierSecretaire.apply(this, arguments);\n}\nfunction _modifierSecretaire() {\n  _modifierSecretaire = _asyncToGenerator(function* (firestore, secretaireID, nom, prenom, mail, numero, password, medecinUid) {\n    try {\n      // Mettre à jour les données du secrétaire dans la collection 'inscrits'\n      yield firestore.collection('secretaire').doc(secretaireID).update({\n        nom: nom,\n        prenom: prenom,\n        mail: mail,\n        numero: numero,\n        password: password,\n        medecinUid: medecinUid\n      });\n      console.log('Secrétaire mis à jour avec succès dans la base de données.');\n    } catch (error) {\n      console.error('Erreur lors de la mise à jour du secrétaire dans la base de données :', error);\n      throw error; // Vous pouvez gérer l'erreur ici ou la laisser remonter\n    }\n  });\n  return _modifierSecretaire.apply(this, arguments);\n}\nexport function supprimerSecretaire(_x80, _x81) {\n  return _supprimerSecretaire.apply(this, arguments);\n}\n// firebaseConfig.ts\nfunction _supprimerSecretaire() {\n  _supprimerSecretaire = _asyncToGenerator(function* (firestore, secretaireId) {\n    try {\n      // Référence au document du secrétaire à supprimer\n      const secretaireRef = firestore.collection('secretaire').doc(secretaireId);\n      // Supprimer le document du secrétaire\n      yield secretaireRef.delete();\n      console.log('Le secrétaire a été supprimé avec succès.');\n    } catch (error) {\n      console.error('Erreur lors de la suppression du secrétaire :', error);\n    }\n  });\n  return _supprimerSecretaire.apply(this, arguments);\n}\nexport function getPatientsByMedecinUid(_x82, _x83) {\n  return _getPatientsByMedecinUid.apply(this, arguments);\n}\nfunction _getPatientsByMedecinUid() {\n  _getPatientsByMedecinUid = _asyncToGenerator(function* (firestore, medecinUid) {\n    try {\n      const snapshot = yield firestore.collection('patient').ref.where('medecinUid', '==', medecinUid).get();\n      const patients = snapshot.docs.map(doc => {\n        const data = doc.data();\n        return {\n          uid: doc.id,\n          nom: data.nom,\n          prenom: data.prenom,\n          email: data.email,\n          telephone: data.telephone,\n          age: data.age,\n          sexe: data.sexe,\n          useruid: data.useruid,\n          groupeSanguin: data.groupeSanguin,\n          situationFamiliale: data.situationFamiliale,\n          profession: data.profession,\n          telephone2: data.telephone2,\n          numeroAssurance: data.numeroAssurance,\n          adresse: data.adresse,\n          note: data.note,\n          antecedentsMedicaux: data.antecedentsMedicaux,\n          antecedentsChirurgicaux: data.antecedentsChirurgicaux,\n          antecedentsFamiliaux: data.antecedentsFamiliaux,\n          autresAntecedents: data.autresAntecedents,\n          medicaments: data.medicaments\n        };\n      });\n      return patients;\n    } catch (error) {\n      console.error('Error fetching patients:', error);\n      throw error;\n    }\n  });\n  return _getPatientsByMedecinUid.apply(this, arguments);\n}\n;\nexport function getMedicamentByName(_x84, _x85) {\n  return _getMedicamentByName.apply(this, arguments);\n}\nfunction _getMedicamentByName() {\n  _getMedicamentByName = _asyncToGenerator(function* (firestore, nomMedicament) {\n    const snapshot = yield firestore.collection('med').ref.where('specialite', '==', nomMedicament).get();\n    if (snapshot) {\n      // Convertir le snapshot en tableau de médicaments\n      const medicaments = snapshot.docs.map(doc => {\n        const data = doc.data();\n        return {\n          id: doc.id,\n          ...data\n        };\n      });\n      return medicaments;\n    } else {\n      console.log('Aucun médicament trouvé avec ce nom :', nomMedicament);\n      return null; // Ou renvoyez un objet vide, selon vos besoins\n    }\n  });\n  return _getMedicamentByName.apply(this, arguments);\n}\nexport function getPersonByUid(_x86, _x87) {\n  return _getPersonByUid.apply(this, arguments);\n}\nfunction _getPersonByUid() {\n  _getPersonByUid = _asyncToGenerator(function* (firestore, uid) {\n    try {\n      const snapshot = yield firestore.collection('personne').ref.where('uidPersonne', '==', uid).get();\n      if (snapshot) {\n        // Convertir le snapshot en objet personne\n        const personne = snapshot.docs.map(doc => {\n          const data = doc.data();\n          return {\n            id: doc.id,\n            ...data\n          };\n        });\n        return personne;\n      } else {\n        console.log('Aucune personne trouvée avec cet UID :', uid);\n        return null; // Ou renvoyez un objet vide, selon vos besoins\n      }\n    } catch (error) {\n      console.error('Erreur lors de la récupération de la personne par UID:', error);\n      throw error; // Vous pouvez gérer l'erreur selon vos besoins\n    }\n  });\n  return _getPersonByUid.apply(this, arguments);\n}\nexport function savePersonData(_x88, _x89, _x90, _x91) {\n  return _savePersonData.apply(this, arguments);\n}\nfunction _savePersonData() {\n  _savePersonData = _asyncToGenerator(function* (firestore, nom, prenom, uidPersonne) {\n    try {\n      const personne = {\n        nom: nom,\n        prenom: prenom,\n        uidPersonne: uidPersonne\n      };\n      yield firestore.collection('personne').add(personne);\n      console.log('Données de la personne enregistrées avec succès dans Firebase.');\n    } catch (error) {\n      console.error('Erreur lors de l\\'enregistrement des données de la personne dans Firebase :', error);\n      throw error;\n    }\n  });\n  return _savePersonData.apply(this, arguments);\n}\nexport function AddRendezVous(_x92, _x93, _x94) {\n  return _AddRendezVous.apply(this, arguments);\n}\nfunction _AddRendezVous() {\n  _AddRendezVous = _asyncToGenerator(function* (firestore, medecinId, rendezVousData) {\n    try {\n      // Enregistrer le rendez-vous dans la sous-collection \"rdv\" pour le médecin spécifié\n      yield firestore.collection('medecin').doc(medecinId).collection('rdv').add(rendezVousData);\n      // Enregistrer le nom et le prénom du patient dans la liste des patients du médecin\n      console.log('Rendez-vous ajouté avec succès à Firebase.');\n    } catch (error) {\n      console.error('Erreur lors de l\\'ajout du rendez-vous à Firebase :', error);\n    }\n  });\n  return _AddRendezVous.apply(this, arguments);\n}\nexport function getRdvByPatientUid(_x95, _x96) {\n  return _getRdvByPatientUid.apply(this, arguments);\n}\nfunction _getRdvByPatientUid() {\n  _getRdvByPatientUid = _asyncToGenerator(function* (firestore, userUid) {\n    try {\n      const snapshot = yield firestore.collection('inscrits').doc(userUid).collection('rdv').ref.where('useruid', '==', userUid).get();\n      if (snapshot) {\n        // Convertir le snapshot en objet rendez-vous\n        const rdv = snapshot.docs.map(doc => {\n          const data = doc.data();\n          return {\n            id: doc.id,\n            ...data\n          };\n        });\n        return rdv;\n      } else {\n        console.log('Aucun rendez-vous trouvé avec cet UID de patient :', userUid);\n        return null; // Ou renvoyez un objet vide, selon vos besoins\n      }\n    } catch (error) {\n      console.error('Erreur lors de la récupération des rendez-vous par UID de patient:', error);\n      throw error; // Vous pouvez gérer l'erreur selon vos besoins\n    }\n  });\n  return _getRdvByPatientUid.apply(this, arguments);\n}\nexport function getRdvdateByPatientUid(_x97, _x98, _x99) {\n  return _getRdvdateByPatientUid.apply(this, arguments);\n}\nfunction _getRdvdateByPatientUid() {\n  _getRdvdateByPatientUid = _asyncToGenerator(function* (firestore, userUid, date) {\n    try {\n      const snapshot = yield firestore.collection('inscrits').doc(userUid).collection('rdv').ref.where('useruid', '==', userUid).where('date', '==', date).get();\n      if (snapshot) {\n        // Convertir le snapshot en objet rendez-vous\n        const rdv = snapshot.docs.map(doc => {\n          const data = doc.data();\n          return {\n            id: doc.id,\n            ...data\n          };\n        });\n        return rdv;\n      } else {\n        console.log('Aucun rendez-vous trouvé avec cet UID de patient :', userUid);\n        return null; // Ou renvoyez un objet vide, selon vos besoins\n      }\n    } catch (error) {\n      console.error('Erreur lors de la récupération des rendez-vous par UID de patient:', error);\n      throw error; // Vous pouvez gérer l'erreur selon vos besoins\n    }\n  });\n  return _getRdvdateByPatientUid.apply(this, arguments);\n}\nexport function AddRendezVousForUser(_x100, _x101, _x102) {\n  return _AddRendezVousForUser.apply(this, arguments);\n}\nfunction _AddRendezVousForUser() {\n  _AddRendezVousForUser = _asyncToGenerator(function* (firestore, userId, rendezVousData) {\n    try {\n      // Ajoutez le rendez-vous à la sous-collection \"rdv\" pour l'utilisateur spécifié\n      yield firestore.collection('inscrits').doc(userId).collection('rdv').add({\n        ...rendezVousData\n      });\n      console.log('Rendez-vous ajouté avec succès chez l\\'utilisateur dans Firebase.');\n    } catch (error) {\n      console.error('Erreur lors de l\\'ajout du rendez-vous chez l\\'utilisateur dans Firebase :', error);\n      throw error; // Vous pouvez gérer l'erreur selon vos besoins\n    }\n  });\n  return _AddRendezVousForUser.apply(this, arguments);\n}\nexport function loginUser(_x103, _x104, _x105) {\n  return _loginUser.apply(this, arguments);\n}\nfunction _loginUser() {\n  _loginUser = _asyncToGenerator(function* (firestore, email, password) {\n    try {\n      // Recherchez l'utilisateur dans la base de données avec l'email fourni\n      const userCollection = firestore.collection('inscrits').ref;\n      const userQuery = yield userCollection.where('email', '==', email).get();\n      if (userQuery.size === 1) {\n        // Vérifiez le mot de passe\n        const userData = userQuery.docs[0].data();\n        const uid = userQuery.docs[0].id;\n        if (userData && userData.password === password) {\n          console.log('Connexion réussie en tant qu\\'utilisateur.');\n          return {\n            userData,\n            uid\n          }; // Authentification réussie, renvoie les informations de l'utilisateur et son UID\n        }\n      }\n      console.error('Identifiants invalides.');\n      return null; // Authentification échouée\n    } catch (error) {\n      console.error('Erreur lors de la connexion de l\\'utilisateur :', error);\n      throw error; // Vous pouvez gérer l'erreur ici ou la laisser remonter\n    }\n  });\n  return _loginUser.apply(this, arguments);\n}\nexport function generateUniqueKey() {\n  return _generateUniqueKey.apply(this, arguments);\n}\nfunction _generateUniqueKey() {\n  _generateUniqueKey = _asyncToGenerator(function* () {\n    const timestamp = Date.now().toString(36); // Convertit le timestamp en base 36\n    const randomStr = Math.random().toString(36).substring(2, 10); // Génère une chaîne aléatoire en base 36\n    // Opérations mathématiques complexes pour générer une clé unique\n    const key = parseInt(timestamp + randomStr, 36).toString(36).toUpperCase();\n    return key;\n  });\n  return _generateUniqueKey.apply(this, arguments);\n}\nexport function getRdvByMedUid(_x106, _x107) {\n  return _getRdvByMedUid.apply(this, arguments);\n}\nfunction _getRdvByMedUid() {\n  _getRdvByMedUid = _asyncToGenerator(function* (firestore, userUid) {\n    try {\n      const snapshot = yield firestore.collection('medecin').doc(userUid).collection('rdv').ref.where('medecinuid', '==', userUid).get();\n      if (snapshot) {\n        // Convertir le snapshot en objet rendez-vous\n        const rdv = snapshot.docs.map(doc => {\n          const data = doc.data();\n          return {\n            id: doc.id,\n            ...data\n          };\n        });\n        return rdv;\n      } else {\n        console.log('Aucun rendez-vous trouvé avec cet UID de medecin :', userUid);\n        return null; // Ou renvoyez un objet vide, selon vos besoins\n      }\n    } catch (error) {\n      console.error('Erreur lors de la récupération des rendez-vous par UID de medecin:', error);\n      throw error; // Vous pouvez gérer l'erreur selon vos besoins\n    }\n  });\n  return _getRdvByMedUid.apply(this, arguments);\n}\nexport function deleteRendezVous(_x108, _x109, _x110, _x111) {\n  return _deleteRendezVous.apply(this, arguments);\n}\nfunction _deleteRendezVous() {\n  _deleteRendezVous = _asyncToGenerator(function* (firestore, medecinUid, rendezVous, excuse) {\n    try {\n      // Supprimer le rendez-vous du médecin avec l'excuse\n      const rendezVousSnapshot1 = yield firestore.collection('medecin').doc(rendezVous.medecinuid).collection('rdv').ref.where('key', '==', rendezVous.key).get();\n      rendezVousSnapshot1.forEach(doc => {\n        doc.ref.delete();\n      });\n      const rendezVousSnapshot3 = yield firestore.collection('medecin').doc(rendezVous.medecinuid).collection('rdv').ref.where('key', '==', rendezVous.key).get();\n      rendezVousSnapshot3.forEach(doc => {\n        doc.ref.set({\n          ...rendezVous,\n          statut: \"annule\",\n          excuse: excuse\n        });\n      });\n      // Mettre à jour le rendez-vous chez le patient avec l'excuse\n      const rendezVousSnapshot2 = yield firestore.collection('inscrits').doc(rendezVous.useruid).collection('rdv').ref.where('key', '==', rendezVous.key).get();\n      rendezVousSnapshot2.forEach(doc => {\n        doc.ref.set({\n          ...rendezVous,\n          statut: \"annule\",\n          excuse: excuse\n        });\n      });\n    } catch (error) {\n      console.error('Erreur lors de la suppression du rendez-vous:', error);\n      throw error;\n    }\n  });\n  return _deleteRendezVous.apply(this, arguments);\n}\nexport function deleteRendezVousR(_x112, _x113, _x114) {\n  return _deleteRendezVousR.apply(this, arguments);\n}\nfunction _deleteRendezVousR() {\n  _deleteRendezVousR = _asyncToGenerator(function* (firestore, medecinUid, rendezVous) {\n    try {\n      // Supprimer le rendez-vous du médecin avec l'excuse\n      const rendezVousSnapshot1 = yield firestore.collection('medecin').doc(rendezVous.medecinuid).collection('rdv').ref.where('key', '==', rendezVous.key).get();\n      rendezVousSnapshot1.forEach(doc => {\n        doc.ref.delete();\n      });\n      // Supprimer le rendez-vous chez le patient\n      const rendezVousSnapshot = yield firestore.collection('inscrits').doc(rendezVous.useruid).collection('rdv').ref.where('key', '==', rendezVous.key).get();\n      rendezVousSnapshot.forEach(doc => {\n        doc.ref.delete();\n      });\n      console.log('Rendez-vous supprimé avec succès.');\n    } catch (error) {\n      console.error('Erreur lors de la suppression du rendez-vous:', error);\n      throw error;\n    }\n  });\n  return _deleteRendezVousR.apply(this, arguments);\n}\nexport function savePatient(_x115, _x116, _x117, _x118, _x119, _x120, _x121, _x122, _x123, _x124, _x125, _x126, _x127, _x128, _x129, _x130, _x131, _x132, _x133, _x134, _x135) {\n  return _savePatient.apply(this, arguments);\n}\nfunction _savePatient() {\n  _savePatient = _asyncToGenerator(function* (firestore, adresse, age, antecedentsChirurgicaux, antecedentsFamiliaux, antecedentsMedicaux, autresAntecedents, email, medicaments, groupeSanguin, nom, note, numeroAssurance, prenom, profession, sexe, situationFamiliale, telephone, telephone2, uid, medecinUid) {\n    try {\n      // Création de l'objet patientData avec les données passées en paramètres\n      const patientData = {\n        adresse,\n        age,\n        antecedentsChirurgicaux,\n        antecedentsFamiliaux,\n        antecedentsMedicaux,\n        autresAntecedents,\n        email,\n        medicaments,\n        groupeSanguin,\n        nom,\n        note,\n        numeroAssurance,\n        prenom,\n        profession,\n        sexe,\n        situationFamiliale,\n        telephone,\n        telephone2,\n        uid\n      };\n      // Référence au document du patient dans la collection des patients du médecin\n      const patientRef = firestore.collection('medecin').doc(medecinUid).collection('patients').doc(uid);\n      // Vérifie si le patient existe déjà avant de le mettre à jour\n      const patientSnapshot = yield patientRef.get();\n      if (patientSnapshot) {\n        yield patientRef.update(patientData); // Met à jour les données du patient existant\n        console.log('Patient mis à jour avec succès.');\n      } else {\n        console.log('Le patient n\\'existe pas chez ce médecin.');\n      }\n    } catch (error) {\n      console.error('Erreur lors de la mise à jour du patient chez le médecin :', error);\n      throw error;\n    }\n  });\n  return _savePatient.apply(this, arguments);\n}\nfunction checkPatientExistence(_x136, _x137, _x138) {\n  return _checkPatientExistence.apply(this, arguments);\n} // Fonction pour ajouter un patient avec les champs nom et prénom remplis\nfunction _checkPatientExistence() {\n  _checkPatientExistence = _asyncToGenerator(function* (firestore, medecinUid, patientData) {\n    try {\n      const patientsSnapshot = yield firestore.collection('medecin').doc(medecinUid).collection('patients').ref.where('nom', '==', patientData.nom).where('prenom', '==', patientData.prenom).get();\n      return !patientsSnapshot.empty;\n    } catch (error) {\n      console.error('Erreur lors de la vérification de l\\'existence du patient :', error);\n      throw error;\n    }\n  });\n  return _checkPatientExistence.apply(this, arguments);\n}\nexport function AddPatientWithNomPrenom(_x139, _x140, _x141) {\n  return _AddPatientWithNomPrenom.apply(this, arguments);\n}\nfunction _AddPatientWithNomPrenom() {\n  _AddPatientWithNomPrenom = _asyncToGenerator(function* (firestore, medecinId, rendezVousData) {\n    try {\n      // Vérifiez si la collection patients existe, sinon la crée\n      const medecinRef = firestore.collection('medecin').doc(medecinId);\n      const medecinSnapshot = yield medecinRef.get().toPromise();\n      // Vérifiez si le médecin existe avant d'ajouter le patient\n      if (medecinSnapshot && medecinSnapshot.exists) {\n        // Vérifiez si un patient avec le même nom et prénom existe déjà dans la collection\n        const patientSnapshot = yield medecinRef.collection('patients').ref.where('nom', '==', rendezVousData.nom).where('prenom', '==', rendezVousData.prenom).get();\n        if (!patientSnapshot.empty) {\n          console.error('Un patient avec le même nom et prénom existe déjà.');\n          return; // Arrêtez l'exécution de la fonction s'il existe déjà un patient avec ces informations\n        }\n        // Ajoutez le patient avec les champs nom et prénom remplis\n        const patientRef = yield medecinRef.collection('patients').add({\n          nom: rendezVousData.nom,\n          prenom: rendezVousData.prenom,\n          age: '',\n          adresse: '',\n          telephone: '',\n          uid: '',\n          useruid: rendezVousData.useruid\n        });\n        // Mettez à jour le champ uid avec l'UID généré pour le patient\n        yield patientRef.update({\n          uid: patientRef.id\n        });\n        console.log('Patient ajouté avec succès à Firebase.', patientRef, patientRef.id);\n        try {\n          const patientConsultationRef = firestore.collection('medecin').doc(medecinId).collection('patients').doc(patientRef.id);\n          // Créer un objet de consultation avec la date et éventuellement les détails\n          const consultationData = {\n            date: rendezVousData.date,\n            details: '' // Vous pouvez fournir les détails de la consultation ici\n          };\n          // Ajouter la nouvelle consultation dans la collection 'consultations' du patient\n          yield patientConsultationRef.collection('consultations').add(consultationData);\n          console.log('Nouvelle consultation ajoutée avec succès.');\n        } catch (error) {\n          console.error('Erreur lors de l\\'ajout de la consultation :', error);\n        }\n      } else {\n        console.error('Le médecin n\\'existe pas. Impossible d\\'ajouter le patient.');\n      }\n    } catch (error) {\n      console.error('Erreur lors de l\\'ajout du patient à Firebase :', error);\n    }\n  });\n  return _AddPatientWithNomPrenom.apply(this, arguments);\n}\nexport function getPatientsByMedUid(_x142, _x143) {\n  return _getPatientsByMedUid.apply(this, arguments);\n}\nfunction _getPatientsByMedUid() {\n  _getPatientsByMedUid = _asyncToGenerator(function* (firestore, medecinId) {\n    try {\n      // Récupérer la référence du médecin\n      const medecinRef = firestore.collection('medecin').doc(medecinId);\n      // Récupérer la liste des patients du médecin\n      const patientsSnapshot = yield medecinRef.collection('patients').get().toPromise();\n      // Initialiser un tableau pour stocker les patients\n      const patients = [];\n      // Vérifier si la snapshot des patients contient des documents\n      if (patientsSnapshot) {\n        // Parcourir les documents de la collection patients\n        patientsSnapshot.forEach(doc => {\n          // Récupérer les données du patient\n          const patientData = doc.data();\n          // Ajouter un uid au patient (peut être n'importe quel identifiant unique)\n          patientData.uid = doc.id;\n          // Ajouter les données du patient au tableau\n          patients.push(patientData);\n        });\n      }\n      // Retourner le tableau de patients\n      return patients;\n    } catch (error) {\n      console.error('Erreur lors de la récupération des patients:', error);\n      return []; // Retourner un tableau vide en cas d'erreur\n    }\n  });\n  return _getPatientsByMedUid.apply(this, arguments);\n}\nexport function getConsultationsForPatient(_x144, _x145, _x146) {\n  return _getConsultationsForPatient.apply(this, arguments);\n}\nfunction _getConsultationsForPatient() {\n  _getConsultationsForPatient = _asyncToGenerator(function* (firestore, medecinUid, patientUid) {\n    try {\n      const consultations = [];\n      // Récupérer les consultations du patient en utilisant son UID\n      const snapshot = yield firestore.collection('medecin').doc(medecinUid).collection('patients').doc(patientUid).collection('consultations').get().toPromise();\n      if (snapshot) snapshot.forEach(doc => {\n        const consultation = doc.data();\n        consultations.push(consultation);\n      });\n      return consultations;\n    } catch (error) {\n      console.error('Erreur lors de la récupération des consultations pour le patient avec UID', patientUid, 'du médecin avec UID', medecinUid, ':', error);\n      return [];\n    }\n  });\n  return _getConsultationsForPatient.apply(this, arguments);\n}\nexport function getConsultations(_x147, _x148, _x149) {\n  return _getConsultations.apply(this, arguments);\n}\nfunction _getConsultations() {\n  _getConsultations = _asyncToGenerator(function* (firestore, medecinUid, patientUid) {\n    try {\n      const snapshot = yield firestore.collection('medecin').doc(medecinUid).collection('patients').doc(patientUid).collection('consultations').ref.get();\n      if (snapshot) {\n        // Convertir le snapshot en objet de consultations\n        const consultations = snapshot.docs.map(doc => {\n          const data = doc.data();\n          return {\n            id: doc.id,\n            ...data\n          };\n        });\n        return consultations;\n      } else {\n        console.log('Aucune consultation trouvée avec cet UID de patient et de médecin :', patientUid, medecinUid);\n        return null;\n      }\n    } catch (error) {\n      console.error('Erreur lors de la récupération des consultations par UID de patient et de médecin :', error);\n      throw error; // Vous pouvez gérer l'erreur selon vos besoins\n    }\n  });\n  return _getConsultations.apply(this, arguments);\n}\nexport function modifierSauvegarderConsultation(_x150, _x151, _x152, _x153, _x154) {\n  return _modifierSauvegarderConsultation.apply(this, arguments);\n}\nfunction _modifierSauvegarderConsultation() {\n  _modifierSauvegarderConsultation = _asyncToGenerator(function* (firestore, medecinUid, patientUid, date, newDetails) {\n    try {\n      const consultationsRef = firestore.collection('medecin').doc(medecinUid).collection('patients').doc(patientUid).collection('consultations').ref;\n      // Récupérer la consultation à modifier\n      const snapshot = yield consultationsRef.where('date', '==', date).get();\n      snapshot.forEach(doc => {\n        const consultationData = doc.data();\n        // Modifier les détails de la consultation si la date correspond\n        consultationsRef.doc(doc.id).update({\n          details: newDetails\n        });\n      });\n      console.log('Détails de la consultation mis à jour avec succès.');\n    } catch (error) {\n      console.error('Erreur lors de la modification et de la sauvegarde des détails de la consultation :', error);\n      throw error; // Vous pouvez gérer l'erreur selon vos besoins\n    }\n  });\n  return _modifierSauvegarderConsultation.apply(this, arguments);\n}\nexport function ajouterConsultation(_x155, _x156, _x157, _x158) {\n  return _ajouterConsultation.apply(this, arguments);\n}\nfunction _ajouterConsultation() {\n  _ajouterConsultation = _asyncToGenerator(function* (firestore, medecinId, patientUid, consultationData) {\n    try {\n      const patientConsultationRef = firestore.collection('medecin').doc(medecinId).collection('patients').doc(patientUid);\n      // Ajouter la nouvelle consultation dans la collection 'consultations' du patient\n      yield patientConsultationRef.collection('consultations').add(consultationData);\n      console.log('Nouvelle consultation ajoutée avec succès.');\n    } catch (error) {\n      console.error('Erreur lors de l\\'ajout de la consultation :', error);\n      throw error; // Gérer l'erreur selon vos besoins\n    }\n  });\n  return _ajouterConsultation.apply(this, arguments);\n}\nexport function chercherPatient(_x159, _x160, _x161, _x162, _x163) {\n  return _chercherPatient.apply(this, arguments);\n}\nfunction _chercherPatient() {\n  _chercherPatient = _asyncToGenerator(function* (firestore, medecinId, nom, prenom, email) {\n    try {\n      const patientsSnapshot = yield firestore.collection('medecin').doc(medecinId).collection('patients').ref.where('nom', '==', nom).where('prenom', '==', prenom).where('email', '==', email) // Ajoutez le critère de recherche pour l'e-mail\n      .get();\n      if (!patientsSnapshot.empty) {\n        // Retournez l'UID du premier patient trouvé\n        return patientsSnapshot.docs[0].id;\n      } else {\n        // Aucun patient trouvé avec ce nom, prénom et e-mail\n        return null;\n      }\n    } catch (error) {\n      console.error('Erreur lors de la recherche du patient :', error);\n      return null;\n    }\n  });\n  return _chercherPatient.apply(this, arguments);\n}\nexport function getPatientsUIDByMedecinId(_x164, _x165) {\n  return _getPatientsUIDByMedecinId.apply(this, arguments);\n}\nfunction _getPatientsUIDByMedecinId() {\n  _getPatientsUIDByMedecinId = _asyncToGenerator(function* (firestore, medecinId) {\n    try {\n      const patientsSnapshot = yield firestore.collection('medecin').doc(medecinId).collection('patients').get().toPromise();\n      if (patientsSnapshot) {\n        // Retournez les UID des patients\n        return patientsSnapshot.docs.map(doc => doc.id);\n      } else {\n        // Aucun patient trouvé\n        return [];\n      }\n    } catch (error) {\n      console.error('Erreur lors de la récupération des UID des patients :', error);\n      return [];\n    }\n  });\n  return _getPatientsUIDByMedecinId.apply(this, arguments);\n}\nexport function checkExistingPatient(_x166, _x167, _x168, _x169) {\n  return _checkExistingPatient.apply(this, arguments);\n}\nfunction _checkExistingPatient() {\n  _checkExistingPatient = _asyncToGenerator(function* (firestore, medecinId, nom, prenom) {\n    try {\n      const patientsSnapshot = yield firestore.collection('medecin').doc(medecinId).collection('patients').ref.where('nom', '==', nom).where('prenom', '==', prenom).get();\n      if (!patientsSnapshot.empty) {\n        // Un patient avec le même nom et prénom existe déjà\n        const patientDoc = patientsSnapshot.docs[0];\n        return patientDoc.id;\n      } else {\n        // Aucun patient trouvé avec ce nom et prénom\n        return null;\n      }\n    } catch (error) {\n      console.error('Erreur lors de la vérification de l\\'existence du patient :', error);\n      return null;\n    }\n  });\n  return _checkExistingPatient.apply(this, arguments);\n}\nexport function getFichePatient(_x170, _x171, _x172) {\n  return _getFichePatient.apply(this, arguments);\n}\nfunction _getFichePatient() {\n  _getFichePatient = _asyncToGenerator(function* (firestore, medecinUid, patientUid) {\n    try {\n      const medecinRef = firestore.collection('medecin').doc(medecinUid);\n      const patientDoc = yield medecinRef.collection('patients').doc(patientUid).get().toPromise();\n      if (!patientDoc) {\n        console.log('Fiche patient non trouvée.');\n        return null; // Retourner null si la fiche patient n'est pas trouvée\n      }\n      const patientData = patientDoc.data();\n      return patientData;\n    } catch (error) {\n      console.error('Erreur lors de la récupération de la fiche patient :', error);\n      throw error;\n    }\n  });\n  return _getFichePatient.apply(this, arguments);\n}\nexport function getPatientByUid(_x173, _x174, _x175) {\n  return _getPatientByUid.apply(this, arguments);\n}\nfunction _getPatientByUid() {\n  _getPatientByUid = _asyncToGenerator(function* (firestore, medecinUid, patientUid) {\n    try {\n      const patientRef = firestore.collection('medecin').doc(medecinUid).collection('patients').doc(patientUid);\n      const patientDoc = yield patientRef.ref.get();\n      if (patientDoc.exists) {\n        const patientData = patientDoc.data();\n        return patientData;\n      } else {\n        console.log('Le patient n\\'existe pas.');\n        return null;\n      }\n    } catch (error) {\n      console.error('Erreur lors de la récupération du patient par UID :', error);\n      return null;\n    }\n  });\n  return _getPatientByUid.apply(this, arguments);\n}\nexport function getInscritByUid(_x176, _x177) {\n  return _getInscritByUid.apply(this, arguments);\n}\nfunction _getInscritByUid() {\n  _getInscritByUid = _asyncToGenerator(function* (firestore, uid) {\n    const patientRef = firestore.collection('inscrits').doc(uid);\n    const patientDoc = yield patientRef.ref.get();\n    if (patientDoc.exists) {\n      const patientData = patientDoc.data();\n      return patientData;\n    } else {\n      console.log('Le patient n\\'existe pas.');\n      return null;\n    }\n  });\n  return _getInscritByUid.apply(this, arguments);\n}\nexport function getDocuments(_x178, _x179, _x180) {\n  return _getDocuments.apply(this, arguments);\n}\nfunction _getDocuments() {\n  _getDocuments = _asyncToGenerator(function* (firestore, medecinUid, patientUid) {\n    try {\n      const patientRef = firestore.collection('medecin').doc(medecinUid).collection('documents');\n      const documentsSnapshot = yield patientRef.ref.where('patientUid', '==', patientUid).get();\n      if (!documentsSnapshot.empty) {\n        const documents = [];\n        documentsSnapshot.forEach(doc => {\n          const data = doc.data();\n          documents.push(data);\n        });\n        return documents;\n      } else {\n        console.log('Aucun document trouvé pour ce patient.');\n        return [];\n      }\n    } catch (error) {\n      console.error('Erreur lors de la récupération des documents :', error);\n      throw error;\n    }\n  });\n  return _getDocuments.apply(this, arguments);\n}\nexport function getDocumentsIS(_x181, _x182) {\n  return _getDocumentsIS.apply(this, arguments);\n}\nfunction _getDocumentsIS() {\n  _getDocumentsIS = _asyncToGenerator(function* (firestore, patientUid) {\n    try {\n      const patientRef = firestore.collection('documents');\n      const documentsSnapshot = yield patientRef.ref.where('useruid', '==', patientUid).get();\n      if (!documentsSnapshot.empty) {\n        const documents = [];\n        documentsSnapshot.forEach(doc => {\n          const data = doc.data();\n          documents.push(data);\n        });\n        return documents;\n      } else {\n        console.log('Aucun document trouvé pour ce patient.');\n        return [];\n      }\n    } catch (error) {\n      console.error('Erreur lors de la récupération des documents :', error);\n      throw error;\n    }\n  });\n  return _getDocumentsIS.apply(this, arguments);\n}\nexport function getConsultationsmed(_x183, _x184) {\n  return _getConsultationsmed.apply(this, arguments);\n}\nfunction _getConsultationsmed() {\n  _getConsultationsmed = _asyncToGenerator(function* (firestore, medecinUid) {\n    try {\n      const snapshot = yield firestore.collection('medecin').doc(medecinUid).collection('consultations').ref.get();\n      if (snapshot) {\n        // Convertir le snapshot en objet de consultations\n        const consultations = snapshot.docs.map(doc => {\n          const data = doc.data();\n          return {\n            id: doc.id,\n            ...data\n          };\n        });\n        return consultations;\n      } else {\n        console.log('Aucune consultation trouvée pour ce médecin.');\n        return [];\n      }\n    } catch (error) {\n      console.error('Erreur lors de la récupération des consultations du médecin :', error);\n      throw error; // Vous pouvez gérer l'erreur selon vos besoins\n    }\n  });\n  return _getConsultationsmed.apply(this, arguments);\n}\nexport function getConsultationByDateAndUidPat(_x185, _x186, _x187, _x188) {\n  return _getConsultationByDateAndUidPat.apply(this, arguments);\n}\nfunction _getConsultationByDateAndUidPat() {\n  _getConsultationByDateAndUidPat = _asyncToGenerator(function* (firestore, medecinUid, patientUid, consultationDate) {\n    try {\n      const snapshot = yield firestore.collection('medecin').doc(medecinUid).collection('patients').doc(patientUid).collection('consultations').ref.where('date', '==', consultationDate).get();\n      if (snapshot.empty) {\n        console.log('Aucune consultation trouvée avec cette date, UID de patient et de médecin :', consultationDate, patientUid, medecinUid);\n        return null;\n      }\n      if (snapshot) {\n        // Convertir le snapshot en objet de consultation\n        const consultations = snapshot.docs.map(doc => {\n          const data = doc.data();\n          return {\n            id: doc.id,\n            ...data\n          };\n        });\n        const consultation = consultations[0];\n        return consultation;\n      } else {\n        return null;\n      }\n    } catch (error) {\n      console.error('Erreur lors de la récupération de la consultation par date, UID de patient et de médecin :', error);\n      throw error; // Vous pouvez gérer l'erreur selon vos besoins\n    }\n  });\n  return _getConsultationByDateAndUidPat.apply(this, arguments);\n}\nexport function getDocumentsByMedecin(_x189, _x190) {\n  return _getDocumentsByMedecin.apply(this, arguments);\n}\nfunction _getDocumentsByMedecin() {\n  _getDocumentsByMedecin = _asyncToGenerator(function* (firestore, medecinId) {\n    try {\n      // Récupérer la liste des patients du médecin\n      const patients = yield getPatientsByMedUid(firestore, medecinId);\n      // Initialiser un tableau pour stocker les documents\n      const documents = [];\n      // Parcourir les patients\n      for (const patient of patients) {\n        // Récupérer les documents pour le patient\n        const patientDocuments = yield getDocuments(firestore, medecinId, patient.uid);\n        // Ajouter les documents du patient au tableau\n        documents.push(...patientDocuments);\n      }\n      // Retourner le tableau de documents\n      return documents;\n    } catch (error) {\n      console.error('Erreur lors de la récupération des documents du médecin:', error);\n      return []; // Retourner un tableau vide en cas d'erreur\n    }\n  });\n  return _getDocumentsByMedecin.apply(this, arguments);\n}\nexport function AddMedecinforpatient(_x191, _x192, _x193, _x194) {\n  return _AddMedecinforpatient.apply(this, arguments);\n}\nfunction _AddMedecinforpatient() {\n  _AddMedecinforpatient = _asyncToGenerator(function* (firestore, patientuid, medecin, toastController) {\n    const medecinA = {\n      nom: medecin.nom,\n      prenom: medecin.prenom,\n      specialite: medecin.specialite,\n      medecin: medecin.uid,\n      patientuid: patientuid\n    };\n    try {\n      // Vérifier si le médecin existe déjà dans la collection 'medecinpatient'\n      const medecinExiste = yield firestore.collection('medecinpatient').ref.where('medecin', '==', medecin.uid).where('patientuid', '==', patientuid).get();\n      if (!medecinExiste.empty) {\n        console.log('Le médecin existe déjà pour ce patient.');\n        const toast = yield toastController.create({\n          message: 'Le médecin existe déjà pour ce patient.',\n          duration: 3000,\n          position: 'bottom'\n        });\n        toast.present();\n        return;\n      }\n      // Ajouter le médecin à la collection 'medecinpatient'\n      const medref = yield firestore.collection('medecinpatient').add(medecinA);\n      const uid = medref.id;\n      // Mettre à jour le document avec l'uid\n      yield medref.update({\n        idd: uid\n      });\n      console.log('Médecin ajouté avec succès à la collection medecinpatient:', medecin);\n      const toast = yield toastController.create({\n        message: 'Médecin ajouté avec succès!',\n        duration: 3000,\n        position: 'bottom'\n      });\n      toast.present();\n    } catch (error) {\n      console.error('Erreur lors de l\\'ajout du médecin:', error);\n      const toast = yield toastController.create({\n        message: 'Erreur lors de l\\'ajout du médecin. Veuillez réessayer plus tard.',\n        duration: 3000,\n        position: 'bottom'\n      });\n      toast.present();\n      throw error; // Renvoyer l'erreur pour que le gestionnaire puisse la gérer\n    }\n  });\n  return _AddMedecinforpatient.apply(this, arguments);\n}\nexport function getMedecinforPatient(_x195, _x196) {\n  return _getMedecinforPatient.apply(this, arguments);\n}\nfunction _getMedecinforPatient() {\n  _getMedecinforPatient = _asyncToGenerator(function* (firestore, patientUid) {\n    try {\n      const medecinPatientRef = firestore.collection('medecinpatient');\n      const medecinPatientSnapshot = yield medecinPatientRef.ref.where('patientuid', '==', patientUid).get();\n      if (!medecinPatientSnapshot.empty) {\n        const medecins = [];\n        medecinPatientSnapshot.forEach(doc => {\n          const medecinData = doc.data();\n          medecins.push(medecinData);\n        });\n        return medecins;\n      } else {\n        console.log('Aucun médecin trouvé pour ce patient.');\n        return [];\n      }\n    } catch (error) {\n      console.error('Erreur lors de la récupération des médecins pour le patient :', error);\n      throw error;\n    }\n  });\n  return _getMedecinforPatient.apply(this, arguments);\n}\nexport function getDocumentsforpatient(_x197, _x198) {\n  return _getDocumentsforpatient.apply(this, arguments);\n}\nfunction _getDocumentsforpatient() {\n  _getDocumentsforpatient = _asyncToGenerator(function* (firestore, patientUid) {\n    try {\n      const patientRef = firestore.collection('documents');\n      const documentsSnapshot = yield patientRef.ref.where('useruid', '==', patientUid).get();\n      if (!documentsSnapshot.empty) {\n        const documents = [];\n        documentsSnapshot.forEach(doc => {\n          const data = doc.data();\n          documents.push(data);\n        });\n        return documents;\n      } else {\n        console.log('Aucun document trouvé pour ce patient.');\n        return [];\n      }\n    } catch (error) {\n      console.error('Erreur lors de la récupération des documents :', error);\n      throw error;\n    }\n  });\n  return _getDocumentsforpatient.apply(this, arguments);\n}","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}