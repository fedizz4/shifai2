{"ast":null,"code":"import { __decorate } from \"tslib\";\n// event.service.ts\nimport { Injectable } from '@angular/core';\nimport { EventEmitter } from '@angular/core';\nimport { Subject } from 'rxjs';\nlet EventService = class EventService {\n  constructor() {\n    // Déclarez un EventEmitter pour l'événement\n    this.medicamentUpdated = new EventEmitter();\n    this.secretaireUpdatedSubject = new Subject();\n    // Déclarez votre observable pour que les autres composants puissent s'abonner\n    this.secretaireUpdated$ = new Subject();\n  }\n  // Méthode pour déclencher la mise à jour du secrétaire\n  triggerSecretaireUpdate() {\n    this.secretaireUpdatedSubject.next();\n  }\n  // Méthode pour déclencher l'événement\n  triggerMedicamentUpdated() {\n    this.medicamentUpdated.emit();\n  }\n};\nEventService = __decorate([Injectable({\n  providedIn: 'root'\n})], EventService);\nexport { EventService };","map":{"version":3,"names":["Injectable","EventEmitter","Subject","EventService","constructor","medicamentUpdated","secretaireUpdatedSubject","secretaireUpdated$","triggerSecretaireUpdate","next","triggerMedicamentUpdated","emit","__decorate","providedIn"],"sources":["C:\\Users\\MacBook Air\\Desktop\\shifai1VV\\src\\app\\event.service.ts"],"sourcesContent":["// event.service.ts\r\nimport { Injectable } from '@angular/core';\r\nimport { EventEmitter } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class EventService {\r\n  // Déclarez un EventEmitter pour l'événement\r\n  medicamentUpdated = new EventEmitter<void>();\r\n  secretaireUpdated: any;\r\n  private secretaireUpdatedSubject = new Subject<void>();\r\n\r\n   // Déclarez votre observable pour que les autres composants puissent s'abonner\r\n   secretaireUpdated$: Subject<any> = new Subject<any>();\r\n\r\n\r\n     // Méthode pour déclencher la mise à jour du secrétaire\r\n  triggerSecretaireUpdate() {\r\n    this.secretaireUpdatedSubject.next();\r\n  }\r\n\r\n  // Méthode pour déclencher l'événement\r\n  triggerMedicamentUpdated() {\r\n    this.medicamentUpdated.emit();\r\n  }\r\n}\r\n"],"mappings":";AAAA;AACA,SAASA,UAAU,QAAQ,eAAe;AAC1C,SAASC,YAAY,QAAQ,eAAe;AAC5C,SAASC,OAAO,QAAQ,MAAM;AAKvB,IAAMC,YAAY,GAAlB,MAAMA,YAAY;EAAlBC,YAAA;IACL;IACA,KAAAC,iBAAiB,GAAG,IAAIJ,YAAY,EAAQ;IAEpC,KAAAK,wBAAwB,GAAG,IAAIJ,OAAO,EAAQ;IAErD;IACA,KAAAK,kBAAkB,GAAiB,IAAIL,OAAO,EAAO;EAYxD;EATK;EACHM,uBAAuBA,CAAA;IACrB,IAAI,CAACF,wBAAwB,CAACG,IAAI,EAAE;EACtC;EAEA;EACAC,wBAAwBA,CAAA;IACtB,IAAI,CAACL,iBAAiB,CAACM,IAAI,EAAE;EAC/B;CACD;AAnBYR,YAAY,GAAAS,UAAA,EAHxBZ,UAAU,CAAC;EACVa,UAAU,EAAE;CACb,CAAC,C,EACWV,YAAY,CAmBxB"},"metadata":{},"sourceType":"module","externalDependencies":[]}