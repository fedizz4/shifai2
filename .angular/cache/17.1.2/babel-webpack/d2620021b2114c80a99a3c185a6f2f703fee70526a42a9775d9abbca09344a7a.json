{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/MacBook Air/Desktop/shifai1VV/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _DocumentPage;\nimport { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"./document.page.html?ngResource\";\nimport __NG_CLI_RESOURCE__1 from \"./document.page.scss?ngResource\";\nimport { ChangeDetectorRef, Component } from '@angular/core';\nimport { AngularFirestore } from '@angular/fire/compat/firestore';\nimport { AngularFireStorage } from '@angular/fire/compat/storage';\nimport { ModalController, ToastController } from '@ionic/angular';\nimport { finalize } from 'rxjs/operators';\nimport { inscritUid } from '../login/login.page';\nimport { getDocumentsIS, medecinUid } from 'src/firebaseConfig';\nimport { Router } from '@angular/router';\nlet DocumentPage = (_DocumentPage = class DocumentPage {\n  constructor(storage, firestore, toastController, modalController, cdr, router) {\n    this.storage = storage;\n    this.firestore = firestore;\n    this.toastController = toastController;\n    this.modalController = modalController;\n    this.cdr = cdr;\n    this.router = router;\n    this.Vfiche = true;\n    this.Vconsultation = false;\n    this.Vdocument = false;\n    this.uid = '';\n    this.nom = '';\n    this.prenom = '';\n    this.age = 0;\n    this.adresse = '';\n    this.telephone = '';\n    this.sexe = '';\n    this.groupeSanguin = '';\n    this.situationFamiliale = '';\n    this.profession = '';\n    this.email = '';\n    this.telephone2 = '';\n    this.numeroAssurance = '';\n    this.note = '';\n    this.antecedentsMedicaux = '';\n    this.antecedentsChirurgicaux = '';\n    this.antecedentsFamiliaux = '';\n    this.autresAntecedents = '';\n    this.medicaments = '';\n    this.description = '';\n    this.selectedFile = null;\n    this.selectedFileUrl = null;\n    this.documents = [];\n    this.consultationDate = ''; // Variable pour stocker la date de consultation\n    this.consultationdate1 = '';\n    this.searchDescription = '';\n  }\n  ngOnInit() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      _this.getdoc();\n    })();\n  }\n  back() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      _this2.router.navigate(['/patient']);\n      console.log('going to patient');\n    })();\n  }\n  onFileSelected(event) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      const file = event.target.files[0];\n      if (!file) {\n        console.error('Aucun fichier sélectionné.');\n        return;\n      }\n      // Validate file type (optional)\n      // if (!this.isValidFileType(file)) {\n      //   console.error('Type de fichier non supporté.');\n      //   return;\n      // }\n      _this3.selectedFile = file;\n      try {\n        // Generate a unique ID using Firestore's createId() method\n        const fileId = _this3.firestore.createId();\n        // Construct the file path in Firebase Storage\n        const filePath = `documents/${fileId}_${file.name}`;\n        // Create a reference to the file in Firebase Storage\n        const fileRef = _this3.storage.ref(filePath);\n        // Upload the file to Firebase Storage\n        const uploadTask = _this3.storage.upload(filePath, file);\n        // Handle upload progress and completion\n        uploadTask.snapshotChanges().pipe(finalize( /*#__PURE__*/_asyncToGenerator(function* () {\n          try {\n            // Get the downloadable URL of the uploaded file\n            const fileUrl = yield fileRef.getDownloadURL().toPromise();\n            // Check if description is empty\n            if (!_this3.description) {\n              console.error('La description est obligatoire pour télécharger le fichier.');\n              return;\n            }\n            console.log(_this3.description);\n            console.log(fileId);\n            // Validate and sanitize the description if necessary\n            // Create a document data object with relevant information\n            const documentData = {\n              uid: fileId,\n              // Use the generated fileId as the document ID\n              medecinUid: medecinUid.uid,\n              patientUid: inscritUid,\n              url: fileUrl,\n              description: _this3.description\n            };\n            // Add the document to Firestore using the docRef\n            const docRef = _this3.firestore.collection('documents').doc(fileId);\n            yield docRef.set(documentData);\n            // Handle successful document creation\n            console.log('Document ajouté avec succès.');\n            _this3.getdoc(); // Assuming getdocument fetches and updates documents list\n          } catch (error) {\n            // Handle errors during document creation\n            console.error('Erreur lors de l\\'ajout du document :', error);\n            // Provide more specific error messages based on error.code and error.message\n          }\n        }))).subscribe();\n      } catch (error) {\n        // Handle errors during file upload\n        console.error('Erreur lors de l\\'ajout du document :', error);\n        // Provide more specific error messages based on error.code and error.message\n      }\n    })();\n  }\n  /* async envoyer() {\n    if (!this.selectedFile) {\n      console.error('Aucun fichier sélectionné.');\n      return;\n    }\n    const file: File | null = event.target.files[0];\n       this.selectedFile = file;\n       // Check if description is empty (already in your code)\n  \n    if (file instanceof File) {\n      try {\n        // Generate a unique ID using Firestore's createId() method\n        const fileId = this.firestore.createId();\n  \n        // Construct the file path in Firebase Storage\n        const filePath = `documents/${fileId}_${file.name}`;\n  \n        // Create a reference to the file in Firebase Storage\n        const fileRef = this.storage.ref(filePath);\n  \n        // Upload the file to Firebase Storage\n        const uploadTask = this.storage.upload(filePath, file);\n  \n        // Handle upload progress and completion\n        uploadTask.snapshotChanges().pipe(\n          finalize(async () => {\n            try {\n              // Get the downloadable URL of the uploaded file\n              const fileUrl = await fileRef.getDownloadURL().toPromise();\n  \n              // Retrieve the description from the input field\n              const description = this.description;\n  \n              // Validate and sanitize the description if necessary\n  \n              // Create a document data object with relevant information\n              const documentData = {\n                uid: fileId, // Use the generated fileId as the document ID\n                medecinUid: medecinUid.uid,\n                patientUid: inscritUid,\n                url: fileUrl,\n                description: description\n              };\n  \n              // Add the document to Firestore using the docRef\n              const docRef = this.firestore.collection('documents').doc(fileId);\n              await docRef.set(documentData);\n  \n              // Handle successful document creation\n              console.log('Document ajouté avec succès.');\n              this.getdoc(); // Assuming getdocument fetches and updates documents list\n  \n            } catch (error) {\n              // Handle errors during document creation\n              console.error('Erreur lors de l\\'ajout du document :', error);\n              // Provide more specific error messages based on error.code and error.message\n            }\n          })\n        ).subscribe();\n      } catch (error) {\n        // Handle errors during file upload\n        console.error('Erreur lors de l\\'ajout du document :', error);\n        // Provide more specific error messages based on error.code and error.message\n      }\n    }\n  }\n  */\n  closeModal() {\n    this.modalController.dismiss();\n  }\n  searchDocumentsByDescription(description) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        if (!description) {\n          console.log('Veuillez entrer une description.');\n          return;\n        }\n        // Filtrer les documents pour la description spécifiée\n        const filteredDocuments = _this4.documents.filter(document => document.description === description);\n        if (filteredDocuments.length > 0) {\n          console.log('Documents trouvés avec la description', description, ':', filteredDocuments);\n          _this4.documents = filteredDocuments;\n        } else {\n          console.log('Aucun document trouvé avec la description', description);\n        }\n      } catch (error) {\n        console.error('Erreur lors de la recherche des documents pour la description :', error);\n      }\n    })();\n  }\n  getdoc() {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      const doc = yield getDocumentsIS(_this5.firestore, inscritUid);\n      console.log(doc);\n      if (doc) {\n        _this5.documents = doc;\n      }\n      console.log(inscritUid);\n    })();\n  }\n}, _DocumentPage.ctorParameters = () => [{\n  type: AngularFireStorage\n}, {\n  type: AngularFirestore\n}, {\n  type: ToastController\n}, {\n  type: ModalController\n}, {\n  type: ChangeDetectorRef\n}, {\n  type: Router\n}], _DocumentPage);\nDocumentPage = __decorate([Component({\n  selector: 'app-document',\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n})], DocumentPage);\nexport { DocumentPage };","map":{"version":3,"names":["ChangeDetectorRef","Component","AngularFirestore","AngularFireStorage","ModalController","ToastController","finalize","inscritUid","getDocumentsIS","medecinUid","Router","DocumentPage","_DocumentPage","constructor","storage","firestore","toastController","modalController","cdr","router","Vfiche","Vconsultation","Vdocument","uid","nom","prenom","age","adresse","telephone","sexe","groupeSanguin","situationFamiliale","profession","email","telephone2","numeroAssurance","note","antecedentsMedicaux","antecedentsChirurgicaux","antecedentsFamiliaux","autresAntecedents","medicaments","description","selectedFile","selectedFileUrl","documents","consultationDate","consultationdate1","searchDescription","ngOnInit","_this","_asyncToGenerator","getdoc","back","_this2","navigate","console","log","onFileSelected","event","_this3","file","target","files","error","fileId","createId","filePath","name","fileRef","ref","uploadTask","upload","snapshotChanges","pipe","fileUrl","getDownloadURL","toPromise","documentData","patientUid","url","docRef","collection","doc","set","subscribe","closeModal","dismiss","searchDocumentsByDescription","_this4","filteredDocuments","filter","document","length","_this5","__decorate","selector","template","__NG_CLI_RESOURCE__0"],"sources":["C:\\Users\\MacBook Air\\Desktop\\shifai1VV\\src\\app\\document\\document.page.ts"],"sourcesContent":["import { ChangeDetectorRef, Component, OnInit } from '@angular/core';\nimport { AngularFirestore } from '@angular/fire/compat/firestore';\nimport { AngularFireStorage } from '@angular/fire/compat/storage';\nimport { LoadingController, ModalController, ToastController } from '@ionic/angular';\nimport { finalize } from 'rxjs/operators';\nimport { inscritUid } from '../login/login.page';\nimport { getConsultations,getDocumentsIS, getDocuments, getDocumentsforpatient, getInscritByUid, getPatientByUid, medecinUid, savePatient } from 'src/firebaseConfig';\nimport { Router } from '@angular/router';\n\ninterface DocumentData {\n  url: string;\n  description: string;\n  useruid: string;\n}\n\ninterface PatientData {\n  uid: string;\n  nom: string;\n  prenom: string;\n  age: number;\n  sexe: string;\n  groupeSanguin: string;\n  situationFamiliale: string;\n  profession: string;\n  email: string;\n  telephone: string;\n  telephone2: string;\n  numeroAssurance: string;\n  adresse: string;\n  note: string;\n  antecedentsMedicaux: string;\n  antecedentsChirurgicaux: string;\n  antecedentsFamiliaux: string;\n  autresAntecedents: string;\n  medicaments: string;\n  useruid: string;\n}\n\ninterface consultationData {\n  date: string;\n  details?: string;\n  uid?: string;\n}\n\n@Component({\n  selector: 'app-document',\n  templateUrl: './document.page.html',\n  styleUrls: ['./document.page.scss'],\n})\nexport class DocumentPage implements OnInit {\n  Vfiche: boolean = true;\n  Vconsultation: boolean = false;\n  Vdocument: boolean = false;\n \n    uid:string='';\n    nom:string='';\n    prenom:string='';\n    age:number=0;\n    adresse:string='';\n    telephone:string='';\n    sexe:string='';\n    groupeSanguin:string='';\n    situationFamiliale:string='';\n    profession:string='';\n    email:string='';\n    telephone2:string='';\n    numeroAssurance:string='';\n    note:string='';\n    antecedentsMedicaux:string='';\n    antecedentsChirurgicaux:string='';\n    antecedentsFamiliaux:string='';\n    autresAntecedents:string='';\n    medicaments:string='';\n    description:string='';\n\n\n  patient: PatientData | null | undefined;\n  consultations!: consultationData[];\n  selectedFile: File | null = null;\n  selectedFileUrl: string | null = null;\n  documents:DocumentData[]=[];\n  consultationDate: string = ''; // Variable pour stocker la date de consultation\n  consultationdate1:string='';\n  searchDescription:string='';\n\n\n  constructor(private storage : AngularFireStorage ,private firestore: AngularFirestore,private toastController :ToastController, private modalController: ModalController, private cdr: ChangeDetectorRef, private router: Router) {\n  }\n\n  async ngOnInit() {\n    this.getdoc();\n  \n \n  }\n  async back(){\n    \n    this.router.navigate(['/patient']);\n    console.log('going to patient')\n  }\n  \n  \n\n  \n \n \n  async onFileSelected(event: any) {\n    const file: File | null = event.target.files[0];\n  \n    if (!file) {\n      console.error('Aucun fichier sélectionné.');\n      return;\n    }\n  \n    // Validate file type (optional)\n    // if (!this.isValidFileType(file)) {\n    //   console.error('Type de fichier non supporté.');\n    //   return;\n    // }\n  \n    this.selectedFile = file;\n  \n    try {\n      // Generate a unique ID using Firestore's createId() method\n      const fileId = this.firestore.createId();\n  \n      // Construct the file path in Firebase Storage\n      const filePath = `documents/${fileId}_${file.name}`;\n  \n      // Create a reference to the file in Firebase Storage\n      const fileRef = this.storage.ref(filePath);\n  \n      // Upload the file to Firebase Storage\n      const uploadTask = this.storage.upload(filePath, file);\n  \n      // Handle upload progress and completion\n      uploadTask.snapshotChanges().pipe(\n        finalize(async () => {\n          try {\n            // Get the downloadable URL of the uploaded file\n            const fileUrl = await fileRef.getDownloadURL().toPromise();\n  \n            // Check if description is empty\n            if (!this.description) {\n              console.error('La description est obligatoire pour télécharger le fichier.');\n              return;\n            }\n            console.log(this.description)\n            console.log(fileId)\n  \n            // Validate and sanitize the description if necessary\n  \n            // Create a document data object with relevant information\n            const documentData = {\n              uid: fileId, // Use the generated fileId as the document ID\n              medecinUid: medecinUid.uid,\n              patientUid: inscritUid,\n              url: fileUrl,\n              description: this.description\n            };\n  \n            // Add the document to Firestore using the docRef\n            const docRef = this.firestore.collection('documents').doc(fileId);\n            await docRef.set(documentData);\n  \n            // Handle successful document creation\n            console.log('Document ajouté avec succès.');\n            this.getdoc(); // Assuming getdocument fetches and updates documents list\n  \n          } catch (error) {\n            // Handle errors during document creation\n            console.error('Erreur lors de l\\'ajout du document :', error);\n            // Provide more specific error messages based on error.code and error.message\n          }\n        })\n      ).subscribe();\n    } catch (error) {\n      // Handle errors during file upload\n      console.error('Erreur lors de l\\'ajout du document :', error);\n      // Provide more specific error messages based on error.code and error.message\n    }\n  }\n  \n  \n  /* async envoyer() {\n    if (!this.selectedFile) {\n      console.error('Aucun fichier sélectionné.');\n      return;\n    }\n    const file: File | null = event.target.files[0];\n\n    this.selectedFile = file;\n\n    // Check if description is empty (already in your code)\n  \n    if (file instanceof File) {\n      try {\n        // Generate a unique ID using Firestore's createId() method\n        const fileId = this.firestore.createId();\n  \n        // Construct the file path in Firebase Storage\n        const filePath = `documents/${fileId}_${file.name}`;\n  \n        // Create a reference to the file in Firebase Storage\n        const fileRef = this.storage.ref(filePath);\n  \n        // Upload the file to Firebase Storage\n        const uploadTask = this.storage.upload(filePath, file);\n  \n        // Handle upload progress and completion\n        uploadTask.snapshotChanges().pipe(\n          finalize(async () => {\n            try {\n              // Get the downloadable URL of the uploaded file\n              const fileUrl = await fileRef.getDownloadURL().toPromise();\n  \n              // Retrieve the description from the input field\n              const description = this.description;\n  \n              // Validate and sanitize the description if necessary\n  \n              // Create a document data object with relevant information\n              const documentData = {\n                uid: fileId, // Use the generated fileId as the document ID\n                medecinUid: medecinUid.uid,\n                patientUid: inscritUid,\n                url: fileUrl,\n                description: description\n              };\n  \n              // Add the document to Firestore using the docRef\n              const docRef = this.firestore.collection('documents').doc(fileId);\n              await docRef.set(documentData);\n  \n              // Handle successful document creation\n              console.log('Document ajouté avec succès.');\n              this.getdoc(); // Assuming getdocument fetches and updates documents list\n  \n            } catch (error) {\n              // Handle errors during document creation\n              console.error('Erreur lors de l\\'ajout du document :', error);\n              // Provide more specific error messages based on error.code and error.message\n            }\n          })\n        ).subscribe();\n      } catch (error) {\n        // Handle errors during file upload\n        console.error('Erreur lors de l\\'ajout du document :', error);\n        // Provide more specific error messages based on error.code and error.message\n      }\n    }\n  }\n  */\n\n  \n  \n  closeModal() {\n    this.modalController.dismiss();\n  }\n  \n  async searchDocumentsByDescription(description: string) {\n    try {\n      if (!description) {\n        console.log('Veuillez entrer une description.');\n        return;\n      }\n  \n      // Filtrer les documents pour la description spécifiée\n      const filteredDocuments = this.documents.filter(document => document.description === description);\n  \n      if (filteredDocuments.length > 0) {\n        console.log('Documents trouvés avec la description', description, ':', filteredDocuments);\n        this.documents = filteredDocuments;\n      } else {\n        console.log('Aucun document trouvé avec la description', description);\n      }\n    } catch (error) {\n      console.error('Erreur lors de la recherche des documents pour la description :', error);\n    }\n  }\n  async getdoc(){\n    const doc=await getDocumentsIS(this.firestore,inscritUid)\n    console.log(doc)\n    if(doc){\n      this.documents=doc;\n    }\n    console.log(inscritUid)\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}