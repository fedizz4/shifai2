{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/MacBook Air/ionic-TP/shifai1/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n// Import des modules nécessaires\nimport { initializeApp } from 'firebase/app';\nimport { getAnalytics } from 'firebase/analytics';\nimport { getAuth, signInWithEmailAndPassword } from 'firebase/auth';\nimport { map } from 'rxjs';\n// Configuration Firebase\nexport const firebaseConfig = {\n  apiKey: \"AIzaSyA7iKnEnxTdm9UdRnegNamwRDsLFESDk7s\",\n  authDomain: \"shifai-f46a0.firebaseapp.com\",\n  projectId: \"shifai-f46a0\",\n  storageBucket: \"shifai-f46a0.appspot.com\",\n  messagingSenderId: \"383597072570\",\n  appId: \"1:383597072570:web:870d9d280b22a1aa28b283\",\n  measurementId: \"G-Y2QLPH92NB\"\n};\n// Initialisation Firebase\nexport const app = initializeApp(firebaseConfig);\nconst analytics = getAnalytics(app);\n// Objet d'authentification pour être utilisé dans d'autres fichiers\nconst auth = getAuth(app);\n// Fonction pour connecter l'utilisateur\nexport function loginUser(_x, _x2) {\n  return _loginUser.apply(this, arguments);\n}\nfunction _loginUser() {\n  _loginUser = _asyncToGenerator(function* (email, password) {\n    try {\n      const userCredential = yield signInWithEmailAndPassword(auth, email, password);\n      console.log('Utilisateur connecté :', userCredential.user);\n      return userCredential;\n    } catch (error) {\n      console.error(error);\n      throw error;\n    }\n  });\n  return _loginUser.apply(this, arguments);\n}\nexport function AddUser(_x3, _x4, _x5, _x6, _x7, _x8, _x9, _x10, _x11) {\n  return _AddUser.apply(this, arguments);\n}\nfunction _AddUser() {\n  _AddUser = _asyncToGenerator(function* (firestore, app, familyName, name, email, password, date, sexe, role) {\n    const user = {\n      familyName: familyName,\n      name: name,\n      email: email,\n      password: password,\n      date: date,\n      sexe: sexe,\n      role: role\n    };\n    firestore.collection('inscrits').add(user).then(() => {\n      console.log('Utilisateur ajouté avec succès à Firebase.');\n    }).catch(error => {\n      console.error('Erreur lors de l\\'ajout à Firebase :', error);\n    });\n  });\n  return _AddUser.apply(this, arguments);\n}\nexport function AddMedicament(_x12, _x13, _x14, _x15, _x16, _x17) {\n  return _AddMedicament.apply(this, arguments);\n}\nfunction _AddMedicament() {\n  _AddMedicament = _asyncToGenerator(function* (firestore, app, nom, dosage, prises, uid) {\n    const medicament = {\n      nom: nom,\n      dosage: dosage,\n      prises: prises.map(prise => ({\n        label: prise.label,\n        checked: prise.checked\n      })),\n      uid: uid\n    };\n    try {\n      yield firestore.collection('medicaments').add(medicament);\n    } catch (error) {\n      console.error('Erreur lors de l\\'ajout du médicament:', error);\n      throw error; // Renvoyer l'erreur pour que le gestionnaire puisse la gérer\n    }\n  });\n  return _AddMedicament.apply(this, arguments);\n}\nexport function getMedicamentsByUid(_x18, _x19) {\n  return _getMedicamentsByUid.apply(this, arguments);\n}\nfunction _getMedicamentsByUid() {\n  _getMedicamentsByUid = _asyncToGenerator(function* (firestore, uid) {\n    try {\n      const snapshot = yield firestore.collection('medicaments').ref.where('uid', '==', uid).get();\n      // Convertir le snapshot en tableau de médicaments en utilisant l'interface\n      const medicaments = snapshot.docs.map(doc => {\n        const data = doc.data(); // Cast vers l'interface définie\n        return {\n          id: doc.id,\n          ...data\n        };\n      });\n      return medicaments;\n    } catch (error) {\n      console.error('Erreur lors de la récupération des médicaments :', error);\n      throw error;\n    }\n  });\n  return _getMedicamentsByUid.apply(this, arguments);\n}\nexport function getMedecinsByLocalisationAndSpecialite(_x20, _x21, _x22) {\n  return _getMedecinsByLocalisationAndSpecialite.apply(this, arguments);\n}\nfunction _getMedecinsByLocalisationAndSpecialite() {\n  _getMedecinsByLocalisationAndSpecialite = _asyncToGenerator(function* (firestore, localisation, specialite) {\n    try {\n      const snapshot = yield firestore.collection('medecin').ref.where('specialite', '==', specialite).where('localisation', '==', localisation).get();\n      // Vérifier si snapshot est défini avant de l'utiliser\n      if (snapshot) {\n        // Convertir le snapshot en tableau de médecins\n        const medecins = snapshot.docs.map(doc => {\n          const data = doc.data();\n          return {\n            id: doc.id,\n            ...data\n          };\n        });\n        return medecins;\n      } else {\n        console.error('La requête n\\'a pas renvoyé de snapshot.');\n        return []; // Ou lancez une erreur appropriée selon vos besoins\n      }\n    } catch (error) {\n      console.error('Erreur lors de la récupération des médecins (firebase) :', error);\n      throw error;\n    }\n  });\n  return _getMedecinsByLocalisationAndSpecialite.apply(this, arguments);\n}\nexport function AddMedecin(_x23, _x24, _x25, _x26, _x27, _x28, _x29, _x30, _x31, _x32, _x33, _x34) {\n  return _AddMedecin.apply(this, arguments);\n}\nfunction _AddMedecin() {\n  _AddMedecin = _asyncToGenerator(function* (firestore, app, nom, prenom, email, password, date, sexe, role, specialite, localisation, telephone) {\n    const medecin = {\n      nom: nom,\n      prenom: prenom,\n      email: email,\n      password: password,\n      date: date,\n      sexe: sexe,\n      role: role,\n      localisation: localisation,\n      specialite: specialite,\n      telephone: telephone\n    };\n    firestore.collection('medecin').add(medecin).then(() => {\n      console.log('Utilisateur ajouté avec succès à Firebase.');\n    }).catch(error => {\n      console.error('Erreur lors de l\\'ajout à Firebase :', error);\n    });\n  });\n  return _AddMedecin.apply(this, arguments);\n}\nexport function getMedecinByUid(_x35, _x36) {\n  return _getMedecinByUid.apply(this, arguments);\n}\nfunction _getMedecinByUid() {\n  _getMedecinByUid = _asyncToGenerator(function* (firestore, uid) {\n    const snapshot = yield firestore.collection('medecin').ref.where('uid', '==', uid).get();\n    if (snapshot) {\n      // Convertir le snapshot en tableau de médecins\n      const medecins = snapshot.docs.map(doc => {\n        const data = doc.data();\n        return {\n          id: doc.id,\n          ...data\n        };\n      });\n      return medecins;\n    } else {\n      console.log('Aucun médecin trouvé pour cet UID :', uid);\n      return null; // Ou renvoyez un objet vide, selon vos besoins\n    }\n  });\n  return _getMedecinByUid.apply(this, arguments);\n}\nexport function loginMedecins(_x37, _x38, _x39) {\n  return _loginMedecins.apply(this, arguments);\n}\nfunction _loginMedecins() {\n  _loginMedecins = _asyncToGenerator(function* (firestore, email, password) {\n    try {\n      // Recherchez le médecin dans la base de données avec l'email fourni\n      const medecinCollection = firestore.collection('medecin').ref;\n      const medecinQuery = yield medecinCollection.where('email', '==', email).get();\n      if (medecinQuery.size === 1) {\n        // Vérifiez le mot de passe (vous pouvez utiliser une bibliothèque de hachage appropriée)\n        const medecinData = medecinQuery.docs[0].data();\n        const uid = medecinQuery.docs[0].id;\n        if (medecinData && medecinData.password === password) {\n          console.log('Connexion réussie en tant que médecin.');\n          return {\n            medecinData,\n            uid\n          }; // Authentification réussie, renvoie les informations du médecin et son UID\n        }\n      }\n      console.error('Identifiants invalides.');\n      return null; // Authentification échouée\n    } catch (error) {\n      console.error('Erreur lors de la connexion du médecin :', error);\n      throw error; // Vous pouvez gérer l'erreur ici ou la laisser remonter\n    }\n  });\n  return _loginMedecins.apply(this, arguments);\n}\nexport const medecinUid = {\n  uid: ''\n};\nexport function ajouterSecretaire(_x40, _x41) {\n  return _ajouterSecretaire.apply(this, arguments);\n}\nfunction _ajouterSecretaire() {\n  _ajouterSecretaire = _asyncToGenerator(function* (firestore, secretarieData) {\n    try {\n      // Ajoutez votre logique pour ajouter les données du formulaire à la collection 'secretaire'\n      // Utilisez firestore.collection('secretaire') pour accéder à la collection 'secretaire' dans Firebase\n      yield firestore.collection('secretaire').add(secretarieData);\n      console.log('Secrétaire ajoutée avec succès à la base de données.');\n    } catch (error) {\n      console.error('Erreur lors de l\\'ajout du secrétaire à la base de données :', error);\n      throw error; // Vous pouvez gérer l'erreur ici ou la laisser remonter\n    }\n  });\n  return _ajouterSecretaire.apply(this, arguments);\n}\nexport const getSecretaireByUid = (firestore, uid) => {\n  return firestore.collection('secretaires').doc(uid).snapshotChanges().pipe(map(docChange => {\n    const data = docChange.payload.data();\n    if (data) {\n      return data;\n      console.log(data);\n    } else {\n      throw new Error('Secrétaire non trouvé');\n    }\n  }));\n};\n// firebaseConfig.ts\nexport function getPatientsByMedecinUid(_x42, _x43) {\n  return _getPatientsByMedecinUid.apply(this, arguments);\n}\nfunction _getPatientsByMedecinUid() {\n  _getPatientsByMedecinUid = _asyncToGenerator(function* (firestore, medecinUid) {\n    try {\n      const snapshot = yield firestore.collection('patient').ref.where('medecinUid', '==', medecinUid).get();\n      const patients = snapshot.docs.map(doc => {\n        const data = doc.data();\n        return {\n          id: doc.id,\n          nom: data.nom,\n          prenom: data.prenom,\n          email: data.email,\n          telephone: data.telephone,\n          dateNaissance: data.dateNaissance,\n          sexe: data.sexe\n        };\n      });\n      return patients;\n    } catch (error) {\n      console.error('Error fetching patients:', error);\n      throw error;\n    }\n  });\n  return _getPatientsByMedecinUid.apply(this, arguments);\n}\n;","map":{"version":3,"names":["initializeApp","getAnalytics","getAuth","signInWithEmailAndPassword","map","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","app","analytics","auth","loginUser","_x","_x2","_loginUser","apply","arguments","_asyncToGenerator","email","password","userCredential","console","log","user","error","AddUser","_x3","_x4","_x5","_x6","_x7","_x8","_x9","_x10","_x11","_AddUser","firestore","familyName","name","date","sexe","role","collection","add","then","catch","AddMedicament","_x12","_x13","_x14","_x15","_x16","_x17","_AddMedicament","nom","dosage","prises","uid","medicament","prise","label","checked","getMedicamentsByUid","_x18","_x19","_getMedicamentsByUid","snapshot","ref","where","get","medicaments","docs","doc","data","id","getMedecinsByLocalisationAndSpecialite","_x20","_x21","_x22","_getMedecinsByLocalisationAndSpecialite","localisation","specialite","medecins","AddMedecin","_x23","_x24","_x25","_x26","_x27","_x28","_x29","_x30","_x31","_x32","_x33","_x34","_AddMedecin","prenom","telephone","medecin","getMedecinByUid","_x35","_x36","_getMedecinByUid","loginMedecins","_x37","_x38","_x39","_loginMedecins","medecinCollection","medecinQuery","size","medecinData","medecinUid","ajouterSecretaire","_x40","_x41","_ajouterSecretaire","secretarieData","getSecretaireByUid","snapshotChanges","pipe","docChange","payload","Error","getPatientsByMedecinUid","_x42","_x43","_getPatientsByMedecinUid","patients","dateNaissance"],"sources":["C:\\Users\\MacBook Air\\ionic-TP\\shifai1\\src\\firebaseConfig.ts"],"sourcesContent":["// Import des modules nécessaires\r\nimport { initializeApp, FirebaseOptions, FirebaseApp } from 'firebase/app';\r\nimport { getAnalytics } from 'firebase/analytics';\r\nimport { getAuth, signInWithEmailAndPassword, Auth, User, UserCredential } from 'firebase/auth';\r\nimport { AngularFirestore, AngularFirestoreCollection, CollectionReference, DocumentData, QuerySnapshot } from '@angular/fire/compat/firestore';\r\nimport { NgZone } from '@angular/core';\r\nimport { ɵAngularFireSchedulers, ɵAppCheckInstances, ɵZoneScheduler } from '@angular/fire';\r\nimport { AngularFireAuth } from '@angular/fire/compat/auth/auth';\r\nimport { AppCheck } from 'firebase/app-check';\r\nimport { Observable, catchError, firstValueFrom, map, of } from 'rxjs';\r\n\r\n\r\n// Configuration Firebase\r\n\r\nexport const firebaseConfig = {\r\n  apiKey: \"AIzaSyA7iKnEnxTdm9UdRnegNamwRDsLFESDk7s\",\r\n  authDomain: \"shifai-f46a0.firebaseapp.com\",\r\n  projectId: \"shifai-f46a0\",\r\n  storageBucket: \"shifai-f46a0.appspot.com\",\r\n  messagingSenderId: \"383597072570\",\r\n  appId: \"1:383597072570:web:870d9d280b22a1aa28b283\",\r\n  measurementId: \"G-Y2QLPH92NB\"\r\n};\r\n\r\n// Initialisation Firebase\r\nexport const app: FirebaseApp = initializeApp(firebaseConfig);\r\nconst analytics = getAnalytics(app);\r\n\r\n// Objet d'authentification pour être utilisé dans d'autres fichiers\r\nconst auth: Auth = getAuth(app);\r\n\r\n\r\n// Fonction pour connecter l'utilisateur\r\nexport async function loginUser(email: string, password: string) {\r\n  try {\r\n    const userCredential = await signInWithEmailAndPassword(auth, email, password);\r\n    console.log('Utilisateur connecté :', userCredential.user);\r\n    return userCredential;\r\n  } catch (error) {\r\n    console.error(error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\nexport async function AddUser(firestore: AngularFirestore, app: FirebaseApp, familyName: string, name: string, email: string, password: string, date: string, sexe: string, role: string) {\r\n  const user = {\r\n    familyName: familyName,\r\n    name: name,\r\n    email: email,\r\n    password: password,\r\n    date: date,\r\n    sexe: sexe,\r\n    role: role,\r\n  };\r\n\r\n  firestore.collection('inscrits').add(user)\r\n    .then(() => {\r\n      console.log('Utilisateur ajouté avec succès à Firebase.');\r\n    })\r\n    .catch(error => {\r\n      console.error('Erreur lors de l\\'ajout à Firebase :', error);\r\n    });\r\n}\r\n\r\nexport async function AddMedicament(firestore: AngularFirestore, app: FirebaseApp, nom: string, dosage: number, prises: any[], uid:string) {\r\n  const medicament = {\r\n    nom: nom,\r\n    dosage: dosage,\r\n    prises: prises.map(prise => ({\r\n      label: prise.label,\r\n      checked: prise.checked\r\n    })),\r\n    uid: uid,\r\n  };\r\n\r\n  try {\r\n    await firestore.collection('medicaments').add(medicament);\r\n  } catch (error) {\r\n    console.error('Erreur lors de l\\'ajout du médicament:', error);\r\n    throw error;  // Renvoyer l'erreur pour que le gestionnaire puisse la gérer\r\n  }\r\n}\r\n\r\ninterface MedicamentData {\r\n  nom: string;\r\n  dosage: number;\r\n  prise: boolean[];\r\n  // Autres champs si nécessaire...\r\n}\r\n\r\nexport async function getMedicamentsByUid(firestore: AngularFirestore, uid: string) {\r\n  try {\r\n    const snapshot = await firestore.collection('medicaments').ref.where('uid', '==', uid).get();\r\n  \r\n    // Convertir le snapshot en tableau de médicaments en utilisant l'interface\r\n    const medicaments: MedicamentData[] = snapshot.docs.map(doc => {\r\n      const data = doc.data() as MedicamentData; // Cast vers l'interface définie\r\n      return { id: doc.id, ...data };\r\n    });\r\n  \r\n    return medicaments;\r\n  } catch (error) {\r\n    console.error('Erreur lors de la récupération des médicaments :', error);\r\n    throw error;\r\n  }\r\n  \r\n}\r\n\r\n// Exemple d'interface pour la structure des données des médecins\r\ninterface MedecinData {\r\n  // Définissez les champs nécessaires\r\n  uid : string ;\r\n  nom: string;\r\n  prenom:string;\r\n  localisation:string;\r\n  specialite:string;\r\n  // ... autres champs\r\n}\r\n\r\n\r\n\r\n\r\nexport async function getMedecinsByLocalisationAndSpecialite(firestore: AngularFirestore, localisation: string | null, specialite: string | null) {\r\n  try {\r\n    const snapshot = await firestore.collection('medecin').ref.where('specialite', '==', specialite).where('localisation', '==', localisation).get();\r\n\r\n    // Vérifier si snapshot est défini avant de l'utiliser\r\n    if (snapshot) {\r\n      // Convertir le snapshot en tableau de médecins\r\n      const medecins: MedecinData[] = snapshot.docs.map(doc => {\r\n        const data = doc.data() as MedecinData;\r\n        return { id: doc.id, ...data };\r\n      });\r\n\r\n      return medecins;\r\n    } else {\r\n      console.error('La requête n\\'a pas renvoyé de snapshot.');\r\n      return []; // Ou lancez une erreur appropriée selon vos besoins\r\n    }\r\n  } catch (error) {\r\n    console.error('Erreur lors de la récupération des médecins (firebase) :', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport async function AddMedecin(firestore: AngularFirestore, app: FirebaseApp, nom: string, prenom: string, email: string, password: string, date: string, sexe: string, role: string, specialite:string,localisation:string , telephone:string) {\r\n  const medecin = {\r\n    nom: nom,\r\n    prenom: prenom,\r\n    email: email,\r\n    password: password,\r\n    date: date,\r\n    sexe: sexe,\r\n    role: role,\r\n    localisation: localisation,\r\n    specialite: specialite,\r\n    telephone: telephone,\r\n\r\n  };\r\n\r\n  firestore.collection('medecin').add(medecin)\r\n    .then(() => {\r\n      console.log('Utilisateur ajouté avec succès à Firebase.');\r\n    })\r\n    .catch(error => {\r\n      console.error('Erreur lors de l\\'ajout à Firebase :', error);\r\n    });\r\n}\r\n\r\n\r\nexport async function getMedecinByUid(firestore: AngularFirestore, uid: string) {\r\n  const snapshot = await firestore.collection('medecin').ref.where('uid', '==', uid).get();\r\n  if (snapshot) {\r\n    // Convertir le snapshot en tableau de médecins\r\n    const medecins: MedecinData[] = snapshot.docs.map(doc => {\r\n      const data = doc.data() as MedecinData;\r\n      return { id: doc.id, ...data };\r\n    });\r\n\r\n    return medecins;\r\n      } else {\r\n        console.log('Aucun médecin trouvé pour cet UID :', uid);\r\n        return null; // Ou renvoyez un objet vide, selon vos besoins\r\n      }\r\n    }\r\n\r\n    export async function loginMedecins(firestore: AngularFirestore, email: string, password: string): Promise<{ medecinData: any, uid: string } | null> {\r\n      try {\r\n        // Recherchez le médecin dans la base de données avec l'email fourni\r\n        const medecinCollection: CollectionReference<DocumentData> = firestore.collection('medecin').ref as CollectionReference<DocumentData>;\r\n        const medecinQuery: QuerySnapshot<DocumentData> = await medecinCollection.where('email', '==', email).get();\r\n    \r\n        if (medecinQuery.size === 1) {\r\n          // Vérifiez le mot de passe (vous pouvez utiliser une bibliothèque de hachage appropriée)\r\n          const medecinData = medecinQuery.docs[0].data() as { password?: string };\r\n          const uid = medecinQuery.docs[0].id;\r\n    \r\n          if (medecinData && medecinData.password === password) {\r\n            console.log('Connexion réussie en tant que médecin.');\r\n            return { medecinData, uid }; // Authentification réussie, renvoie les informations du médecin et son UID\r\n          }\r\n        }\r\n    \r\n        console.error('Identifiants invalides.');\r\n        return null; // Authentification échouée\r\n    \r\n      } catch (error) {\r\n        console.error('Erreur lors de la connexion du médecin :', error);\r\n        throw error; // Vous pouvez gérer l'erreur ici ou la laisser remonter\r\n      }\r\n    }\r\n  \r\n    export const medecinUid = { uid: '' };\r\n\r\n    export async function ajouterSecretaire(firestore: AngularFirestore, secretarieData: any): Promise<void> {\r\n      try {\r\n        // Ajoutez votre logique pour ajouter les données du formulaire à la collection 'secretaire'\r\n        // Utilisez firestore.collection('secretaire') pour accéder à la collection 'secretaire' dans Firebase\r\n        await firestore.collection('secretaire').add(secretarieData);\r\n    \r\n        console.log('Secrétaire ajoutée avec succès à la base de données.');\r\n      } catch (error) {\r\n        console.error('Erreur lors de l\\'ajout du secrétaire à la base de données :', error);\r\n        throw error; // Vous pouvez gérer l'erreur ici ou la laisser remonter\r\n      }\r\n    }\r\n\r\n    export const getSecretaireByUid = (firestore: AngularFirestore, uid: string): Observable<any> => {\r\n      return firestore.collection('secretaires').doc(uid).snapshotChanges().pipe(\r\n        map(docChange => {\r\n          const data = docChange.payload.data();\r\n          if (data) {\r\n            return data;\r\n            console.log(data);\r\n          } else {\r\n            throw new Error('Secrétaire non trouvé');\r\n          }\r\n        })\r\n      );\r\n    };\r\n\r\n    \r\n\r\n    // firebaseConfig.ts\r\n\r\nexport async function getPatientsByMedecinUid(firestore: AngularFirestore, medecinUid: string): Promise<Patient[]> {\r\n  try {\r\n    const snapshot = await firestore.collection('patient').ref.where('medecinUid', '==', medecinUid).get();\r\n\r\n    const patients: Patient[] = snapshot.docs.map(doc => {\r\n      const data = doc.data() as PatientData;\r\n\r\n      return {\r\n        id: doc.id,\r\n        nom: data.nom,\r\n        prenom: data.prenom,\r\n        email: data.email,\r\n        telephone: data.telephone,\r\n        dateNaissance: data.dateNaissance,\r\n        sexe: data.sexe,\r\n      };\r\n    });\r\n\r\n    return patients;\r\n  } catch (error) {\r\n    console.error('Error fetching patients:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n    interface PatientData {\r\n      nom: string;\r\n      prenom: string;\r\n      email: string;\r\n      telephone: string;\r\n      dateNaissance: string;\r\n      sexe: string;\r\n    }\r\n    \r\n    export interface Patient {\r\n      id: string;\r\n      nom: string;\r\n      prenom: string;\r\n      email: string;\r\n      telephone: string;\r\n      dateNaissance: string;\r\n      sexe: string;\r\n    }"],"mappings":";AAAA;AACA,SAASA,aAAa,QAAsC,cAAc;AAC1E,SAASC,YAAY,QAAQ,oBAAoB;AACjD,SAASC,OAAO,EAAEC,0BAA0B,QAAoC,eAAe;AAM/F,SAAiDC,GAAG,QAAY,MAAM;AAGtE;AAEA,OAAO,MAAMC,cAAc,GAAG;EAC5BC,MAAM,EAAE,yCAAyC;EACjDC,UAAU,EAAE,8BAA8B;EAC1CC,SAAS,EAAE,cAAc;EACzBC,aAAa,EAAE,0BAA0B;EACzCC,iBAAiB,EAAE,cAAc;EACjCC,KAAK,EAAE,2CAA2C;EAClDC,aAAa,EAAE;CAChB;AAED;AACA,OAAO,MAAMC,GAAG,GAAgBb,aAAa,CAACK,cAAc,CAAC;AAC7D,MAAMS,SAAS,GAAGb,YAAY,CAACY,GAAG,CAAC;AAEnC;AACA,MAAME,IAAI,GAASb,OAAO,CAACW,GAAG,CAAC;AAG/B;AACA,gBAAsBG,SAASA,CAAAC,EAAA,EAAAC,GAAA;EAAA,OAAAC,UAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAS9B,SAAAF,WAAA;EAAAA,UAAA,GAAAG,iBAAA,CATM,WAAyBC,KAAa,EAAEC,QAAgB;IAC7D,IAAI;MACF,MAAMC,cAAc,SAAStB,0BAA0B,CAACY,IAAI,EAAEQ,KAAK,EAAEC,QAAQ,CAAC;MAC9EE,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEF,cAAc,CAACG,IAAI,CAAC;MAC1D,OAAOH,cAAc;IACvB,CAAC,CAAC,OAAOI,KAAK,EAAE;MACdH,OAAO,CAACG,KAAK,CAACA,KAAK,CAAC;MACpB,MAAMA,KAAK;IACb;EACF,CAAC;EAAA,OAAAV,UAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAKD,gBAAsBS,OAAOA,CAAAC,GAAA,EAAAC,GAAA,EAAAC,GAAA,EAAAC,GAAA,EAAAC,GAAA,EAAAC,GAAA,EAAAC,GAAA,EAAAC,IAAA,EAAAC,IAAA;EAAA,OAAAC,QAAA,CAAApB,KAAA,OAAAC,SAAA;AAAA;AAkB5B,SAAAmB,SAAA;EAAAA,QAAA,GAAAlB,iBAAA,CAlBM,WAAuBmB,SAA2B,EAAE5B,GAAgB,EAAE6B,UAAkB,EAAEC,IAAY,EAAEpB,KAAa,EAAEC,QAAgB,EAAEoB,IAAY,EAAEC,IAAY,EAAEC,IAAY;IACtL,MAAMlB,IAAI,GAAG;MACXc,UAAU,EAAEA,UAAU;MACtBC,IAAI,EAAEA,IAAI;MACVpB,KAAK,EAAEA,KAAK;MACZC,QAAQ,EAAEA,QAAQ;MAClBoB,IAAI,EAAEA,IAAI;MACVC,IAAI,EAAEA,IAAI;MACVC,IAAI,EAAEA;KACP;IAEDL,SAAS,CAACM,UAAU,CAAC,UAAU,CAAC,CAACC,GAAG,CAACpB,IAAI,CAAC,CACvCqB,IAAI,CAAC,MAAK;MACTvB,OAAO,CAACC,GAAG,CAAC,4CAA4C,CAAC;IAC3D,CAAC,CAAC,CACDuB,KAAK,CAACrB,KAAK,IAAG;MACbH,OAAO,CAACG,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAAC;IAC9D,CAAC,CAAC;EACN,CAAC;EAAA,OAAAW,QAAA,CAAApB,KAAA,OAAAC,SAAA;AAAA;AAED,gBAAsB8B,aAAaA,CAAAC,IAAA,EAAAC,IAAA,EAAAC,IAAA,EAAAC,IAAA,EAAAC,IAAA,EAAAC,IAAA;EAAA,OAAAC,cAAA,CAAAtC,KAAA,OAAAC,SAAA;AAAA;AAiBlC,SAAAqC,eAAA;EAAAA,cAAA,GAAApC,iBAAA,CAjBM,WAA6BmB,SAA2B,EAAE5B,GAAgB,EAAE8C,GAAW,EAAEC,MAAc,EAAEC,MAAa,EAAEC,GAAU;IACvI,MAAMC,UAAU,GAAG;MACjBJ,GAAG,EAAEA,GAAG;MACRC,MAAM,EAAEA,MAAM;MACdC,MAAM,EAAEA,MAAM,CAACzD,GAAG,CAAC4D,KAAK,KAAK;QAC3BC,KAAK,EAAED,KAAK,CAACC,KAAK;QAClBC,OAAO,EAAEF,KAAK,CAACE;OAChB,CAAC,CAAC;MACHJ,GAAG,EAAEA;KACN;IAED,IAAI;MACF,MAAMrB,SAAS,CAACM,UAAU,CAAC,aAAa,CAAC,CAACC,GAAG,CAACe,UAAU,CAAC;IAC3D,CAAC,CAAC,OAAOlC,KAAK,EAAE;MACdH,OAAO,CAACG,KAAK,CAAC,wCAAwC,EAAEA,KAAK,CAAC;MAC9D,MAAMA,KAAK,CAAC,CAAE;IAChB;EACF,CAAC;EAAA,OAAA6B,cAAA,CAAAtC,KAAA,OAAAC,SAAA;AAAA;AASD,gBAAsB8C,mBAAmBA,CAAAC,IAAA,EAAAC,IAAA;EAAA,OAAAC,oBAAA,CAAAlD,KAAA,OAAAC,SAAA;AAAA;AAgBxC,SAAAiD,qBAAA;EAAAA,oBAAA,GAAAhD,iBAAA,CAhBM,WAAmCmB,SAA2B,EAAEqB,GAAW;IAChF,IAAI;MACF,MAAMS,QAAQ,SAAS9B,SAAS,CAACM,UAAU,CAAC,aAAa,CAAC,CAACyB,GAAG,CAACC,KAAK,CAAC,KAAK,EAAE,IAAI,EAAEX,GAAG,CAAC,CAACY,GAAG,EAAE;MAE5F;MACA,MAAMC,WAAW,GAAqBJ,QAAQ,CAACK,IAAI,CAACxE,GAAG,CAACyE,GAAG,IAAG;QAC5D,MAAMC,IAAI,GAAGD,GAAG,CAACC,IAAI,EAAoB,CAAC,CAAC;QAC3C,OAAO;UAAEC,EAAE,EAAEF,GAAG,CAACE,EAAE;UAAE,GAAGD;QAAI,CAAE;MAChC,CAAC,CAAC;MAEF,OAAOH,WAAW;IACpB,CAAC,CAAC,OAAO9C,KAAK,EAAE;MACdH,OAAO,CAACG,KAAK,CAAC,kDAAkD,EAAEA,KAAK,CAAC;MACxE,MAAMA,KAAK;IACb;EAEF,CAAC;EAAA,OAAAyC,oBAAA,CAAAlD,KAAA,OAAAC,SAAA;AAAA;AAgBD,gBAAsB2D,sCAAsCA,CAAAC,IAAA,EAAAC,IAAA,EAAAC,IAAA;EAAA,OAAAC,uCAAA,CAAAhE,KAAA,OAAAC,SAAA;AAAA;AAqB3D,SAAA+D,wCAAA;EAAAA,uCAAA,GAAA9D,iBAAA,CArBM,WAAsDmB,SAA2B,EAAE4C,YAA2B,EAAEC,UAAyB;IAC9I,IAAI;MACF,MAAMf,QAAQ,SAAS9B,SAAS,CAACM,UAAU,CAAC,SAAS,CAAC,CAACyB,GAAG,CAACC,KAAK,CAAC,YAAY,EAAE,IAAI,EAAEa,UAAU,CAAC,CAACb,KAAK,CAAC,cAAc,EAAE,IAAI,EAAEY,YAAY,CAAC,CAACX,GAAG,EAAE;MAEhJ;MACA,IAAIH,QAAQ,EAAE;QACZ;QACA,MAAMgB,QAAQ,GAAkBhB,QAAQ,CAACK,IAAI,CAACxE,GAAG,CAACyE,GAAG,IAAG;UACtD,MAAMC,IAAI,GAAGD,GAAG,CAACC,IAAI,EAAiB;UACtC,OAAO;YAAEC,EAAE,EAAEF,GAAG,CAACE,EAAE;YAAE,GAAGD;UAAI,CAAE;QAChC,CAAC,CAAC;QAEF,OAAOS,QAAQ;MACjB,CAAC,MAAM;QACL7D,OAAO,CAACG,KAAK,CAAC,0CAA0C,CAAC;QACzD,OAAO,EAAE,CAAC,CAAC;MACb;IACF,CAAC,CAAC,OAAOA,KAAK,EAAE;MACdH,OAAO,CAACG,KAAK,CAAC,0DAA0D,EAAEA,KAAK,CAAC;MAChF,MAAMA,KAAK;IACb;EACF,CAAC;EAAA,OAAAuD,uCAAA,CAAAhE,KAAA,OAAAC,SAAA;AAAA;AAED,gBAAsBmE,UAAUA,CAAAC,IAAA,EAAAC,IAAA,EAAAC,IAAA,EAAAC,IAAA,EAAAC,IAAA,EAAAC,IAAA,EAAAC,IAAA,EAAAC,IAAA,EAAAC,IAAA,EAAAC,IAAA,EAAAC,IAAA,EAAAC,IAAA;EAAA,OAAAC,WAAA,CAAAjF,KAAA,OAAAC,SAAA;AAAA;AAsB/B,SAAAgF,YAAA;EAAAA,WAAA,GAAA/E,iBAAA,CAtBM,WAA0BmB,SAA2B,EAAE5B,GAAgB,EAAE8C,GAAW,EAAE2C,MAAc,EAAE/E,KAAa,EAAEC,QAAgB,EAAEoB,IAAY,EAAEC,IAAY,EAAEC,IAAY,EAAEwC,UAAiB,EAACD,YAAmB,EAAGkB,SAAgB;IAC9O,MAAMC,OAAO,GAAG;MACd7C,GAAG,EAAEA,GAAG;MACR2C,MAAM,EAAEA,MAAM;MACd/E,KAAK,EAAEA,KAAK;MACZC,QAAQ,EAAEA,QAAQ;MAClBoB,IAAI,EAAEA,IAAI;MACVC,IAAI,EAAEA,IAAI;MACVC,IAAI,EAAEA,IAAI;MACVuC,YAAY,EAAEA,YAAY;MAC1BC,UAAU,EAAEA,UAAU;MACtBiB,SAAS,EAAEA;KAEZ;IAED9D,SAAS,CAACM,UAAU,CAAC,SAAS,CAAC,CAACC,GAAG,CAACwD,OAAO,CAAC,CACzCvD,IAAI,CAAC,MAAK;MACTvB,OAAO,CAACC,GAAG,CAAC,4CAA4C,CAAC;IAC3D,CAAC,CAAC,CACDuB,KAAK,CAACrB,KAAK,IAAG;MACbH,OAAO,CAACG,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAAC;IAC9D,CAAC,CAAC;EACN,CAAC;EAAA,OAAAwE,WAAA,CAAAjF,KAAA,OAAAC,SAAA;AAAA;AAGD,gBAAsBoF,eAAeA,CAAAC,IAAA,EAAAC,IAAA;EAAA,OAAAC,gBAAA,CAAAxF,KAAA,OAAAC,SAAA;AAAA;AAchC,SAAAuF,iBAAA;EAAAA,gBAAA,GAAAtF,iBAAA,CAdE,WAA+BmB,SAA2B,EAAEqB,GAAW;IAC5E,MAAMS,QAAQ,SAAS9B,SAAS,CAACM,UAAU,CAAC,SAAS,CAAC,CAACyB,GAAG,CAACC,KAAK,CAAC,KAAK,EAAE,IAAI,EAAEX,GAAG,CAAC,CAACY,GAAG,EAAE;IACxF,IAAIH,QAAQ,EAAE;MACZ;MACA,MAAMgB,QAAQ,GAAkBhB,QAAQ,CAACK,IAAI,CAACxE,GAAG,CAACyE,GAAG,IAAG;QACtD,MAAMC,IAAI,GAAGD,GAAG,CAACC,IAAI,EAAiB;QACtC,OAAO;UAAEC,EAAE,EAAEF,GAAG,CAACE,EAAE;UAAE,GAAGD;QAAI,CAAE;MAChC,CAAC,CAAC;MAEF,OAAOS,QAAQ;IACb,CAAC,MAAM;MACL7D,OAAO,CAACC,GAAG,CAAC,qCAAqC,EAAEmC,GAAG,CAAC;MACvD,OAAO,IAAI,CAAC,CAAC;IACf;EACF,CAAC;EAAA,OAAA8C,gBAAA,CAAAxF,KAAA,OAAAC,SAAA;AAAA;AAED,gBAAsBwF,aAAaA,CAAAC,IAAA,EAAAC,IAAA,EAAAC,IAAA;EAAA,OAAAC,cAAA,CAAA7F,KAAA,OAAAC,SAAA;AAAA;AAwBlC,SAAA4F,eAAA;EAAAA,cAAA,GAAA3F,iBAAA,CAxBM,WAA6BmB,SAA2B,EAAElB,KAAa,EAAEC,QAAgB;IAC9F,IAAI;MACF;MACA,MAAM0F,iBAAiB,GAAsCzE,SAAS,CAACM,UAAU,CAAC,SAAS,CAAC,CAACyB,GAAwC;MACrI,MAAM2C,YAAY,SAAsCD,iBAAiB,CAACzC,KAAK,CAAC,OAAO,EAAE,IAAI,EAAElD,KAAK,CAAC,CAACmD,GAAG,EAAE;MAE3G,IAAIyC,YAAY,CAACC,IAAI,KAAK,CAAC,EAAE;QAC3B;QACA,MAAMC,WAAW,GAAGF,YAAY,CAACvC,IAAI,CAAC,CAAC,CAAC,CAACE,IAAI,EAA2B;QACxE,MAAMhB,GAAG,GAAGqD,YAAY,CAACvC,IAAI,CAAC,CAAC,CAAC,CAACG,EAAE;QAEnC,IAAIsC,WAAW,IAAIA,WAAW,CAAC7F,QAAQ,KAAKA,QAAQ,EAAE;UACpDE,OAAO,CAACC,GAAG,CAAC,wCAAwC,CAAC;UACrD,OAAO;YAAE0F,WAAW;YAAEvD;UAAG,CAAE,CAAC,CAAC;QAC/B;MACF;MAEApC,OAAO,CAACG,KAAK,CAAC,yBAAyB,CAAC;MACxC,OAAO,IAAI,CAAC,CAAC;IAEf,CAAC,CAAC,OAAOA,KAAK,EAAE;MACdH,OAAO,CAACG,KAAK,CAAC,0CAA0C,EAAEA,KAAK,CAAC;MAChE,MAAMA,KAAK,CAAC,CAAC;IACf;EACF,CAAC;EAAA,OAAAoF,cAAA,CAAA7F,KAAA,OAAAC,SAAA;AAAA;AAED,OAAO,MAAMiG,UAAU,GAAG;EAAExD,GAAG,EAAE;AAAE,CAAE;AAErC,gBAAsByD,iBAAiBA,CAAAC,IAAA,EAAAC,IAAA;EAAA,OAAAC,kBAAA,CAAAtG,KAAA,OAAAC,SAAA;AAAA;AAWtC,SAAAqG,mBAAA;EAAAA,kBAAA,GAAApG,iBAAA,CAXM,WAAiCmB,SAA2B,EAAEkF,cAAmB;IACtF,IAAI;MACF;MACA;MACA,MAAMlF,SAAS,CAACM,UAAU,CAAC,YAAY,CAAC,CAACC,GAAG,CAAC2E,cAAc,CAAC;MAE5DjG,OAAO,CAACC,GAAG,CAAC,sDAAsD,CAAC;IACrE,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdH,OAAO,CAACG,KAAK,CAAC,8DAA8D,EAAEA,KAAK,CAAC;MACpF,MAAMA,KAAK,CAAC,CAAC;IACf;EACF,CAAC;EAAA,OAAA6F,kBAAA,CAAAtG,KAAA,OAAAC,SAAA;AAAA;AAED,OAAO,MAAMuG,kBAAkB,GAAGA,CAACnF,SAA2B,EAAEqB,GAAW,KAAqB;EAC9F,OAAOrB,SAAS,CAACM,UAAU,CAAC,aAAa,CAAC,CAAC8B,GAAG,CAACf,GAAG,CAAC,CAAC+D,eAAe,EAAE,CAACC,IAAI,CACxE1H,GAAG,CAAC2H,SAAS,IAAG;IACd,MAAMjD,IAAI,GAAGiD,SAAS,CAACC,OAAO,CAAClD,IAAI,EAAE;IACrC,IAAIA,IAAI,EAAE;MACR,OAAOA,IAAI;MACXpD,OAAO,CAACC,GAAG,CAACmD,IAAI,CAAC;IACnB,CAAC,MAAM;MACL,MAAM,IAAImD,KAAK,CAAC,uBAAuB,CAAC;IAC1C;EACF,CAAC,CAAC,CACH;AACH,CAAC;AAID;AAEJ,gBAAsBC,uBAAuBA,CAAAC,IAAA,EAAAC,IAAA;EAAA,OAAAC,wBAAA,CAAAjH,KAAA,OAAAC,SAAA;AAAA;AAuB5C,SAAAgH,yBAAA;EAAAA,wBAAA,GAAA/G,iBAAA,CAvBM,WAAuCmB,SAA2B,EAAE6E,UAAkB;IAC3F,IAAI;MACF,MAAM/C,QAAQ,SAAS9B,SAAS,CAACM,UAAU,CAAC,SAAS,CAAC,CAACyB,GAAG,CAACC,KAAK,CAAC,YAAY,EAAE,IAAI,EAAE6C,UAAU,CAAC,CAAC5C,GAAG,EAAE;MAEtG,MAAM4D,QAAQ,GAAc/D,QAAQ,CAACK,IAAI,CAACxE,GAAG,CAACyE,GAAG,IAAG;QAClD,MAAMC,IAAI,GAAGD,GAAG,CAACC,IAAI,EAAiB;QAEtC,OAAO;UACLC,EAAE,EAAEF,GAAG,CAACE,EAAE;UACVpB,GAAG,EAAEmB,IAAI,CAACnB,GAAG;UACb2C,MAAM,EAAExB,IAAI,CAACwB,MAAM;UACnB/E,KAAK,EAAEuD,IAAI,CAACvD,KAAK;UACjBgF,SAAS,EAAEzB,IAAI,CAACyB,SAAS;UACzBgC,aAAa,EAAEzD,IAAI,CAACyD,aAAa;UACjC1F,IAAI,EAAEiC,IAAI,CAACjC;SACZ;MACH,CAAC,CAAC;MAEF,OAAOyF,QAAQ;IACjB,CAAC,CAAC,OAAOzG,KAAK,EAAE;MACdH,OAAO,CAACG,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAChD,MAAMA,KAAK;IACb;EACF,CAAC;EAAA,OAAAwG,wBAAA,CAAAjH,KAAA,OAAAC,SAAA;AAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}