{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/MacBook Air/Desktop/shifai1VV/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _WorkHoursModalComponent, _WorkHoursModalModule;\nimport { CommonModule } from '@angular/common';\nimport { AngularFirestore } from '@angular/fire/compat/firestore';\nimport { FormsModule } from '@angular/forms';\nimport { IonicModule } from '@ionic/angular';\nimport { PersonneModalComponent } from '../personne-modal/personne-modal.component';\nimport { RendezvousmodalComponent } from '../rendezvousmodal/rendezvousmodal.component';\nimport { medecinUid } from 'src/app/recherche-medecin/recherche-medecin.page';\nimport { getRdvByMedUid } from 'src/firebaseConfig';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ionic/angular\";\nimport * as i2 from \"@angular/fire/compat/firestore\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/forms\";\nfunction WorkHoursModalComponent_ion_select_option_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ion-select-option\", 8);\n    i0.ɵɵtext(1);\n    i0.ɵɵpipe(2, \"date\");\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const date_r2 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", date_r2);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" \", i0.ɵɵpipeBind2(2, 2, date_r2, \"dd/MM/yyyy\"), \" \");\n  }\n}\nfunction WorkHoursModalComponent_div_13_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\")(1, \"ion-checkbox\", 9);\n    i0.ɵɵlistener(\"ngModelChange\", function WorkHoursModalComponent_div_13_Template_ion_checkbox_ngModelChange_1_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r6);\n      const i_r4 = restoredCtx.index;\n      const ctx_r5 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r5.hoursAvailable[i_r4] = $event);\n    })(\"ionChange\", function WorkHoursModalComponent_div_13_Template_ion_checkbox_ionChange_1_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r6);\n      const hour_r3 = restoredCtx.$implicit;\n      const ctx_r7 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r7.toggleSelection(hour_r3, ctx_r7.selectedDate));\n    });\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const i_r4 = ctx.index;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngModel\", ctx_r1.hoursAvailable[i_r4]);\n  }\n}\nexport class WorkHoursModalComponent {\n  constructor(modalController, firestore) {\n    this.modalController = modalController;\n    this.firestore = firestore;\n    this.rdvs = []; // Type à adapter en fonction de vos données de rendez-vous\n    this.takenHours = [];\n    this.hoursAvailable = new Array(24).fill(true); // Supposons 24 heures dans une journée\n    this.workHours = ['8H00 - 8H30', '8H30 - 9H00', '9H00 - 9H30', '9H30 - 10H00', '10H00 - 10H30', '10H30 - 11H00', '11H00 - 11H30', '11H30 - 12H00', '14H00 - 14H30', '14H30 - 15H00', '15H00 - 15H30', '15H30 - 16H00', '16H00 - 16H30', '16H30 - 17H00'];\n    this.selectedDate = '';\n  }\n  ngOnInit() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      const rdvs = yield getRdvByMedUid(_this.firestore, medecinUid);\n      console.log('rdvs       ', rdvs);\n      _this.markTakenHours();\n    })();\n  }\n  close() {\n    this.modalController.dismiss();\n  }\n  toggleSelection(hour, date) {\n    selectedHour = hour;\n    selectedDate = date;\n    console.log('Heure sélectionnée :', selectedHour);\n    console.log('Date sélectionnée :', selectedDate);\n    console.log('med   ', medecinUid);\n  }\n  generateDateList() {\n    const dateList = [];\n    const today = new Date();\n    for (let i = 0; i < 8; i++) {\n      const date = new Date(today);\n      date.setDate(today.getDate() + i);\n      // Vérifier si la date générée est un samedi ou un dimanche\n      if (date.getDay() !== 0 && date.getDay() !== 6) {\n        const formattedDate = this.convertDateToString(date);\n        dateList.push(formattedDate);\n        this.rdvs.forEach(rdv => {\n          if (rdv.date === formattedDate && this.workHours.includes(rdv.heure)) {\n            const index = this.workHours.indexOf(rdv.heure);\n            if (index !== -1) {\n              this.workHours[index] = 'Indisponible';\n            }\n          }\n        });\n      }\n    }\n    return dateList;\n  }\n  convertDateToString(date) {\n    const year = date.getFullYear();\n    const month = (date.getMonth() + 1).toString().padStart(2, '0');\n    const day = date.getDate().toString().padStart(2, '0');\n    return `${year}-${month}-${day}`;\n  }\n  openWorkHoursModal() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const modal = yield _this2.modalController.create({\n        component: PersonneModalComponent,\n        cssClass: 'personne-modal'\n      });\n      return yield modal.present();\n    })();\n  }\n  openrdvModal() {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      const modal = yield _this3.modalController.create({\n        component: RendezvousmodalComponent,\n        cssClass: 'work-hours-modal'\n      });\n      _this3.close;\n      return yield modal.present();\n    })();\n  }\n  // Définir une liste pour stocker les rendez-vous pris pour une journée donnée\n  // Fonction appelée lorsque l'utilisateur sélectionne une date\n  onDateSelected(date) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      // Charger les rendez-vous pris pour la date sélectionnée\n      const rdvs = yield getRdvByMedUid(_this4.firestore, medecinUid);\n      if (rdvs) {\n        // Réinitialiser la liste des rendez-vous\n        _this4.rdvs = rdvs;\n        // Mettre à jour la grille horaire en désactivant les heures prises\n        _this4.workHours = _this4.workHours.map(hour => {\n          // Vérifier si l'heure est déjà prise pour la date sélectionnée\n          const isTaken = _this4.rdvs.some(rdv => rdv.date === date && rdv.heure === hour);\n          return isTaken ? hour + ' (Réservé)' : hour;\n        });\n      }\n    })();\n  }\n  // Fonction pour vérifier si une heure est déjà prise\n  isHourTaken(hour) {\n    return hour.endsWith('(Réservé)');\n  }\n  markTakenHours() {\n    this.rdvs.forEach(rdv => {\n      const hour = rdv.heure; // Supposons que 'heure' est une propriété de rendez-vous contenant l'heure du rendez-vous\n      const hourIndex = this.getHourIndex(hour);\n      if (hourIndex >= 0) {\n        this.hoursAvailable[hourIndex] = false;\n      }\n    });\n  }\n  getHourIndex(hour) {\n    // Convertir l'heure au format index (par exemple, '8H00' => 8)\n    // Vous devez implémenter cette logique selon le format de vos heures\n    return parseInt(hour.substring(0, 2), 10);\n  }\n}\n_WorkHoursModalComponent = WorkHoursModalComponent;\n_WorkHoursModalComponent.ɵfac = function WorkHoursModalComponent_Factory(t) {\n  return new (t || _WorkHoursModalComponent)(i0.ɵɵdirectiveInject(i1.ModalController), i0.ɵɵdirectiveInject(i2.AngularFirestore));\n};\n_WorkHoursModalComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: _WorkHoursModalComponent,\n  selectors: [[\"app-work-hours-modal\"]],\n  decls: 17,\n  vars: 3,\n  consts: [[\"slot\", \"end\"], [3, \"click\"], [\"slot\", \"start\"], [3, \"ngModel\", \"ngModelChange\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [4, \"ngFor\", \"ngForOf\"], [1, \"modal-buttons\"], [\"expand\", \"block\", \"color\", \"primary\", 3, \"click\"], [3, \"value\"], [3, \"ngModel\", \"ngModelChange\", \"ionChange\"]],\n  template: function WorkHoursModalComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ion-header\")(1, \"ion-toolbar\")(2, \"ion-title\");\n      i0.ɵɵtext(3, \"Personne\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"ion-buttons\", 0)(5, \"ion-button\", 1);\n      i0.ɵɵlistener(\"click\", function WorkHoursModalComponent_Template_ion_button_click_5_listener() {\n        return ctx.openrdvModal();\n      });\n      i0.ɵɵtext(6, \"Suivant\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(7, \"ion-buttons\", 2)(8, \"ion-button\", 1);\n      i0.ɵɵlistener(\"click\", function WorkHoursModalComponent_Template_ion_button_click_8_listener() {\n        return ctx.close();\n      });\n      i0.ɵɵtext(9, \"Fermer\");\n      i0.ɵɵelementEnd()()()();\n      i0.ɵɵelementStart(10, \"ion-content\")(11, \"ion-select\", 3);\n      i0.ɵɵlistener(\"ngModelChange\", function WorkHoursModalComponent_Template_ion_select_ngModelChange_11_listener($event) {\n        return ctx.selectedDate = $event;\n      });\n      i0.ɵɵtemplate(12, WorkHoursModalComponent_ion_select_option_12_Template, 3, 5, \"ion-select-option\", 4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(13, WorkHoursModalComponent_div_13_Template, 2, 1, \"div\", 5);\n      i0.ɵɵelementStart(14, \"div\", 6)(15, \"ion-button\", 7);\n      i0.ɵɵlistener(\"click\", function WorkHoursModalComponent_Template_ion_button_click_15_listener() {\n        return ctx.openrdvModal();\n      });\n      i0.ɵɵtext(16, \"S\\u00E9lectionner une heure\");\n      i0.ɵɵelementEnd()()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(11);\n      i0.ɵɵproperty(\"ngModel\", ctx.selectedDate);\n      i0.ɵɵadvance();\n      i0.ɵɵproperty(\"ngForOf\", ctx.generateDateList());\n      i0.ɵɵadvance();\n      i0.ɵɵproperty(\"ngForOf\", ctx.workHours);\n    }\n  },\n  dependencies: [i3.NgForOf, i4.NgControlStatus, i4.NgModel, i1.IonButton, i1.IonButtons, i1.IonCheckbox, i1.IonContent, i1.IonHeader, i1.IonSelect, i1.IonSelectOption, i1.IonTitle, i1.IonToolbar, i1.BooleanValueAccessor, i1.SelectValueAccessor, i3.DatePipe],\n  styles: [\"@charset \\\"UTF-8\\\";\\n.work-hours-container[_ngcontent-%COMP%] {\\n  display: grid;\\n  grid-template-columns: 1fr 1fr; \\n\\n  gap: 10px; \\n\\n  margin-left: 10%;\\n}\\n\\n.work-hour-button[_ngcontent-%COMP%] {\\n  width: 70%; \\n\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uLy4uLy4uLy4uL01hY0Jvb2slMjBBaXIvRGVza3RvcC9zaGlmYWkxVlYvc3JjL2FwcC9hZmZpY2hlLW1lZGVjaW4vd29yay1ob3Vycy1tb2RhbC93b3JrLWhvdXJzLW1vZGFsLmNvbXBvbmVudC5zY3NzIiwid2VicGFjazovLy4vc3JjL2FwcC9hZmZpY2hlLW1lZGVjaW4vd29yay1ob3Vycy1tb2RhbC93b3JrLWhvdXJzLW1vZGFsLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLGdCQUFnQjtBQ0FoQjtFQUNJLGFBQUE7RUFDQSw4QkFBQSxFQUFBLG1DQUFBO0VBQ0EsU0FBQSxFQUFBLGtDQUFBO0VBQ0EsZ0JBQUE7QURFSjs7QUNDRTtFQUNFLFVBQUEsRUFBQSxxQ0FBQTtBREVKIiwic291cmNlc0NvbnRlbnQiOlsiQGNoYXJzZXQgXCJVVEYtOFwiO1xuLndvcmstaG91cnMtY29udGFpbmVyIHtcbiAgZGlzcGxheTogZ3JpZDtcbiAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAxZnIgMWZyOyAvKiBEaXZpc2UgZW4gZGV1eCBjb2xvbm5lcyDDg8KpZ2FsZXMgKi9cbiAgZ2FwOiAxMHB4OyAvKiBFc3BhY2VtZW50IGVudHJlIGxlcyDDg8KpbMODwqltZW50cyAqL1xuICBtYXJnaW4tbGVmdDogMTAlO1xufVxuXG4ud29yay1ob3VyLWJ1dHRvbiB7XG4gIHdpZHRoOiA3MCU7IC8qIFJlbXBsaXIgbGEgbGFyZ2V1ciBkZSBsYSBjb2xvbm5lICovXG59IiwiLndvcmstaG91cnMtY29udGFpbmVyIHtcclxuICAgIGRpc3BsYXk6IGdyaWQ7XHJcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDFmciAxZnI7IC8qIERpdmlzZSBlbiBkZXV4IGNvbG9ubmVzIMODwqlnYWxlcyAqL1xyXG4gICAgZ2FwOiAxMHB4OyAvKiBFc3BhY2VtZW50IGVudHJlIGxlcyDDg8KpbMODwqltZW50cyAqL1xyXG4gICAgbWFyZ2luLWxlZnQ6IDEwJTtcclxuICB9XHJcbiAgXHJcbiAgLndvcmstaG91ci1idXR0b24ge1xyXG4gICAgd2lkdGg6IDcwJTsgLyogUmVtcGxpciBsYSBsYXJnZXVyIGRlIGxhIGNvbG9ubmUgKi9cclxuICB9Il0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n});\nexport class WorkHoursModalModule {}\n_WorkHoursModalModule = WorkHoursModalModule;\n_WorkHoursModalModule.ɵfac = function WorkHoursModalModule_Factory(t) {\n  return new (t || _WorkHoursModalModule)();\n};\n_WorkHoursModalModule.ɵmod = /*@__PURE__*/i0.ɵɵdefineNgModule({\n  type: _WorkHoursModalModule\n});\n_WorkHoursModalModule.ɵinj = /*@__PURE__*/i0.ɵɵdefineInjector({\n  providers: [AngularFirestore],\n  imports: [CommonModule, FormsModule, IonicModule]\n});\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(WorkHoursModalModule, {\n    declarations: [WorkHoursModalComponent],\n    imports: [CommonModule, FormsModule, IonicModule]\n  });\n})();\nexport let selectedHour;\nexport let selectedDate;","map":{"version":3,"names":["CommonModule","AngularFirestore","FormsModule","IonicModule","PersonneModalComponent","RendezvousmodalComponent","medecinUid","getRdvByMedUid","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵproperty","date_r2","ɵɵadvance","ɵɵtextInterpolate1","ɵɵpipeBind2","ɵɵlistener","WorkHoursModalComponent_div_13_Template_ion_checkbox_ngModelChange_1_listener","$event","restoredCtx","ɵɵrestoreView","_r6","i_r4","index","ctx_r5","ɵɵnextContext","ɵɵresetView","hoursAvailable","WorkHoursModalComponent_div_13_Template_ion_checkbox_ionChange_1_listener","hour_r3","$implicit","ctx_r7","toggleSelection","selectedDate","ctx_r1","WorkHoursModalComponent","constructor","modalController","firestore","rdvs","takenHours","Array","fill","workHours","ngOnInit","_this","_asyncToGenerator","console","log","markTakenHours","close","dismiss","hour","date","selectedHour","generateDateList","dateList","today","Date","i","setDate","getDate","getDay","formattedDate","convertDateToString","push","forEach","rdv","includes","heure","indexOf","year","getFullYear","month","getMonth","toString","padStart","day","openWorkHoursModal","_this2","modal","create","component","cssClass","present","openrdvModal","_this3","onDateSelected","_this4","map","isTaken","some","isHourTaken","endsWith","hourIndex","getHourIndex","parseInt","substring","ɵɵdirectiveInject","i1","ModalController","i2","selectors","decls","vars","consts","template","WorkHoursModalComponent_Template","rf","ctx","WorkHoursModalComponent_Template_ion_button_click_5_listener","WorkHoursModalComponent_Template_ion_button_click_8_listener","WorkHoursModalComponent_Template_ion_select_ngModelChange_11_listener","ɵɵtemplate","WorkHoursModalComponent_ion_select_option_12_Template","WorkHoursModalComponent_div_13_Template","WorkHoursModalComponent_Template_ion_button_click_15_listener","WorkHoursModalModule","imports","declarations"],"sources":["C:\\Users\\MacBook Air\\Desktop\\shifai1VV\\src\\app\\affiche-medecin\\work-hours-modal\\work-hours-modal.component.ts","C:\\Users\\MacBook Air\\Desktop\\shifai1VV\\src\\app\\affiche-medecin\\work-hours-modal\\work-hours-modal.component.html"],"sourcesContent":["import { CommonModule } from '@angular/common';\nimport { Component, NgModule, OnInit } from '@angular/core';\nimport { AngularFirestore } from '@angular/fire/compat/firestore';\nimport { FormsModule } from '@angular/forms';\nimport { IonicModule, ModalController } from '@ionic/angular';\nimport { Subject, takeUntil } from 'rxjs';\nimport { PersonneModalComponent } from '../personne-modal/personne-modal.component';\nimport { RendezvousmodalComponent } from '../rendezvousmodal/rendezvousmodal.component';\nimport { medecinUid } from 'src/app/recherche-medecin/recherche-medecin.page';\nimport { RendezVousData, getRdvByMedUid } from 'src/firebaseConfig';\n\n\n\n@Component({\n  selector: 'app-work-hours-modal',\n  templateUrl: './work-hours-modal.component.html',\n  styleUrls: ['./work-hours-modal.component.scss'],\n})\nexport class WorkHoursModalComponent implements OnInit {\n  rdvs: RendezVousData[] = []; // Type à adapter en fonction de vos données de rendez-vous\n  takenHours: string[] = [];\n  hoursAvailable: boolean[] = new Array(24).fill(true); // Supposons 24 heures dans une journée\n\n  workHours: string[] = [\n    '8H00 - 8H30',\n    '8H30 - 9H00',\n    '9H00 - 9H30',\n    '9H30 - 10H00',\n    '10H00 - 10H30',\n    '10H30 - 11H00',\n    '11H00 - 11H30',\n    '11H30 - 12H00',\n    '14H00 - 14H30',\n    '14H30 - 15H00',\n    '15H00 - 15H30',\n    '15H30 - 16H00',\n    '16H00 - 16H30',\n    '16H30 - 17H00',\n  ];\n\n \n\n  constructor(private modalController: ModalController, private firestore: AngularFirestore) {}\n\n  async ngOnInit() {\n    const rdvs = await getRdvByMedUid(this.firestore, medecinUid);\n    console.log('rdvs       ',rdvs);\n    this.markTakenHours();\n\n  }  \n   \n  close() {\n    this.modalController.dismiss();\n  }\n  selectedDate: string = '';\n  toggleSelection(hour: string, date: string) {\n   selectedHour = hour;\n   selectedDate = date;\n    console.log('Heure sélectionnée :', selectedHour);\n    console.log('Date sélectionnée :', selectedDate);\n    console.log('med   ',medecinUid)\n  }\n\n  generateDateList(): string[] {\n    const dateList: string[] = [];\n    const today = new Date();\n    for (let i = 0; i < 8; i++) {\n      const date = new Date(today);\n      date.setDate(today.getDate() + i);\n  \n      // Vérifier si la date générée est un samedi ou un dimanche\n      if (date.getDay() !== 0 && date.getDay() !== 6) {\n        const formattedDate = this.convertDateToString(date);\n        dateList.push(formattedDate);\n      \n      this.rdvs.forEach(rdv => {\n        if (rdv.date === formattedDate && this.workHours.includes(rdv.heure)) {\n          const index = this.workHours.indexOf(rdv.heure);\n          if (index !== -1) {\n            this.workHours[index] = 'Indisponible';\n          }\n        }\n      });\n    }\n  }\n    return dateList;\n  }\n  \n  convertDateToString(date: Date): string {\n    const year = date.getFullYear();\n    const month = (date.getMonth() + 1).toString().padStart(2, '0');\n    const day = date.getDate().toString().padStart(2, '0');\n    return `${year}-${month}-${day}`;\n  }\n\n\n   async openWorkHoursModal() {\n    const modal = await this.modalController.create({\n      component: PersonneModalComponent,\n      cssClass: 'personne-modal',\n    });\n    return await modal.present();\n  }\n\n  async openrdvModal() {\n    const modal = await this.modalController.create({\n      component: RendezvousmodalComponent,\n      cssClass: 'work-hours-modal',\n    });\n    this.close\n    return await modal.present();\n  }\n  \n  // Définir une liste pour stocker les rendez-vous pris pour une journée donnée\n\n// Fonction appelée lorsque l'utilisateur sélectionne une date\nasync onDateSelected(date: string) {\n  // Charger les rendez-vous pris pour la date sélectionnée\n  const rdvs = await getRdvByMedUid(this.firestore, medecinUid);\n  \n  if (rdvs) {\n    // Réinitialiser la liste des rendez-vous\n    this.rdvs = rdvs;\n\n    // Mettre à jour la grille horaire en désactivant les heures prises\n    this.workHours = this.workHours.map(hour => {\n      // Vérifier si l'heure est déjà prise pour la date sélectionnée\n      const isTaken = this.rdvs.some(rdv => rdv.date === date && rdv.heure === hour);\n      return isTaken ? hour + ' (Réservé)' : hour;\n    });\n  }\n}\n\n// Fonction pour vérifier si une heure est déjà prise\nisHourTaken(hour: string): boolean {\n  return hour.endsWith('(Réservé)');\n}\nmarkTakenHours() {\n  this.rdvs.forEach(rdv => {\n    const hour = rdv.heure; // Supposons que 'heure' est une propriété de rendez-vous contenant l'heure du rendez-vous\n    const hourIndex = this.getHourIndex(hour);\n    if (hourIndex >= 0) {\n      this.hoursAvailable[hourIndex] = false;\n    }\n  });\n}\n\ngetHourIndex(hour: string): number {\n  // Convertir l'heure au format index (par exemple, '8H00' => 8)\n  // Vous devez implémenter cette logique selon le format de vos heures\n  return parseInt(hour.substring(0, 2), 10);\n}\n \n}\n\n\n@NgModule({\n  declarations: [WorkHoursModalComponent],\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule\n  ],\n  providers: [AngularFirestore],\n})\nexport class WorkHoursModalModule {}\n\nexport let selectedHour: string ;\nexport let selectedDate: string ;","<ion-header>\n  <ion-toolbar>\n    <ion-title>Personne</ion-title>\n    <ion-buttons slot=\"end\">\n      <ion-button (click)=\"openrdvModal()\">Suivant</ion-button>\n    </ion-buttons>\n    <ion-buttons slot=\"start\">\n      <ion-button (click)=\"close()\">Fermer</ion-button>\n    </ion-buttons>\n  </ion-toolbar>\n</ion-header>\n\n<ion-content>\n  <ion-select [(ngModel)]=\"selectedDate\">\n    <ion-select-option *ngFor=\"let date of generateDateList()\" [value]=\"date\">\n      {{ date | date: 'dd/MM/yyyy' }}\n    </ion-select-option>\n  </ion-select>\n\n  <div *ngFor=\"let hour of workHours ; let i = index\">\n    <ion-checkbox [(ngModel)]=\"hoursAvailable[i]\" (ionChange)=\"toggleSelection(hour, selectedDate)\"></ion-checkbox>\n    </div>\n\n  <div class=\"modal-buttons\">\n    <ion-button expand=\"block\" color=\"primary\" (click)=\"openrdvModal()\">Sélectionner une heure</ion-button>\n  </div>\n</ion-content>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}