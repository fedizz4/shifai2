{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/MacBook Air/Desktop/shifai1VV/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n// Import des modules nécessaires\nimport { initializeApp } from 'firebase/app';\nimport { getAnalytics } from 'firebase/analytics';\nimport { getAuth } from 'firebase/auth';\nimport { finalize } from 'rxjs/operators';\nimport { getStorage } from 'firebase/storage';\nimport { getFirestore } from 'firebase/firestore';\n// Configuration Firebase\nexport const firebaseConfig = {\n  apiKey: \"AIzaSyA7iKnEnxTdm9UdRnegNamwRDsLFESDk7s\",\n  authDomain: \"shifai-f46a0.firebaseapp.com\",\n  projectId: \"shifai-f46a0\",\n  storageBucket: \"shifai-f46a0.appspot.com\",\n  messagingSenderId: \"383597072570\",\n  appId: \"1:383597072570:web:870d9d280b22a1aa28b283\",\n  measurementId: \"G-Y2QLPH92NB\"\n};\n// Initialisation Firebase\nexport const app = initializeApp(firebaseConfig);\nexport const storage = getStorage(app, 'gs://shifai-f46a0.appspot.com');\nconst analytics = getAnalytics(app);\n// Objet d'authentification pour être utilisé dans d'autres fichiers\n// Fonction pour connecter l'utilisateur\n/* export async function loginUser(email: string, password: string) {\n  try {\n    \n    const userCredential = await signInWithEmailAndPassword(auth, email, password);\n    console.log('Utilisateur connecté :', userCredential.user);\n    return userCredential;\n  } catch (error) {\n    console.error(error);\n    throw error;\n  }\n}\n*/\nconst auth = getAuth(app);\nconst firestore = getFirestore(app);\nexport { auth, firestore };\nexport function AddUser(_x, _x2, _x3, _x4, _x5, _x6, _x7, _x8, _x9) {\n  return _AddUser.apply(this, arguments);\n}\nfunction _AddUser() {\n  _AddUser = _asyncToGenerator(function* (firestore, app, familyName, name, email, password, date, sexe, role) {\n    const user = {\n      familyName: familyName,\n      name: name,\n      email: email,\n      password: password,\n      date: date,\n      sexe: sexe,\n      role: role\n    };\n    try {\n      // Ajouter l'utilisateur à la collection \"inscrits\"\n      const userDocRef = yield firestore.collection('inscrits').add(user);\n      console.log('Utilisateur ajouté avec succès à Firebase.');\n      // Récupérer l'uid généré pour ce document\n      const uid = userDocRef.id;\n      // Mettre à jour le document avec l'uid\n      yield userDocRef.update({\n        uid: uid\n      });\n      console.log('UID ajouté avec succès à l\\'utilisateur.');\n      // Créer une sous-collection \"rdv\" pour l'utilisateur\n      yield userDocRef.collection('rdv').add({}); // Ajouter ici les données de rendez-vous si nécessaire\n      yield userDocRef.collection('documents').add({});\n      console.log('Sous-collection \"rdv\" créée avec succès pour l\\'utilisateur.');\n    } catch (error) {\n      console.error('Erreur lors de l\\'ajout de l\\'utilisateur et de la sous-collection \"rdv\" à Firebase :', error);\n      throw error; // Vous pouvez gérer l'erreur selon vos besoins\n    }\n  });\n  return _AddUser.apply(this, arguments);\n}\nexport function AddUserToAuth(_x10, _x11, _x12) {\n  return _AddUserToAuth.apply(this, arguments);\n}\nfunction _AddUserToAuth() {\n  _AddUserToAuth = _asyncToGenerator(function* (auth, email, password) {\n    try {\n      // Ajouter l'utilisateur à l'authentification Firebase\n      const userCredential = yield auth.createUserWithEmailAndPassword(email, password);\n      console.log('Utilisateur ajouté avec succès à l\\'authentification Firebase.');\n      return userCredential.user;\n    } catch (error) {\n      console.error('Erreur lors de l\\'ajout de l\\'utilisateur à l\\'authentification Firebase :', error);\n      throw error; // Vous pouvez gérer l'erreur selon vos besoins\n    }\n  });\n  return _AddUserToAuth.apply(this, arguments);\n}\nexport function AddMedicament(_x13, _x14, _x15, _x16, _x17, _x18) {\n  return _AddMedicament.apply(this, arguments);\n}\nfunction _AddMedicament() {\n  _AddMedicament = _asyncToGenerator(function* (firestore, app, nom, dosage, prises, uid) {\n    const medicament = {\n      nom: nom,\n      dosage: dosage,\n      prises: prises.map(prise => ({\n        label: prise.label,\n        checked: prise.checked\n      })),\n      uid: uid\n    };\n    try {\n      const medref = yield firestore.collection('medicaments').add(medicament);\n      const uid = medref.id;\n      // Mettre à jour le document avec l'uid\n      yield medref.update({\n        idd: uid\n      });\n    } catch (error) {\n      console.error('Erreur lors de l\\'ajout du médicament:', error);\n      throw error; // Renvoyer l'erreur pour que le gestionnaire puisse la gérer\n    }\n  });\n  return _AddMedicament.apply(this, arguments);\n}\nexport function ModifierMedicament(_x19, _x20, _x21, _x22, _x23) {\n  return _ModifierMedicament.apply(this, arguments);\n}\nfunction _ModifierMedicament() {\n  _ModifierMedicament = _asyncToGenerator(function* (firestore, medicamentID, nom, dosage, prises) {\n    const medicament = {\n      nom: nom,\n      dosage: dosage,\n      prises: prises.map(prise => ({\n        label: prise.label,\n        checked: prise.checked\n      }))\n    };\n    try {\n      yield firestore.collection('medicaments').doc(medicamentID).update(medicament);\n      console.log('Médicament mis à jour avec succès.');\n    } catch (error) {\n      console.error('Erreur lors de la modification du médicament:', error);\n      throw error; // Renvoyer l'erreur pour que le gestionnaire puisse la gérer\n    }\n  });\n  return _ModifierMedicament.apply(this, arguments);\n}\nexport function getMedicamentsByUid(_x24, _x25) {\n  return _getMedicamentsByUid.apply(this, arguments);\n}\nfunction _getMedicamentsByUid() {\n  _getMedicamentsByUid = _asyncToGenerator(function* (firestore, uid) {\n    try {\n      const snapshot = yield firestore.collection('medicaments').ref.where('uid', '==', uid).get();\n      // Convertir le snapshot en tableau de médicaments en utilisant l'interface\n      const medicaments = snapshot.docs.map(doc => {\n        const data = doc.data(); // Cast vers l'interface définie\n        return {\n          id: doc.id,\n          ...data\n        };\n      });\n      return medicaments;\n    } catch (error) {\n      console.error('Erreur lors de la récupération des médicaments :', error);\n      throw error;\n    }\n  });\n  return _getMedicamentsByUid.apply(this, arguments);\n}\nexport function getMedicamentsByid(_x26, _x27) {\n  return _getMedicamentsByid.apply(this, arguments);\n}\nfunction _getMedicamentsByid() {\n  _getMedicamentsByid = _asyncToGenerator(function* (firestore, id) {\n    try {\n      const snapshot = yield firestore.collection('medicaments').doc(id).ref.get();\n      // Convertir le snapshot en tableau de médicaments en utilisant l'interface\n      const medicaments = [snapshot.data()];\n      return medicaments[0];\n    } catch (error) {\n      console.error('Erreur lors de la récupération des médicaments :', error);\n      throw error;\n    }\n  });\n  return _getMedicamentsByid.apply(this, arguments);\n}\nexport function modifierMedicament(_x28, _x29, _x30) {\n  return _modifierMedicament.apply(this, arguments);\n}\nfunction _modifierMedicament() {\n  _modifierMedicament = _asyncToGenerator(function* (firestore, medicamentId, medicament) {\n    const medicamentDoc = firestore.collection(`medicaments`).doc(medicamentId);\n    medicamentDoc.update({\n      dosage: medicament.dosage,\n      nom: medicament.nom,\n      prises: medicament.prises\n    });\n  });\n  return _modifierMedicament.apply(this, arguments);\n}\nexport function supprimerMedicament(_x31, _x32) {\n  return _supprimerMedicament.apply(this, arguments);\n}\nfunction _supprimerMedicament() {\n  _supprimerMedicament = _asyncToGenerator(function* (firestore, medicamentId) {\n    firestore.collection('medicaments').doc(medicamentId).delete().then(() => {\n      console.log('Médicament supprimé avec succès!');\n      // Afficher un message de succès\n    }).catch(error => {\n      console.error('Erreur lors de la suppression du médicament :', error);\n      // Afficher un message d'erreur\n    });\n  });\n  return _supprimerMedicament.apply(this, arguments);\n}\nexport function getMedicaments(_x33) {\n  return _getMedicaments.apply(this, arguments);\n}\nfunction _getMedicaments() {\n  _getMedicaments = _asyncToGenerator(function* (firestore) {\n    try {\n      const snapshot = yield firestore.collection('med').ref.get();\n      // Convertir le snapshot en tableau de médicaments en utilisant l'interface\n      const medicaments = snapshot.docs.map(doc => {\n        const data = doc.data(); // Cast vers l'interface définie\n        return {\n          id: doc.id,\n          ...data\n        };\n      });\n      return medicaments;\n    } catch (error) {\n      console.error('Erreur lors de la récupération des médicaments :', error);\n      throw error;\n    }\n  });\n  return _getMedicaments.apply(this, arguments);\n}\nexport function getMedecinsByLocalisationAndSpecialite(_x34, _x35, _x36) {\n  return _getMedecinsByLocalisationAndSpecialite.apply(this, arguments);\n}\nfunction _getMedecinsByLocalisationAndSpecialite() {\n  _getMedecinsByLocalisationAndSpecialite = _asyncToGenerator(function* (firestore, localisation, specialite) {\n    try {\n      const snapshot = yield firestore.collection('medecin').ref.where('specialite', '==', specialite).where('etat', '==', localisation).get();\n      // Vérifier si snapshot est défini avant de l'utiliser\n      if (snapshot) {\n        // Convertir le snapshot en tableau de médecins\n        const medecins = snapshot.docs.map(doc => {\n          const data = doc.data();\n          return {\n            id: doc.id,\n            ...data\n          };\n        });\n        return medecins;\n      } else {\n        console.error('La requête n\\'a pas renvoyé de snapshot.');\n        return []; // Ou lancez une erreur appropriée selon vos besoins\n      }\n    } catch (error) {\n      console.error('Erreur lors de la récupération des médecins (firebase) :', error);\n      throw error;\n    }\n  });\n  return _getMedecinsByLocalisationAndSpecialite.apply(this, arguments);\n}\nexport function AddMedecin(_x37, _x38, _x39, _x40, _x41, _x42, _x43, _x44, _x45, _x46, _x47, _x48, _x49, _x50) {\n  return _AddMedecin.apply(this, arguments);\n}\nfunction _AddMedecin() {\n  _AddMedecin = _asyncToGenerator(function* (firestore, storage, nom, prenom, email, password, date, sexe, role, delegation, etat, specialite, telephone, file) {\n    let fileUrl = null;\n    if (file) {\n      const filePath = `gs://shifai-f46a0.appspot.com/${file.name}`; // Replace 'votre/chemin/dans/storage' with your storage path\n      const fileRef = storage.refFromURL(filePath);\n      const uploadTask = fileRef.put(file);\n      yield uploadTask.snapshotChanges().pipe(finalize( /*#__PURE__*/_asyncToGenerator(function* () {\n        fileUrl = yield fileRef.getDownloadURL().toPromise(); // Wait for the Observable to resolve\n      }))).toPromise(); // Wait for the upload task to complete\n    }\n    function AddMedecin(_x194, _x195, _x196, _x197, _x198, _x199, _x200, _x201, _x202, _x203, _x204, _x205, _x206) {\n      return _AddMedecin2.apply(this, arguments);\n    }\n    function _AddMedecin2() {\n      _AddMedecin2 = _asyncToGenerator(function* (firestore, nom, prenom, email, password, date, sexe, role, specialite, telephone, fileUrl, delegation, etat) {\n        try {\n          const medecin = {\n            nom: nom,\n            prenom: prenom,\n            email: email,\n            password: password,\n            date: date,\n            sexe: sexe,\n            role: role,\n            specialite: specialite,\n            telephone: telephone,\n            fileUrl: fileUrl,\n            delegation: delegation,\n            etat: etat\n          };\n          // Ajoutez le médecin à la collection \"admin\"\n          const medecinRef = yield firestore.collection('admin').add(medecin);\n          // Récupérez l'ID du médecin nouvellement ajouté\n          const medecinId = medecinRef.id;\n          yield medecinRef.update({\n            uid: medecinRef.id\n          });\n          // Créez automatiquement une sous-collection \"appointments\" pour ce médecin\n          yield firestore.collection('admin').doc(medecinId).collection('rdv').add({/* Données initiales des rendez-vous si nécessaire */});\n          console.log('Médecin ajouté avec succès à Firebase.');\n        } catch (error) {\n          console.error('Erreur lors de l\\'ajout du médecin à Firebase :', error);\n        }\n      });\n      return _AddMedecin2.apply(this, arguments);\n    }\n  });\n  return _AddMedecin.apply(this, arguments);\n}\nexport function getMedecinByUid(_x51, _x52) {\n  return _getMedecinByUid.apply(this, arguments);\n}\nfunction _getMedecinByUid() {\n  _getMedecinByUid = _asyncToGenerator(function* (firestore, uid) {\n    const snapshot = yield firestore.collection('medecin').ref.where('uid', '==', uid).get();\n    if (snapshot) {\n      // Convertir le snapshot en tableau de médecins\n      const medecins = snapshot.docs.map(doc => {\n        const data = doc.data();\n        return {\n          id: doc.id,\n          ...data\n        };\n      });\n      return medecins;\n    } else {\n      console.log('Aucun médecin trouvé pour cet UID :', uid);\n      return null; // Ou renvoyez un objet vide, selon vos besoins\n    }\n  });\n  return _getMedecinByUid.apply(this, arguments);\n}\nexport function getMedecinByUidA(_x53, _x54) {\n  return _getMedecinByUidA.apply(this, arguments);\n}\nfunction _getMedecinByUidA() {\n  _getMedecinByUidA = _asyncToGenerator(function* (firestore, uid) {\n    try {\n      const snapshot = yield firestore.collection('medecin').ref.where('uid', '==', uid).get();\n      if (!snapshot.empty) {\n        const doc = snapshot.docs[0]; // Récupérez le premier document du snapshot\n        const data = doc.data();\n        const medecin = {\n          ...data\n        };\n        return medecin;\n      } else {\n        console.log('Aucun médecin trouvé pour cet UID :', uid);\n        return null; // Ou renvoyez un objet vide, selon vos besoins\n      }\n    } catch (error) {\n      console.error('Erreur lors de la récupération du médecin :', error);\n      return null;\n    }\n  });\n  return _getMedecinByUidA.apply(this, arguments);\n}\nexport function loginMedecins(_x55, _x56, _x57) {\n  return _loginMedecins.apply(this, arguments);\n}\nfunction _loginMedecins() {\n  _loginMedecins = _asyncToGenerator(function* (firestore, email, password) {\n    try {\n      // Recherchez le médecin dans la base de données avec l'email fourni\n      const medecinCollection = firestore.collection('medecin').ref;\n      const medecinQuery = yield medecinCollection.where('email', '==', email).get();\n      if (medecinQuery.size === 1) {\n        // Vérifiez le mot de passe (vous pouvez utiliser une bibliothèque de hachage appropriée)\n        const medecinData = medecinQuery.docs[0].data();\n        const uid = medecinQuery.docs[0].id;\n        if (medecinData && medecinData.password === password) {\n          console.log('Connexion réussie en tant que médecin.');\n          return {\n            medecinData,\n            uid\n          }; // Authentification réussie, renvoie les informations du médecin et son UID\n        }\n      }\n      console.error('Identifiants invalides.');\n      return null; // Authentification échouée\n    } catch (error) {\n      console.error('Erreur lors de la connexion du médecin :', error);\n      throw error; // Vous pouvez gérer l'erreur ici ou la laisser remonter\n    }\n  });\n  return _loginMedecins.apply(this, arguments);\n}\nexport function loginsecretaire(_x58, _x59, _x60) {\n  return _loginsecretaire.apply(this, arguments);\n}\nfunction _loginsecretaire() {\n  _loginsecretaire = _asyncToGenerator(function* (firestore, email, password) {\n    try {\n      // Recherchez le médecin dans la base de données avec l'email fourni\n      const medecinCollection = firestore.collection('secretaire').ref;\n      const secQuery = yield medecinCollection.where('gmail', '==', email).get();\n      if (secQuery.size === 1) {\n        // Vérifiez le mot de passe (vous pouvez utiliser une bibliothèque de hachage appropriée)\n        const secretaireData = secQuery.docs[0].data();\n        const uid = secQuery.docs[0].id;\n        if (secretaireData && secretaireData.password === password) {\n          console.log('Connexion réussie en tant que médecin.');\n          medsec = secretaireData.medecinUid;\n          return {\n            secretaireData,\n            uid\n          }; // Authentification réussie, renvoie les informations du médecin et son UID\n        }\n      }\n      console.error('Identifiants invalides.');\n      return null; // Authentification échouée\n    } catch (error) {\n      console.error('Erreur lors de la connexion du médecin :', error);\n      throw error; // Vous pouvez gérer l'erreur ici ou la laisser remonter\n    }\n  });\n  return _loginsecretaire.apply(this, arguments);\n}\nexport let medsec;\nexport let secuid = {\n  uid: ''\n};\nexport const medecinUid = {\n  uid: ''\n};\nexport function ajouterSecretaire(_x61, _x62, _x63, _x64, _x65, _x66, _x67) {\n  return _ajouterSecretaire.apply(this, arguments);\n}\nfunction _ajouterSecretaire() {\n  _ajouterSecretaire = _asyncToGenerator(function* (firestore, nom, prenom, mail, numero, password, medecinUid) {\n    try {\n      // Ajoutez votre logique pour ajouter les données du formulaire à la collection 'secretaire'\n      // Utilisez firestore.collection('secretaire') pour accéder à la collection 'secretaire' dans Firebase\n      const secretaire = {\n        nom: nom,\n        prenom: prenom,\n        mail: mail,\n        numero: numero,\n        password: password,\n        medecinUid: medecinUid\n      };\n      const userDocRef = yield firestore.collection('secretaire').add(secretaire);\n      const uid = userDocRef.id;\n      // Mettre à jour le document avec l'uid\n      yield userDocRef.update({\n        uid: uid\n      });\n      console.log('Secrétaire ajoutée avec succès à la base de données.');\n    } catch (error) {\n      console.error('Erreur lors de l\\'ajout du secrétaire à la base de données :', error);\n      throw error; // Vous pouvez gérer l'erreur ici ou la laisser remonter\n    }\n  });\n  return _ajouterSecretaire.apply(this, arguments);\n}\nexport function getSecretaireByUid(_x68, _x69) {\n  return _getSecretaireByUid.apply(this, arguments);\n}\nfunction _getSecretaireByUid() {\n  _getSecretaireByUid = _asyncToGenerator(function* (firestore, uid) {\n    const snapshot1 = yield firestore.collection('secretaire').ref.where('medecinUid', '==', uid).get();\n    const secretaires = snapshot1.docs.map(doc => {\n      const data = doc.data();\n      return {\n        uid: doc.id,\n        nom: data.nom,\n        prenom: data.prenom,\n        gmail: data.gmail,\n        numero: data.numero,\n        password: data.password\n      };\n    });\n    return secretaires;\n  });\n  return _getSecretaireByUid.apply(this, arguments);\n}\nexport function getSecretaireBysecUid(_x70, _x71) {\n  return _getSecretaireBysecUid.apply(this, arguments);\n}\nfunction _getSecretaireBysecUid() {\n  _getSecretaireBysecUid = _asyncToGenerator(function* (firestore, uid) {\n    try {\n      // Récupérer le document du secrétaire par UID\n      const secretaireDoc = yield firestore.collection('secretaire').doc(uid).ref.get();\n      // Vérifier si le document existe\n      if (secretaireDoc) {\n        // Récupérer les données du secrétaire à partir du document\n        const secretaireData = secretaireDoc.data();\n        return secretaireData;\n      } else {\n        console.log('Aucun secrétaire trouvé avec l\\'UID spécifié.');\n        return null;\n      }\n    } catch (error) {\n      console.error('Erreur lors de la récupération du secrétaire :', error);\n      throw error; // Vous pouvez gérer l'erreur ici ou la laisser remonter\n    }\n  });\n  return _getSecretaireBysecUid.apply(this, arguments);\n}\nexport function modifierSecretaire(_x72, _x73, _x74, _x75, _x76, _x77, _x78, _x79) {\n  return _modifierSecretaire.apply(this, arguments);\n}\nfunction _modifierSecretaire() {\n  _modifierSecretaire = _asyncToGenerator(function* (firestore, secretaireID, nom, prenom, mail, numero, password, medecinUid) {\n    try {\n      // Mettre à jour les données du secrétaire dans la collection 'inscrits'\n      yield firestore.collection('secretaire').doc(secretaireID).update({\n        nom: nom,\n        prenom: prenom,\n        mail: mail,\n        numero: numero,\n        password: password,\n        medecinUid: medecinUid\n      });\n      console.log('Secrétaire mis à jour avec succès dans la base de données.');\n    } catch (error) {\n      console.error('Erreur lors de la mise à jour du secrétaire dans la base de données :', error);\n      throw error; // Vous pouvez gérer l'erreur ici ou la laisser remonter\n    }\n  });\n  return _modifierSecretaire.apply(this, arguments);\n}\nexport function supprimerSecretaire(_x80, _x81) {\n  return _supprimerSecretaire.apply(this, arguments);\n}\n// firebaseConfig.ts\nfunction _supprimerSecretaire() {\n  _supprimerSecretaire = _asyncToGenerator(function* (firestore, secretaireId) {\n    try {\n      // Référence au document du secrétaire à supprimer\n      const secretaireRef = firestore.collection('secretaire').doc(secretaireId);\n      // Supprimer le document du secrétaire\n      yield secretaireRef.delete();\n      console.log('Le secrétaire a été supprimé avec succès.');\n    } catch (error) {\n      console.error('Erreur lors de la suppression du secrétaire :', error);\n    }\n  });\n  return _supprimerSecretaire.apply(this, arguments);\n}\nexport function getPatientsByMedecinUid(_x82, _x83) {\n  return _getPatientsByMedecinUid.apply(this, arguments);\n}\nfunction _getPatientsByMedecinUid() {\n  _getPatientsByMedecinUid = _asyncToGenerator(function* (firestore, medecinUid) {\n    try {\n      const snapshot = yield firestore.collection('patient').ref.where('medecinUid', '==', medecinUid).get();\n      const patients = snapshot.docs.map(doc => {\n        const data = doc.data();\n        return {\n          uid: doc.id,\n          nom: data.nom,\n          prenom: data.prenom,\n          email: data.email,\n          telephone: data.telephone,\n          age: data.age,\n          sexe: data.sexe,\n          useruid: data.useruid,\n          groupeSanguin: data.groupeSanguin,\n          situationFamiliale: data.situationFamiliale,\n          profession: data.profession,\n          telephone2: data.telephone2,\n          numeroAssurance: data.numeroAssurance,\n          adresse: data.adresse,\n          note: data.note,\n          antecedentsMedicaux: data.antecedentsMedicaux,\n          antecedentsChirurgicaux: data.antecedentsChirurgicaux,\n          antecedentsFamiliaux: data.antecedentsFamiliaux,\n          autresAntecedents: data.autresAntecedents,\n          medicaments: data.medicaments\n        };\n      });\n      return patients;\n    } catch (error) {\n      console.error('Error fetching patients:', error);\n      throw error;\n    }\n  });\n  return _getPatientsByMedecinUid.apply(this, arguments);\n}\n;\nexport function getMedicamentByName(_x84, _x85) {\n  return _getMedicamentByName.apply(this, arguments);\n}\nfunction _getMedicamentByName() {\n  _getMedicamentByName = _asyncToGenerator(function* (firestore, nomMedicament) {\n    const snapshot = yield firestore.collection('med').ref.where('specialite', '==', nomMedicament).get();\n    if (snapshot) {\n      // Convertir le snapshot en tableau de médicaments\n      const medicaments = snapshot.docs.map(doc => {\n        const data = doc.data();\n        return {\n          id: doc.id,\n          ...data\n        };\n      });\n      return medicaments;\n    } else {\n      console.log('Aucun médicament trouvé avec ce nom :', nomMedicament);\n      return null; // Ou renvoyez un objet vide, selon vos besoins\n    }\n  });\n  return _getMedicamentByName.apply(this, arguments);\n}\nexport function getPersonByUid(_x86, _x87) {\n  return _getPersonByUid.apply(this, arguments);\n}\nfunction _getPersonByUid() {\n  _getPersonByUid = _asyncToGenerator(function* (firestore, uid) {\n    try {\n      const snapshot = yield firestore.collection('personne').ref.where('uidPersonne', '==', uid).get();\n      if (snapshot) {\n        // Convertir le snapshot en objet personne\n        const personne = snapshot.docs.map(doc => {\n          const data = doc.data();\n          return {\n            id: doc.id,\n            ...data\n          };\n        });\n        return personne;\n      } else {\n        console.log('Aucune personne trouvée avec cet UID :', uid);\n        return null; // Ou renvoyez un objet vide, selon vos besoins\n      }\n    } catch (error) {\n      console.error('Erreur lors de la récupération de la personne par UID:', error);\n      throw error; // Vous pouvez gérer l'erreur selon vos besoins\n    }\n  });\n  return _getPersonByUid.apply(this, arguments);\n}\nexport function savePersonData(_x88, _x89, _x90, _x91) {\n  return _savePersonData.apply(this, arguments);\n}\nfunction _savePersonData() {\n  _savePersonData = _asyncToGenerator(function* (firestore, nom, prenom, uidPersonne) {\n    try {\n      const personne = {\n        nom: nom,\n        prenom: prenom,\n        uidPersonne: uidPersonne\n      };\n      yield firestore.collection('personne').add(personne);\n      console.log('Données de la personne enregistrées avec succès dans Firebase.');\n    } catch (error) {\n      console.error('Erreur lors de l\\'enregistrement des données de la personne dans Firebase :', error);\n      throw error;\n    }\n  });\n  return _savePersonData.apply(this, arguments);\n}\nexport function AddRendezVous(_x92, _x93, _x94) {\n  return _AddRendezVous.apply(this, arguments);\n}\nfunction _AddRendezVous() {\n  _AddRendezVous = _asyncToGenerator(function* (firestore, medecinId, rendezVousData) {\n    try {\n      // Enregistrer le rendez-vous dans la sous-collection \"rdv\" pour le médecin spécifié\n      yield firestore.collection('medecin').doc(medecinId).collection('rdv').add(rendezVousData);\n      // Enregistrer le nom et le prénom du patient dans la liste des patients du médecin\n      console.log('Rendez-vous ajouté avec succès à Firebase.');\n    } catch (error) {\n      console.error('Erreur lors de l\\'ajout du rendez-vous à Firebase :', error);\n    }\n  });\n  return _AddRendezVous.apply(this, arguments);\n}\nexport function getRdvByPatientUid(_x95, _x96) {\n  return _getRdvByPatientUid.apply(this, arguments);\n}\nfunction _getRdvByPatientUid() {\n  _getRdvByPatientUid = _asyncToGenerator(function* (firestore, userUid) {\n    try {\n      const snapshot = yield firestore.collection('inscrits').doc(userUid).collection('rdv').ref.where('useruid', '==', userUid).get();\n      if (snapshot) {\n        // Convertir le snapshot en objet rendez-vous\n        const rdv = snapshot.docs.map(doc => {\n          const data = doc.data();\n          return {\n            id: doc.id,\n            ...data\n          };\n        });\n        return rdv;\n      } else {\n        console.log('Aucun rendez-vous trouvé avec cet UID de patient :', userUid);\n        return null; // Ou renvoyez un objet vide, selon vos besoins\n      }\n    } catch (error) {\n      console.error('Erreur lors de la récupération des rendez-vous par UID de patient:', error);\n      throw error; // Vous pouvez gérer l'erreur selon vos besoins\n    }\n  });\n  return _getRdvByPatientUid.apply(this, arguments);\n}\nexport function getRdvdateByPatientUid(_x97, _x98, _x99) {\n  return _getRdvdateByPatientUid.apply(this, arguments);\n}\nfunction _getRdvdateByPatientUid() {\n  _getRdvdateByPatientUid = _asyncToGenerator(function* (firestore, userUid, date) {\n    try {\n      const snapshot = yield firestore.collection('inscrits').doc(userUid).collection('rdv').ref.where('useruid', '==', userUid).where('date', '==', date).get();\n      if (snapshot) {\n        // Convertir le snapshot en objet rendez-vous\n        const rdv = snapshot.docs.map(doc => {\n          const data = doc.data();\n          return {\n            id: doc.id,\n            ...data\n          };\n        });\n        return rdv;\n      } else {\n        console.log('Aucun rendez-vous trouvé avec cet UID de patient :', userUid);\n        return null; // Ou renvoyez un objet vide, selon vos besoins\n      }\n    } catch (error) {\n      console.error('Erreur lors de la récupération des rendez-vous par UID de patient:', error);\n      throw error; // Vous pouvez gérer l'erreur selon vos besoins\n    }\n  });\n  return _getRdvdateByPatientUid.apply(this, arguments);\n}\nexport function AddRendezVousForUser(_x100, _x101, _x102) {\n  return _AddRendezVousForUser.apply(this, arguments);\n}\nfunction _AddRendezVousForUser() {\n  _AddRendezVousForUser = _asyncToGenerator(function* (firestore, userId, rendezVousData) {\n    try {\n      // Ajoutez le rendez-vous à la sous-collection \"rdv\" pour l'utilisateur spécifié\n      yield firestore.collection('inscrits').doc(userId).collection('rdv').add({\n        ...rendezVousData\n      });\n      console.log('Rendez-vous ajouté avec succès chez l\\'utilisateur dans Firebase.');\n    } catch (error) {\n      console.error('Erreur lors de l\\'ajout du rendez-vous chez l\\'utilisateur dans Firebase :', error);\n      throw error; // Vous pouvez gérer l'erreur selon vos besoins\n    }\n  });\n  return _AddRendezVousForUser.apply(this, arguments);\n}\nexport function loginUser(_x103, _x104, _x105) {\n  return _loginUser.apply(this, arguments);\n}\nfunction _loginUser() {\n  _loginUser = _asyncToGenerator(function* (firestore, email, password) {\n    try {\n      // Recherchez l'utilisateur dans la base de données avec l'email fourni\n      const userCollection = firestore.collection('inscrits').ref;\n      const userQuery = yield userCollection.where('email', '==', email).get();\n      if (userQuery.size === 1) {\n        // Vérifiez le mot de passe\n        const userData = userQuery.docs[0].data();\n        const uid = userQuery.docs[0].id;\n        if (userData && userData.password === password) {\n          console.log('Connexion réussie en tant qu\\'utilisateur.');\n          return {\n            userData,\n            uid\n          }; // Authentification réussie, renvoie les informations de l'utilisateur et son UID\n        }\n      }\n      console.error('Identifiants invalides.');\n      return null; // Authentification échouée\n    } catch (error) {\n      console.error('Erreur lors de la connexion de l\\'utilisateur :', error);\n      throw error; // Vous pouvez gérer l'erreur ici ou la laisser remonter\n    }\n  });\n  return _loginUser.apply(this, arguments);\n}\nexport function generateUniqueKey() {\n  return _generateUniqueKey.apply(this, arguments);\n}\nfunction _generateUniqueKey() {\n  _generateUniqueKey = _asyncToGenerator(function* () {\n    const timestamp = Date.now().toString(36); // Convertit le timestamp en base 36\n    const randomStr = Math.random().toString(36).substring(2, 10); // Génère une chaîne aléatoire en base 36\n    // Opérations mathématiques complexes pour générer une clé unique\n    const key = parseInt(timestamp + randomStr, 36).toString(36).toUpperCase();\n    return key;\n  });\n  return _generateUniqueKey.apply(this, arguments);\n}\nexport function getRdvByMedUid(_x106, _x107) {\n  return _getRdvByMedUid.apply(this, arguments);\n}\nfunction _getRdvByMedUid() {\n  _getRdvByMedUid = _asyncToGenerator(function* (firestore, userUid) {\n    try {\n      const snapshot = yield firestore.collection('medecin').doc(userUid).collection('rdv').ref.where('medecinuid', '==', userUid).get();\n      if (snapshot) {\n        // Convertir le snapshot en objet rendez-vous\n        const rdv = snapshot.docs.map(doc => {\n          const data = doc.data();\n          return {\n            id: doc.id,\n            ...data\n          };\n        });\n        return rdv;\n      } else {\n        console.log('Aucun rendez-vous trouvé avec cet UID de medecin :', userUid);\n        return null; // Ou renvoyez un objet vide, selon vos besoins\n      }\n    } catch (error) {\n      console.error('Erreur lors de la récupération des rendez-vous par UID de medecin:', error);\n      throw error; // Vous pouvez gérer l'erreur selon vos besoins\n    }\n  });\n  return _getRdvByMedUid.apply(this, arguments);\n}\nexport function deleteRendezVous(_x108, _x109, _x110, _x111) {\n  return _deleteRendezVous.apply(this, arguments);\n}\nfunction _deleteRendezVous() {\n  _deleteRendezVous = _asyncToGenerator(function* (firestore, medecinUid, rendezVous, excuse) {\n    try {\n      // Supprimer le rendez-vous du médecin avec l'excuse\n      const rendezVousSnapshot1 = yield firestore.collection('medecin').doc(rendezVous.medecinuid).collection('rdv').ref.where('key', '==', rendezVous.key).get();\n      rendezVousSnapshot1.forEach(doc => {\n        doc.ref.delete();\n      });\n      const rendezVousSnapshot3 = yield firestore.collection('medecin').doc(rendezVous.medecinuid).collection('rdv').ref.where('key', '==', rendezVous.key).get();\n      rendezVousSnapshot3.forEach(doc => {\n        doc.ref.set({\n          ...rendezVous,\n          statut: \"annule\",\n          excuse: excuse\n        });\n      });\n      // Mettre à jour le rendez-vous chez le patient avec l'excuse\n      const rendezVousSnapshot2 = yield firestore.collection('inscrits').doc(rendezVous.useruid).collection('rdv').ref.where('key', '==', rendezVous.key).get();\n      rendezVousSnapshot2.forEach(doc => {\n        doc.ref.set({\n          ...rendezVous,\n          statut: \"annule\",\n          excuse: excuse\n        });\n      });\n    } catch (error) {\n      console.error('Erreur lors de la suppression du rendez-vous:', error);\n      throw error;\n    }\n  });\n  return _deleteRendezVous.apply(this, arguments);\n}\nexport function deleteRendezVousR(_x112, _x113, _x114) {\n  return _deleteRendezVousR.apply(this, arguments);\n}\nfunction _deleteRendezVousR() {\n  _deleteRendezVousR = _asyncToGenerator(function* (firestore, medecinUid, rendezVous) {\n    try {\n      // Supprimer le rendez-vous du médecin avec l'excuse\n      const rendezVousSnapshot1 = yield firestore.collection('medecin').doc(rendezVous.medecinuid).collection('rdv').ref.where('key', '==', rendezVous.key).get();\n      rendezVousSnapshot1.forEach(doc => {\n        doc.ref.delete();\n      });\n      // Supprimer le rendez-vous chez le patient\n      const rendezVousSnapshot = yield firestore.collection('inscrits').doc(rendezVous.useruid).collection('rdv').ref.where('key', '==', rendezVous.key).get();\n      rendezVousSnapshot.forEach(doc => {\n        doc.ref.delete();\n      });\n      console.log('Rendez-vous supprimé avec succès.');\n    } catch (error) {\n      console.error('Erreur lors de la suppression du rendez-vous:', error);\n      throw error;\n    }\n  });\n  return _deleteRendezVousR.apply(this, arguments);\n}\nexport function savePatient(_x115, _x116, _x117, _x118, _x119, _x120, _x121, _x122, _x123, _x124, _x125, _x126, _x127, _x128, _x129, _x130, _x131, _x132, _x133, _x134, _x135) {\n  return _savePatient.apply(this, arguments);\n}\nfunction _savePatient() {\n  _savePatient = _asyncToGenerator(function* (firestore, adresse, age, antecedentsChirurgicaux, antecedentsFamiliaux, antecedentsMedicaux, autresAntecedents, email, medicaments, groupeSanguin, nom, note, numeroAssurance, prenom, profession, sexe, situationFamiliale, telephone, telephone2, uid, medecinUid) {\n    try {\n      // Création de l'objet patientData avec les données passées en paramètres\n      const patientData = {\n        adresse,\n        age,\n        antecedentsChirurgicaux,\n        antecedentsFamiliaux,\n        antecedentsMedicaux,\n        autresAntecedents,\n        email,\n        medicaments,\n        groupeSanguin,\n        nom,\n        note,\n        numeroAssurance,\n        prenom,\n        profession,\n        sexe,\n        situationFamiliale,\n        telephone,\n        telephone2,\n        uid\n      };\n      // Référence au document du patient dans la collection des patients du médecin\n      const patientRef = firestore.collection('medecin').doc(medecinUid).collection('patients').doc(uid);\n      // Vérifie si le patient existe déjà avant de le mettre à jour\n      const patientSnapshot = yield patientRef.get();\n      if (patientSnapshot) {\n        yield patientRef.update(patientData); // Met à jour les données du patient existant\n        console.log('Patient mis à jour avec succès.');\n      } else {\n        console.log('Le patient n\\'existe pas chez ce médecin.');\n      }\n    } catch (error) {\n      console.error('Erreur lors de la mise à jour du patient chez le médecin :', error);\n      throw error;\n    }\n  });\n  return _savePatient.apply(this, arguments);\n}\nfunction checkPatientExistence(_x136, _x137, _x138) {\n  return _checkPatientExistence.apply(this, arguments);\n} // Fonction pour ajouter un patient avec les champs nom et prénom remplis\nfunction _checkPatientExistence() {\n  _checkPatientExistence = _asyncToGenerator(function* (firestore, medecinUid, patientData) {\n    try {\n      const patientsSnapshot = yield firestore.collection('medecin').doc(medecinUid).collection('patients').ref.where('nom', '==', patientData.nom).where('prenom', '==', patientData.prenom).get();\n      return !patientsSnapshot.empty;\n    } catch (error) {\n      console.error('Erreur lors de la vérification de l\\'existence du patient :', error);\n      throw error;\n    }\n  });\n  return _checkPatientExistence.apply(this, arguments);\n}\nexport function AddPatientWithNomPrenom(_x139, _x140, _x141) {\n  return _AddPatientWithNomPrenom.apply(this, arguments);\n}\nfunction _AddPatientWithNomPrenom() {\n  _AddPatientWithNomPrenom = _asyncToGenerator(function* (firestore, medecinId, rendezVousData) {\n    try {\n      // Vérifiez si la collection patients existe, sinon la crée\n      const medecinRef = firestore.collection('medecin').doc(medecinId);\n      const medecinSnapshot = yield medecinRef.get().toPromise();\n      // Vérifiez si le médecin existe avant d'ajouter le patient\n      if (medecinSnapshot && medecinSnapshot.exists) {\n        // Vérifiez si un patient avec le même nom et prénom existe déjà dans la collection\n        const patientSnapshot = yield medecinRef.collection('patients').ref.where('nom', '==', rendezVousData.nom).where('prenom', '==', rendezVousData.prenom).get();\n        if (!patientSnapshot.empty) {\n          console.error('Un patient avec le même nom et prénom existe déjà.');\n          return; // Arrêtez l'exécution de la fonction s'il existe déjà un patient avec ces informations\n        }\n        // Ajoutez le patient avec les champs nom et prénom remplis\n        const patientRef = yield medecinRef.collection('patients').add({\n          nom: rendezVousData.nom,\n          prenom: rendezVousData.prenom,\n          age: '',\n          adresse: '',\n          telephone: '',\n          uid: '',\n          useruid: rendezVousData.useruid\n        });\n        // Mettez à jour le champ uid avec l'UID généré pour le patient\n        yield patientRef.update({\n          uid: patientRef.id\n        });\n        console.log('Patient ajouté avec succès à Firebase.', patientRef, patientRef.id);\n        try {\n          const patientConsultationRef = firestore.collection('medecin').doc(medecinId).collection('patients').doc(patientRef.id);\n          // Créer un objet de consultation avec la date et éventuellement les détails\n          const consultationData = {\n            date: rendezVousData.date,\n            details: '' // Vous pouvez fournir les détails de la consultation ici\n          };\n          // Ajouter la nouvelle consultation dans la collection 'consultations' du patient\n          yield patientConsultationRef.collection('consultations').add(consultationData);\n          console.log('Nouvelle consultation ajoutée avec succès.');\n        } catch (error) {\n          console.error('Erreur lors de l\\'ajout de la consultation :', error);\n        }\n      } else {\n        console.error('Le médecin n\\'existe pas. Impossible d\\'ajouter le patient.');\n      }\n    } catch (error) {\n      console.error('Erreur lors de l\\'ajout du patient à Firebase :', error);\n    }\n  });\n  return _AddPatientWithNomPrenom.apply(this, arguments);\n}\nexport function getPatientsByMedUid(_x142, _x143) {\n  return _getPatientsByMedUid.apply(this, arguments);\n}\nfunction _getPatientsByMedUid() {\n  _getPatientsByMedUid = _asyncToGenerator(function* (firestore, medecinId) {\n    try {\n      // Récupérer la référence du médecin\n      const medecinRef = firestore.collection('medecin').doc(medecinId);\n      // Récupérer la liste des patients du médecin\n      const patientsSnapshot = yield medecinRef.collection('patients').get().toPromise();\n      // Initialiser un tableau pour stocker les patients\n      const patients = [];\n      // Vérifier si la snapshot des patients contient des documents\n      if (patientsSnapshot) {\n        // Parcourir les documents de la collection patients\n        patientsSnapshot.forEach(doc => {\n          // Récupérer les données du patient\n          const patientData = doc.data();\n          // Ajouter un uid au patient (peut être n'importe quel identifiant unique)\n          patientData.uid = doc.id;\n          // Ajouter les données du patient au tableau\n          patients.push(patientData);\n        });\n      }\n      // Retourner le tableau de patients\n      return patients;\n    } catch (error) {\n      console.error('Erreur lors de la récupération des patients:', error);\n      return []; // Retourner un tableau vide en cas d'erreur\n    }\n  });\n  return _getPatientsByMedUid.apply(this, arguments);\n}\nexport function getConsultationsForPatient(_x144, _x145, _x146) {\n  return _getConsultationsForPatient.apply(this, arguments);\n}\nfunction _getConsultationsForPatient() {\n  _getConsultationsForPatient = _asyncToGenerator(function* (firestore, medecinUid, patientUid) {\n    try {\n      const consultations = [];\n      // Récupérer les consultations du patient en utilisant son UID\n      const snapshot = yield firestore.collection('medecin').doc(medecinUid).collection('patients').doc(patientUid).collection('consultations').get().toPromise();\n      if (snapshot) snapshot.forEach(doc => {\n        const consultation = doc.data();\n        consultations.push(consultation);\n      });\n      return consultations;\n    } catch (error) {\n      console.error('Erreur lors de la récupération des consultations pour le patient avec UID', patientUid, 'du médecin avec UID', medecinUid, ':', error);\n      return [];\n    }\n  });\n  return _getConsultationsForPatient.apply(this, arguments);\n}\nexport function getConsultations(_x147, _x148, _x149) {\n  return _getConsultations.apply(this, arguments);\n}\nfunction _getConsultations() {\n  _getConsultations = _asyncToGenerator(function* (firestore, medecinUid, patientUid) {\n    try {\n      const snapshot = yield firestore.collection('medecin').doc(medecinUid).collection('patients').doc(patientUid).collection('consultations').ref.get();\n      if (snapshot) {\n        // Convertir le snapshot en objet de consultations\n        const consultations = snapshot.docs.map(doc => {\n          const data = doc.data();\n          return {\n            id: doc.id,\n            ...data\n          };\n        });\n        return consultations;\n      } else {\n        console.log('Aucune consultation trouvée avec cet UID de patient et de médecin :', patientUid, medecinUid);\n        return null;\n      }\n    } catch (error) {\n      console.error('Erreur lors de la récupération des consultations par UID de patient et de médecin :', error);\n      throw error; // Vous pouvez gérer l'erreur selon vos besoins\n    }\n  });\n  return _getConsultations.apply(this, arguments);\n}\nexport function modifierSauvegarderConsultation(_x150, _x151, _x152, _x153, _x154) {\n  return _modifierSauvegarderConsultation.apply(this, arguments);\n}\nfunction _modifierSauvegarderConsultation() {\n  _modifierSauvegarderConsultation = _asyncToGenerator(function* (firestore, medecinUid, patientUid, date, newDetails) {\n    try {\n      const consultationsRef = firestore.collection('medecin').doc(medecinUid).collection('patients').doc(patientUid).collection('consultations').ref;\n      // Récupérer la consultation à modifier\n      const snapshot = yield consultationsRef.where('date', '==', date).get();\n      snapshot.forEach(doc => {\n        const consultationData = doc.data();\n        // Modifier les détails de la consultation si la date correspond\n        consultationsRef.doc(doc.id).update({\n          details: newDetails\n        });\n      });\n      console.log('Détails de la consultation mis à jour avec succès.');\n    } catch (error) {\n      console.error('Erreur lors de la modification et de la sauvegarde des détails de la consultation :', error);\n      throw error; // Vous pouvez gérer l'erreur selon vos besoins\n    }\n  });\n  return _modifierSauvegarderConsultation.apply(this, arguments);\n}\nexport function ajouterConsultation(_x155, _x156, _x157, _x158) {\n  return _ajouterConsultation.apply(this, arguments);\n}\nfunction _ajouterConsultation() {\n  _ajouterConsultation = _asyncToGenerator(function* (firestore, medecinId, patientUid, consultationData) {\n    try {\n      const patientConsultationRef = firestore.collection('medecin').doc(medecinId).collection('patients').doc(patientUid);\n      // Ajouter la nouvelle consultation dans la collection 'consultations' du patient\n      yield patientConsultationRef.collection('consultations').add(consultationData);\n      console.log('Nouvelle consultation ajoutée avec succès.');\n    } catch (error) {\n      console.error('Erreur lors de l\\'ajout de la consultation :', error);\n      throw error; // Gérer l'erreur selon vos besoins\n    }\n  });\n  return _ajouterConsultation.apply(this, arguments);\n}\nexport function chercherPatient(_x159, _x160, _x161, _x162, _x163) {\n  return _chercherPatient.apply(this, arguments);\n}\nfunction _chercherPatient() {\n  _chercherPatient = _asyncToGenerator(function* (firestore, medecinId, nom, prenom, email) {\n    try {\n      const patientsSnapshot = yield firestore.collection('medecin').doc(medecinId).collection('patients').ref.where('nom', '==', nom).where('prenom', '==', prenom).where('email', '==', email) // Ajoutez le critère de recherche pour l'e-mail\n      .get();\n      if (!patientsSnapshot.empty) {\n        // Retournez l'UID du premier patient trouvé\n        return patientsSnapshot.docs[0].id;\n      } else {\n        // Aucun patient trouvé avec ce nom, prénom et e-mail\n        return null;\n      }\n    } catch (error) {\n      console.error('Erreur lors de la recherche du patient :', error);\n      return null;\n    }\n  });\n  return _chercherPatient.apply(this, arguments);\n}\nexport function getPatientsUIDByMedecinId(_x164, _x165) {\n  return _getPatientsUIDByMedecinId.apply(this, arguments);\n}\nfunction _getPatientsUIDByMedecinId() {\n  _getPatientsUIDByMedecinId = _asyncToGenerator(function* (firestore, medecinId) {\n    try {\n      const patientsSnapshot = yield firestore.collection('medecin').doc(medecinId).collection('patients').get().toPromise();\n      if (patientsSnapshot) {\n        // Retournez les UID des patients\n        return patientsSnapshot.docs.map(doc => doc.id);\n      } else {\n        // Aucun patient trouvé\n        return [];\n      }\n    } catch (error) {\n      console.error('Erreur lors de la récupération des UID des patients :', error);\n      return [];\n    }\n  });\n  return _getPatientsUIDByMedecinId.apply(this, arguments);\n}\nexport function checkExistingPatient(_x166, _x167, _x168, _x169) {\n  return _checkExistingPatient.apply(this, arguments);\n}\nfunction _checkExistingPatient() {\n  _checkExistingPatient = _asyncToGenerator(function* (firestore, medecinId, nom, prenom) {\n    try {\n      const patientsSnapshot = yield firestore.collection('medecin').doc(medecinId).collection('patients').ref.where('nom', '==', nom).where('prenom', '==', prenom).get();\n      if (!patientsSnapshot.empty) {\n        // Un patient avec le même nom et prénom existe déjà\n        const patientDoc = patientsSnapshot.docs[0];\n        return patientDoc.id;\n      } else {\n        // Aucun patient trouvé avec ce nom et prénom\n        return null;\n      }\n    } catch (error) {\n      console.error('Erreur lors de la vérification de l\\'existence du patient :', error);\n      return null;\n    }\n  });\n  return _checkExistingPatient.apply(this, arguments);\n}\nexport function getFichePatient(_x170, _x171, _x172) {\n  return _getFichePatient.apply(this, arguments);\n}\nfunction _getFichePatient() {\n  _getFichePatient = _asyncToGenerator(function* (firestore, medecinUid, patientUid) {\n    try {\n      const medecinRef = firestore.collection('medecin').doc(medecinUid);\n      const patientDoc = yield medecinRef.collection('patients').doc(patientUid).get().toPromise();\n      if (!patientDoc) {\n        console.log('Fiche patient non trouvée.');\n        return null; // Retourner null si la fiche patient n'est pas trouvée\n      }\n      const patientData = patientDoc.data();\n      return patientData;\n    } catch (error) {\n      console.error('Erreur lors de la récupération de la fiche patient :', error);\n      throw error;\n    }\n  });\n  return _getFichePatient.apply(this, arguments);\n}\nexport function getPatientByUid(_x173, _x174, _x175) {\n  return _getPatientByUid.apply(this, arguments);\n}\nfunction _getPatientByUid() {\n  _getPatientByUid = _asyncToGenerator(function* (firestore, medecinUid, patientUid) {\n    try {\n      const patientRef = firestore.collection('medecin').doc(medecinUid).collection('patients').doc(patientUid);\n      const patientDoc = yield patientRef.ref.get();\n      if (patientDoc.exists) {\n        const patientData = patientDoc.data();\n        return patientData;\n      } else {\n        console.log('Le patient n\\'existe pas.');\n        return null;\n      }\n    } catch (error) {\n      console.error('Erreur lors de la récupération du patient par UID :', error);\n      return null;\n    }\n  });\n  return _getPatientByUid.apply(this, arguments);\n}\nexport function getDocuments(_x176, _x177, _x178) {\n  return _getDocuments.apply(this, arguments);\n}\nfunction _getDocuments() {\n  _getDocuments = _asyncToGenerator(function* (firestore, medecinUid, patientUid) {\n    try {\n      const patientRef = firestore.collection('medecin').doc(medecinUid).collection('documents');\n      const documentsSnapshot = yield patientRef.ref.where('patientUid', '==', patientUid).get();\n      if (!documentsSnapshot.empty) {\n        const documents = [];\n        documentsSnapshot.forEach(doc => {\n          const data = doc.data();\n          documents.push(data);\n        });\n        return documents;\n      } else {\n        console.log('Aucun document trouvé pour ce patient.');\n        return [];\n      }\n    } catch (error) {\n      console.error('Erreur lors de la récupération des documents :', error);\n      throw error;\n    }\n  });\n  return _getDocuments.apply(this, arguments);\n}\nexport function getConsultationsmed(_x179, _x180) {\n  return _getConsultationsmed.apply(this, arguments);\n}\nfunction _getConsultationsmed() {\n  _getConsultationsmed = _asyncToGenerator(function* (firestore, medecinUid) {\n    try {\n      const snapshot = yield firestore.collection('medecin').doc(medecinUid).collection('consultations').ref.get();\n      if (snapshot) {\n        // Convertir le snapshot en objet de consultations\n        const consultations = snapshot.docs.map(doc => {\n          const data = doc.data();\n          return {\n            id: doc.id,\n            ...data\n          };\n        });\n        return consultations;\n      } else {\n        console.log('Aucune consultation trouvée pour ce médecin.');\n        return [];\n      }\n    } catch (error) {\n      console.error('Erreur lors de la récupération des consultations du médecin :', error);\n      throw error; // Vous pouvez gérer l'erreur selon vos besoins\n    }\n  });\n  return _getConsultationsmed.apply(this, arguments);\n}\nexport function getConsultationByDateAndUidPat(_x181, _x182, _x183, _x184) {\n  return _getConsultationByDateAndUidPat.apply(this, arguments);\n}\nfunction _getConsultationByDateAndUidPat() {\n  _getConsultationByDateAndUidPat = _asyncToGenerator(function* (firestore, medecinUid, patientUid, consultationDate) {\n    try {\n      const snapshot = yield firestore.collection('medecin').doc(medecinUid).collection('patients').doc(patientUid).collection('consultations').ref.where('date', '==', consultationDate).get();\n      if (snapshot.empty) {\n        console.log('Aucune consultation trouvée avec cette date, UID de patient et de médecin :', consultationDate, patientUid, medecinUid);\n        return null;\n      }\n      if (snapshot) {\n        // Convertir le snapshot en objet de consultation\n        const consultations = snapshot.docs.map(doc => {\n          const data = doc.data();\n          return {\n            id: doc.id,\n            ...data\n          };\n        });\n        const consultation = consultations[0];\n        return consultation;\n      } else {\n        return null;\n      }\n    } catch (error) {\n      console.error('Erreur lors de la récupération de la consultation par date, UID de patient et de médecin :', error);\n      throw error; // Vous pouvez gérer l'erreur selon vos besoins\n    }\n  });\n  return _getConsultationByDateAndUidPat.apply(this, arguments);\n}\nexport function getDocumentsByMedecin(_x185, _x186) {\n  return _getDocumentsByMedecin.apply(this, arguments);\n}\nfunction _getDocumentsByMedecin() {\n  _getDocumentsByMedecin = _asyncToGenerator(function* (firestore, medecinId) {\n    try {\n      // Récupérer la liste des patients du médecin\n      const patients = yield getPatientsByMedUid(firestore, medecinId);\n      // Initialiser un tableau pour stocker les documents\n      const documents = [];\n      // Parcourir les patients\n      for (const patient of patients) {\n        // Récupérer les documents pour le patient\n        const patientDocuments = yield getDocuments(firestore, medecinId, patient.uid);\n        // Ajouter les documents du patient au tableau\n        documents.push(...patientDocuments);\n      }\n      // Retourner le tableau de documents\n      return documents;\n    } catch (error) {\n      console.error('Erreur lors de la récupération des documents du médecin:', error);\n      return []; // Retourner un tableau vide en cas d'erreur\n    }\n  });\n  return _getDocumentsByMedecin.apply(this, arguments);\n}\nexport function AddMedecinforpatient(_x187, _x188, _x189) {\n  return _AddMedecinforpatient.apply(this, arguments);\n}\nfunction _AddMedecinforpatient() {\n  _AddMedecinforpatient = _asyncToGenerator(function* (firestore, patientuid, medecin) {\n    const medecinA = {\n      nom: medecin.nom,\n      prenom: medecin.prenom,\n      specialite: medecin.specialite,\n      medecin: medecin.uid,\n      patientuid: patientuid\n    };\n    try {\n      const medref = yield firestore.collection('medecinpatient').add(medecinA);\n      const uid = medref.id;\n      // Mettre à jour le document avec l'uid\n      yield medref.update({\n        idd: uid\n      });\n    } catch (error) {\n      console.error('Erreur lors de l\\'ajout du medecin:', error);\n      throw error; // Renvoyer l'erreur pour que le gestionnaire puisse la gérer\n    }\n  });\n  return _AddMedecinforpatient.apply(this, arguments);\n}\nexport function getMedecinforPatient(_x190, _x191) {\n  return _getMedecinforPatient.apply(this, arguments);\n}\nfunction _getMedecinforPatient() {\n  _getMedecinforPatient = _asyncToGenerator(function* (firestore, patientUid) {\n    try {\n      const medecinPatientRef = firestore.collection('medecinpatient');\n      const medecinPatientSnapshot = yield medecinPatientRef.ref.where('patientuid', '==', patientUid).get();\n      if (!medecinPatientSnapshot.empty) {\n        const medecins = [];\n        medecinPatientSnapshot.forEach(doc => {\n          const medecinData = doc.data();\n          medecins.push(medecinData);\n        });\n        return medecins;\n      } else {\n        console.log('Aucun médecin trouvé pour ce patient.');\n        return [];\n      }\n    } catch (error) {\n      console.error('Erreur lors de la récupération des médecins pour le patient :', error);\n      throw error;\n    }\n  });\n  return _getMedecinforPatient.apply(this, arguments);\n}\nexport function getDocumentsforpatient(_x192, _x193) {\n  return _getDocumentsforpatient.apply(this, arguments);\n}\nfunction _getDocumentsforpatient() {\n  _getDocumentsforpatient = _asyncToGenerator(function* (firestore, patientUid) {\n    try {\n      const patientRef = firestore.collection('documents');\n      const documentsSnapshot = yield patientRef.ref.where('useruid', '==', patientUid).get();\n      if (!documentsSnapshot.empty) {\n        const documents = [];\n        documentsSnapshot.forEach(doc => {\n          const data = doc.data();\n          documents.push(data);\n        });\n        return documents;\n      } else {\n        console.log('Aucun document trouvé pour ce patient.');\n        return [];\n      }\n    } catch (error) {\n      console.error('Erreur lors de la récupération des documents :', error);\n      throw error;\n    }\n  });\n  return _getDocumentsforpatient.apply(this, arguments);\n}","map":{"version":3,"names":["initializeApp","getAnalytics","getAuth","finalize","getStorage","getFirestore","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","app","storage","analytics","auth","firestore","AddUser","_x","_x2","_x3","_x4","_x5","_x6","_x7","_x8","_x9","_AddUser","apply","arguments","_asyncToGenerator","familyName","name","email","password","date","sexe","role","user","userDocRef","collection","add","console","log","uid","id","update","error","AddUserToAuth","_x10","_x11","_x12","_AddUserToAuth","userCredential","createUserWithEmailAndPassword","AddMedicament","_x13","_x14","_x15","_x16","_x17","_x18","_AddMedicament","nom","dosage","prises","medicament","map","prise","label","checked","medref","idd","ModifierMedicament","_x19","_x20","_x21","_x22","_x23","_ModifierMedicament","medicamentID","doc","getMedicamentsByUid","_x24","_x25","_getMedicamentsByUid","snapshot","ref","where","get","medicaments","docs","data","getMedicamentsByid","_x26","_x27","_getMedicamentsByid","modifierMedicament","_x28","_x29","_x30","_modifierMedicament","medicamentId","medicamentDoc","supprimerMedicament","_x31","_x32","_supprimerMedicament","delete","then","catch","getMedicaments","_x33","_getMedicaments","getMedecinsByLocalisationAndSpecialite","_x34","_x35","_x36","_getMedecinsByLocalisationAndSpecialite","localisation","specialite","medecins","AddMedecin","_x37","_x38","_x39","_x40","_x41","_x42","_x43","_x44","_x45","_x46","_x47","_x48","_x49","_x50","_AddMedecin","prenom","delegation","etat","telephone","file","fileUrl","filePath","fileRef","refFromURL","uploadTask","put","snapshotChanges","pipe","getDownloadURL","toPromise","_x194","_x195","_x196","_x197","_x198","_x199","_x200","_x201","_x202","_x203","_x204","_x205","_x206","_AddMedecin2","medecin","medecinRef","medecinId","getMedecinByUid","_x51","_x52","_getMedecinByUid","getMedecinByUidA","_x53","_x54","_getMedecinByUidA","empty","loginMedecins","_x55","_x56","_x57","_loginMedecins","medecinCollection","medecinQuery","size","medecinData","loginsecretaire","_x58","_x59","_x60","_loginsecretaire","secQuery","secretaireData","medsec","medecinUid","secuid","ajouterSecretaire","_x61","_x62","_x63","_x64","_x65","_x66","_x67","_ajouterSecretaire","mail","numero","secretaire","getSecretaireByUid","_x68","_x69","_getSecretaireByUid","snapshot1","secretaires","gmail","getSecretaireBysecUid","_x70","_x71","_getSecretaireBysecUid","secretaireDoc","modifierSecretaire","_x72","_x73","_x74","_x75","_x76","_x77","_x78","_x79","_modifierSecretaire","secretaireID","supprimerSecretaire","_x80","_x81","_supprimerSecretaire","secretaireId","secretaireRef","getPatientsByMedecinUid","_x82","_x83","_getPatientsByMedecinUid","patients","age","useruid","groupeSanguin","situationFamiliale","profession","telephone2","numeroAssurance","adresse","note","antecedentsMedicaux","antecedentsChirurgicaux","antecedentsFamiliaux","autresAntecedents","getMedicamentByName","_x84","_x85","_getMedicamentByName","nomMedicament","getPersonByUid","_x86","_x87","_getPersonByUid","personne","savePersonData","_x88","_x89","_x90","_x91","_savePersonData","uidPersonne","AddRendezVous","_x92","_x93","_x94","_AddRendezVous","rendezVousData","getRdvByPatientUid","_x95","_x96","_getRdvByPatientUid","userUid","rdv","getRdvdateByPatientUid","_x97","_x98","_x99","_getRdvdateByPatientUid","AddRendezVousForUser","_x100","_x101","_x102","_AddRendezVousForUser","userId","loginUser","_x103","_x104","_x105","_loginUser","userCollection","userQuery","userData","generateUniqueKey","_generateUniqueKey","timestamp","Date","now","toString","randomStr","Math","random","substring","key","parseInt","toUpperCase","getRdvByMedUid","_x106","_x107","_getRdvByMedUid","deleteRendezVous","_x108","_x109","_x110","_x111","_deleteRendezVous","rendezVous","excuse","rendezVousSnapshot1","medecinuid","forEach","rendezVousSnapshot3","set","statut","rendezVousSnapshot2","deleteRendezVousR","_x112","_x113","_x114","_deleteRendezVousR","rendezVousSnapshot","savePatient","_x115","_x116","_x117","_x118","_x119","_x120","_x121","_x122","_x123","_x124","_x125","_x126","_x127","_x128","_x129","_x130","_x131","_x132","_x133","_x134","_x135","_savePatient","patientData","patientRef","patientSnapshot","checkPatientExistence","_x136","_x137","_x138","_checkPatientExistence","patientsSnapshot","AddPatientWithNomPrenom","_x139","_x140","_x141","_AddPatientWithNomPrenom","medecinSnapshot","exists","patientConsultationRef","consultationData","details","getPatientsByMedUid","_x142","_x143","_getPatientsByMedUid","push","getConsultationsForPatient","_x144","_x145","_x146","_getConsultationsForPatient","patientUid","consultations","consultation","getConsultations","_x147","_x148","_x149","_getConsultations","modifierSauvegarderConsultation","_x150","_x151","_x152","_x153","_x154","_modifierSauvegarderConsultation","newDetails","consultationsRef","ajouterConsultation","_x155","_x156","_x157","_x158","_ajouterConsultation","chercherPatient","_x159","_x160","_x161","_x162","_x163","_chercherPatient","getPatientsUIDByMedecinId","_x164","_x165","_getPatientsUIDByMedecinId","checkExistingPatient","_x166","_x167","_x168","_x169","_checkExistingPatient","patientDoc","getFichePatient","_x170","_x171","_x172","_getFichePatient","getPatientByUid","_x173","_x174","_x175","_getPatientByUid","getDocuments","_x176","_x177","_x178","_getDocuments","documentsSnapshot","documents","getConsultationsmed","_x179","_x180","_getConsultationsmed","getConsultationByDateAndUidPat","_x181","_x182","_x183","_x184","_getConsultationByDateAndUidPat","consultationDate","getDocumentsByMedecin","_x185","_x186","_getDocumentsByMedecin","patient","patientDocuments","AddMedecinforpatient","_x187","_x188","_x189","_AddMedecinforpatient","patientuid","medecinA","getMedecinforPatient","_x190","_x191","_getMedecinforPatient","medecinPatientRef","medecinPatientSnapshot","getDocumentsforpatient","_x192","_x193","_getDocumentsforpatient"],"sources":["C:\\Users\\MacBook Air\\Desktop\\shifai1VV\\src\\firebaseConfig.ts"],"sourcesContent":["// Import des modules nécessaires\r\nimport { initializeApp, FirebaseApp } from 'firebase/app';\r\nimport { getAnalytics } from 'firebase/analytics';\r\nimport { getAuth, signInWithEmailAndPassword, Auth } from 'firebase/auth';\r\nimport { AngularFirestore, CollectionReference, DocumentData, DocumentSnapshot, QuerySnapshot } from '@angular/fire/compat/firestore';\r\nimport { Observable, map } from 'rxjs';\r\nimport { AngularFireStorage } from '@angular/fire/compat/storage';\r\nimport { finalize } from 'rxjs/operators';\r\nimport { getStorage } from 'firebase/storage';\r\nimport { AngularFireAuth } from '@angular/fire/compat/auth';\r\nimport { QueryDocumentSnapshot, getFirestore } from 'firebase/firestore';\r\nimport { p } from './app/patient/patient.page';\r\nimport { consultationdate } from './app/consultationliste/consultationliste.page';\r\n\r\n\r\n\r\n// Configuration Firebase\r\n\r\nexport const firebaseConfig = {\r\n  apiKey: \"AIzaSyA7iKnEnxTdm9UdRnegNamwRDsLFESDk7s\",\r\n  authDomain: \"shifai-f46a0.firebaseapp.com\",\r\n  projectId: \"shifai-f46a0\",\r\n  storageBucket: \"shifai-f46a0.appspot.com\",\r\n  messagingSenderId: \"383597072570\",\r\n  appId: \"1:383597072570:web:870d9d280b22a1aa28b283\",\r\n  measurementId: \"G-Y2QLPH92NB\"\r\n};\r\n\r\n// Initialisation Firebase\r\nexport const app: FirebaseApp = initializeApp(firebaseConfig);\r\n\r\nexport const storage = getStorage(app, 'gs://shifai-f46a0.appspot.com');\r\n\r\nconst analytics = getAnalytics(app);\r\n\r\n// Objet d'authentification pour être utilisé dans d'autres fichiers\r\n\r\n\r\n\r\n\r\n// Fonction pour connecter l'utilisateur\r\n/* export async function loginUser(email: string, password: string) {\r\n  try {\r\n    \r\n    const userCredential = await signInWithEmailAndPassword(auth, email, password);\r\n    console.log('Utilisateur connecté :', userCredential.user);\r\n    return userCredential;\r\n  } catch (error) {\r\n    console.error(error);\r\n    throw error;\r\n  }\r\n}\r\n*/\r\nconst auth = getAuth(app);\r\nconst firestore = getFirestore(app);\r\n\r\nexport { auth, firestore, RendezVousData };\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport async function AddUser(firestore: AngularFirestore, app: FirebaseApp, familyName: string, name: string, email: string, password: string, date: string, sexe: string, role: string) {\r\n  const user = {\r\n    familyName: familyName,\r\n    name: name,\r\n    email: email,\r\n    password: password,\r\n    date: date,\r\n    sexe: sexe,\r\n    role: role,\r\n  };\r\n\r\n  try {\r\n    // Ajouter l'utilisateur à la collection \"inscrits\"\r\n    const userDocRef = await firestore.collection('inscrits').add(user);\r\n\r\n    console.log('Utilisateur ajouté avec succès à Firebase.');\r\n\r\n    // Récupérer l'uid généré pour ce document\r\n    const uid = userDocRef.id;\r\n\r\n    // Mettre à jour le document avec l'uid\r\n    await userDocRef.update({ uid: uid });\r\n\r\n    console.log('UID ajouté avec succès à l\\'utilisateur.');\r\n\r\n    // Créer une sous-collection \"rdv\" pour l'utilisateur\r\n    await userDocRef.collection('rdv').add({}); // Ajouter ici les données de rendez-vous si nécessaire\r\n    await userDocRef.collection('documents').add({});\r\n\r\n    console.log('Sous-collection \"rdv\" créée avec succès pour l\\'utilisateur.');\r\n\r\n  } catch (error) {\r\n    console.error('Erreur lors de l\\'ajout de l\\'utilisateur et de la sous-collection \"rdv\" à Firebase :', error);\r\n    throw error; // Vous pouvez gérer l'erreur selon vos besoins\r\n  }\r\n}\r\nexport async function AddUserToAuth(auth: AngularFireAuth, email: string, password: string) {\r\n  try {\r\n    // Ajouter l'utilisateur à l'authentification Firebase\r\n    const userCredential = await auth.createUserWithEmailAndPassword(email, password);\r\n    console.log('Utilisateur ajouté avec succès à l\\'authentification Firebase.');\r\n    return userCredential.user;\r\n  } catch (error) {\r\n    console.error('Erreur lors de l\\'ajout de l\\'utilisateur à l\\'authentification Firebase :', error);\r\n    throw error; // Vous pouvez gérer l'erreur selon vos besoins\r\n  }\r\n}\r\ninterface MedicamentDat {\r\n  idd:string;\r\n  nom: string;\r\n  dosage: number;\r\n  prises: {\r\n    label: string;\r\n    checked: boolean;\r\n  }[];\r\n}\r\nexport async function AddMedicament(firestore: AngularFirestore, app: FirebaseApp, nom: string, dosage: number, prises: any[], uid:string) {\r\n  const medicament = {\r\n    nom: nom,\r\n    dosage: dosage,\r\n    prises: prises.map(prise => ({\r\n      label: prise.label,\r\n      checked: prise.checked\r\n    })),\r\n    uid: uid,\r\n  };\r\n\r\n  try {\r\n    \r\n    const medref =await firestore.collection('medicaments').add(medicament);\r\n    const uid = medref.id;\r\n\r\n    // Mettre à jour le document avec l'uid\r\n    await medref.update({ idd: uid });\r\n\r\n\r\n  } catch (error) {\r\n    console.error('Erreur lors de l\\'ajout du médicament:', error);\r\n    throw error;  // Renvoyer l'erreur pour que le gestionnaire puisse la gérer\r\n  }\r\n}\r\nexport async function ModifierMedicament(firestore: AngularFirestore, medicamentID: string, nom: string, dosage: number, prises: any[]) {\r\n  const medicament = {\r\n    nom: nom,\r\n    dosage: dosage,\r\n    prises: prises.map(prise => ({\r\n      label: prise.label,\r\n      checked: prise.checked\r\n    })),\r\n  };\r\n\r\n  try {\r\n    await firestore.collection('medicaments').doc(medicamentID).update(medicament);\r\n    console.log('Médicament mis à jour avec succès.');\r\n  } catch (error) {\r\n    console.error('Erreur lors de la modification du médicament:', error);\r\n    throw error;  // Renvoyer l'erreur pour que le gestionnaire puisse la gérer\r\n  }\r\n}\r\n\r\n\r\n\r\ninterface MedicamentData {\r\n  class: string;\r\n  conditionnement: string;\r\n  conservation: string;\r\n  amm: string;\r\n  dateamm: string;\r\n  dci: string;\r\n  dosage: string;\r\n  forme: string;\r\n  indication: string;\r\n  laboratoire: string;\r\n  sousclass: string;\r\n  specialite: string;\r\n  specification: string;\r\n  tableau: string;\r\n}\r\n\r\nexport async function getMedicamentsByUid(firestore: AngularFirestore, uid: string) {\r\n  try {\r\n    const snapshot = await firestore.collection('medicaments').ref.where('uid', '==', uid).get();\r\n  \r\n    // Convertir le snapshot en tableau de médicaments en utilisant l'interface\r\n    const medicaments: MedicamentDat[] = snapshot.docs.map(doc => {\r\n      const data = doc.data() as MedicamentDat; // Cast vers l'interface définie\r\n      return { id: doc.id, ...data };\r\n    });\r\n  \r\n    return medicaments;\r\n  } catch (error) {\r\n    console.error('Erreur lors de la récupération des médicaments :', error);\r\n    throw error;\r\n  }\r\n  \r\n  \r\n}\r\n\r\nexport async function getMedicamentsByid(firestore: AngularFirestore, id: string) {\r\n  try {\r\n    const snapshot = await firestore.collection('medicaments').doc(id).ref.get() ;\r\n\r\n    // Convertir le snapshot en tableau de médicaments en utilisant l'interface\r\n    const medicaments: MedicamentDat[] = [snapshot.data() as MedicamentDat];\r\n\r\n    return medicaments[0];\r\n  } catch (error) {\r\n    console.error('Erreur lors de la récupération des médicaments :', error);\r\n    throw error;\r\n  }\r\n}\r\nexport async function modifierMedicament(firestore:AngularFirestore,medicamentId : string ,medicament: {dosage: number; nom: string; prises: { checked: boolean; label: string }[]; uid: string }) {\r\n  const medicamentDoc = firestore.collection(`medicaments`).doc(medicamentId);\r\n  medicamentDoc.update({\r\n    dosage: medicament.dosage,\r\n    nom: medicament.nom,\r\n    prises: medicament.prises,\r\n  });\r\n}\r\n\r\nexport async function supprimerMedicament(firestore:AngularFirestore,medicamentId: string) {\r\n  firestore.collection('medicaments').doc(medicamentId).delete().then(() => {\r\n    console.log('Médicament supprimé avec succès!');\r\n    // Afficher un message de succès\r\n  \r\n  }).catch((error) => {\r\n    console.error('Erreur lors de la suppression du médicament :', error);\r\n    // Afficher un message d'erreur\r\n  });\r\n}\r\n\r\nexport async function getMedicaments(firestore: AngularFirestore) {\r\n  try {\r\n    const snapshot = await firestore.collection('med').ref.get();\r\n  \r\n    // Convertir le snapshot en tableau de médicaments en utilisant l'interface\r\n    const medicaments: MedicamentData[] = snapshot.docs.map(doc => {\r\n      const data = doc.data() as MedicamentData; // Cast vers l'interface définie\r\n      return { id: doc.id, ...data };\r\n    });\r\n  \r\n    return medicaments;\r\n  } catch (error) {\r\n    console.error('Erreur lors de la récupération des médicaments :', error);\r\n    throw error;\r\n  }\r\n  \r\n}\r\ninterface MedecinData {\r\n  uid:string,\r\n  nom:string,\r\n  prenom:string,\r\n  sexe:string,\r\n  email: string,\r\n  password: string,\r\n  date: string,\r\n  delegation: string,\r\n  etat: string,\r\n  specialite: string,\r\n  telephone: string,\r\n}\r\n\r\n\r\n\r\n\r\nexport async function getMedecinsByLocalisationAndSpecialite(firestore: AngularFirestore, localisation: string | null, specialite: string | null) {\r\n  try {\r\n    const snapshot = await firestore.collection('medecin').ref.where('specialite', '==', specialite).where('etat', '==', localisation).get();\r\n\r\n    // Vérifier si snapshot est défini avant de l'utiliser\r\n    if (snapshot) {\r\n      // Convertir le snapshot en tableau de médecins\r\n      const medecins: MedecinData[] = snapshot.docs.map(doc => {\r\n        const data = doc.data() as MedecinData;\r\n        return { id: doc.id, ...data };\r\n      });\r\n\r\n      return medecins;\r\n    } else {\r\n      console.error('La requête n\\'a pas renvoyé de snapshot.');\r\n      return []; // Ou lancez une erreur appropriée selon vos besoins\r\n    }\r\n  } catch (error) {\r\n    console.error('Erreur lors de la récupération des médecins (firebase) :', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport async function AddMedecin(\r\n  firestore: AngularFirestore,\r\n  storage: AngularFireStorage,\r\n  nom: string,\r\n  prenom: string,\r\n  email: string,\r\n  password: string,\r\n  date: string,\r\n  sexe: string,\r\n  role: string,\r\n  delegation: string,\r\n  etat: string,\r\n  specialite: string,\r\n  telephone: string,\r\n  file: File | null\r\n) {\r\n  let fileUrl: string | null = null;\r\n\r\n  if (file) {\r\n    const filePath = `gs://shifai-f46a0.appspot.com/${file.name}`; // Replace 'votre/chemin/dans/storage' with your storage path\r\n    const fileRef = storage.refFromURL(filePath);\r\n\r\n    const uploadTask = fileRef.put(file);\r\n\r\n    await uploadTask.snapshotChanges().pipe(\r\n      finalize(async () => {\r\n        fileUrl = await fileRef.getDownloadURL().toPromise(); // Wait for the Observable to resolve\r\n      })\r\n    ).toPromise(); // Wait for the upload task to complete\r\n  }\r\n\r\n  async function AddMedecin(firestore: AngularFirestore, nom: string, prenom: string, email: string, password: string, date: string, sexe: string, role: string, specialite: string, telephone: string, fileUrl: string, delegation: string, etat: string) {\r\n    try {\r\n      const medecin = {\r\n        nom: nom,\r\n        prenom: prenom,\r\n        email: email,\r\n        password: password,\r\n        date: date,\r\n        sexe: sexe,\r\n        role: role,\r\n        specialite: specialite,\r\n        telephone: telephone,\r\n        fileUrl: fileUrl,\r\n        delegation: delegation,\r\n        etat: etat,\r\n      };\r\n  \r\n      // Ajoutez le médecin à la collection \"admin\"\r\n      const medecinRef = await firestore.collection('admin').add(medecin);\r\n  \r\n      // Récupérez l'ID du médecin nouvellement ajouté\r\n      const medecinId = medecinRef.id;\r\n      await medecinRef.update({ uid: medecinRef.id });\r\n\r\n\r\n  \r\n      // Créez automatiquement une sous-collection \"appointments\" pour ce médecin\r\n      await firestore.collection('admin').doc(medecinId).collection('rdv').add({ /* Données initiales des rendez-vous si nécessaire */ });\r\n  \r\n      console.log('Médecin ajouté avec succès à Firebase.');\r\n    } catch (error) {\r\n      console.error('Erreur lors de l\\'ajout du médecin à Firebase :', error);\r\n    }\r\n  }\r\n}  \r\n\r\n\r\n\r\nexport async function getMedecinByUid(firestore: AngularFirestore, uid: string) {\r\n  const snapshot = await firestore.collection('medecin').ref.where('uid', '==', uid).get();\r\n  if (snapshot) {\r\n    // Convertir le snapshot en tableau de médecins\r\n    const medecins: MedecinData[] = snapshot.docs.map(doc => {\r\n      const data = doc.data() as MedecinData;\r\n      return { id: doc.id, ...data };\r\n    });\r\n\r\n    return medecins;\r\n      } else {\r\n        console.log('Aucun médecin trouvé pour cet UID :', uid);\r\n        return null; // Ou renvoyez un objet vide, selon vos besoins\r\n      }\r\n    }\r\n    export async function getMedecinByUidA(firestore: AngularFirestore, uid: string) {\r\n      try {\r\n        const snapshot = await firestore.collection('medecin').ref.where('uid', '==', uid).get();\r\n        if (!snapshot.empty) {\r\n          const doc = snapshot.docs[0]; // Récupérez le premier document du snapshot\r\n          const data = doc.data() as MedecinData;\r\n          const medecin: MedecinData = {  ...data };\r\n          return medecin;\r\n        } else {\r\n          console.log('Aucun médecin trouvé pour cet UID :', uid);\r\n          return null; // Ou renvoyez un objet vide, selon vos besoins\r\n        }\r\n      } catch (error) {\r\n        console.error('Erreur lors de la récupération du médecin :', error);\r\n        return null;\r\n      }\r\n    }\r\n    \r\n  \r\n  \r\n\r\n    export async function loginMedecins(firestore: AngularFirestore, email: string, password: string): Promise<{ medecinData: any, uid: string } | null> {\r\n      try {\r\n        // Recherchez le médecin dans la base de données avec l'email fourni\r\n        const medecinCollection: CollectionReference<DocumentData> = firestore.collection('medecin').ref as CollectionReference<DocumentData>;\r\n        const medecinQuery: QuerySnapshot<DocumentData> = await medecinCollection.where('email', '==', email).get();\r\n    \r\n        if (medecinQuery.size === 1) {\r\n          // Vérifiez le mot de passe (vous pouvez utiliser une bibliothèque de hachage appropriée)\r\n          const medecinData = medecinQuery.docs[0].data() as { password?: string };\r\n          const uid = medecinQuery.docs[0].id;\r\n    \r\n          if (medecinData && medecinData.password === password) {\r\n            console.log('Connexion réussie en tant que médecin.');\r\n            return { medecinData, uid }; // Authentification réussie, renvoie les informations du médecin et son UID\r\n          }\r\n        }\r\n    \r\n        console.error('Identifiants invalides.');\r\n        return null; // Authentification échouée\r\n    \r\n      } catch (error) {\r\n        console.error('Erreur lors de la connexion du médecin :', error);\r\n        throw error; // Vous pouvez gérer l'erreur ici ou la laisser remonter\r\n      }\r\n    }\r\n    export async function loginsecretaire(firestore: AngularFirestore, email: string, password: string) {\r\n      try {\r\n        // Recherchez le médecin dans la base de données avec l'email fourni\r\n        const medecinCollection: CollectionReference<DocumentData> = firestore.collection('secretaire').ref as CollectionReference<DocumentData>;\r\n        const secQuery: QuerySnapshot<DocumentData> = await medecinCollection.where('gmail', '==', email).get();\r\n    \r\n        if (secQuery.size === 1) {\r\n          // Vérifiez le mot de passe (vous pouvez utiliser une bibliothèque de hachage appropriée)\r\n          const secretaireData = secQuery.docs[0].data() as { password?: string , medecinUid:string };\r\n          const uid = secQuery.docs[0].id;\r\n    \r\n          if (secretaireData&& secretaireData.password === password) {\r\n            console.log('Connexion réussie en tant que médecin.');\r\n            medsec=secretaireData.medecinUid ;\r\n            \r\n            return { secretaireData, uid }; // Authentification réussie, renvoie les informations du médecin et son UID\r\n          }\r\n        }\r\n    \r\n        console.error('Identifiants invalides.');\r\n        return null; // Authentification échouée\r\n    \r\n      } catch (error) {\r\n        console.error('Erreur lors de la connexion du médecin :', error);\r\n        throw error; // Vous pouvez gérer l'erreur ici ou la laisser remonter\r\n      }\r\n    }\r\n  export let medsec:string ;\r\n    export let secuid = { uid: '' };\r\n    export const medecinUid = { uid: '' };\r\n\r\n    export async function ajouterSecretaire(\r\n      firestore: AngularFirestore,\r\n      nom: string,\r\n      prenom: string,\r\n      mail: string,\r\n      numero: string,\r\n      password: string,\r\n      medecinUid: string\r\n    ) {\r\n      try {\r\n        // Ajoutez votre logique pour ajouter les données du formulaire à la collection 'secretaire'\r\n        // Utilisez firestore.collection('secretaire') pour accéder à la collection 'secretaire' dans Firebase\r\n\r\n        const secretaire ={\r\n       \r\n          nom: nom,\r\n          prenom: prenom,\r\n          mail: mail,\r\n          numero: numero,\r\n          password: password,\r\n          medecinUid: medecinUid\r\n        };\r\n        const userDocRef = await firestore.collection('secretaire').add(secretaire);\r\n\r\n\r\n        const uid = userDocRef.id;\r\n\r\n    // Mettre à jour le document avec l'uid\r\n    await userDocRef.update({ uid: uid });\r\n    \r\n        console.log('Secrétaire ajoutée avec succès à la base de données.');\r\n      } catch (error) {\r\n        console.error('Erreur lors de l\\'ajout du secrétaire à la base de données :', error);\r\n        throw error; // Vous pouvez gérer l'erreur ici ou la laisser remonter\r\n      }\r\n    }\r\n   \r\n    \r\n    \r\n    interface secretaireData {\r\n      uid:string ;\r\n      prenom : string ;\r\n      nom : string ;\r\n      numero : string ;\r\n      gmail : string ;\r\n      password : string ;\r\n    }\r\n    export async function getSecretaireByUid  (firestore: AngularFirestore, uid: string) {\r\n        const snapshot1 = await firestore.collection('secretaire').ref.where('medecinUid', '==', uid).get();\r\n\r\n\r\n        const secretaires: secretaireData[] = snapshot1.docs.map(doc => {\r\n          const data = doc.data() as secretaireData;\r\n    \r\n          return {\r\n            uid: doc.id,\r\n            nom: data.nom,\r\n            prenom: data.prenom,\r\n            gmail: data.gmail,\r\n            numero: data.numero,\r\n            password: data.password,\r\n          };\r\n        });\r\n          return secretaires;\r\n\r\n       \r\n\r\n\r\n      \r\n        }\r\n        export async function getSecretaireBysecUid(firestore: AngularFirestore, uid: string) {\r\n          try {\r\n            // Récupérer le document du secrétaire par UID\r\n            const secretaireDoc = await firestore.collection('secretaire').doc(uid).ref.get();\r\n        \r\n            // Vérifier si le document existe\r\n            if (secretaireDoc) {\r\n              // Récupérer les données du secrétaire à partir du document\r\n              const secretaireData = secretaireDoc.data() as secretaireData;\r\n              return secretaireData;\r\n            } else {\r\n              console.log('Aucun secrétaire trouvé avec l\\'UID spécifié.');\r\n              return null;\r\n            }\r\n          } catch (error) {\r\n            console.error('Erreur lors de la récupération du secrétaire :', error);\r\n            throw error; // Vous pouvez gérer l'erreur ici ou la laisser remonter\r\n          }\r\n        }\r\n        export async function modifierSecretaire(\r\n          firestore: AngularFirestore,\r\n          secretaireID: string,\r\n          nom: string,\r\n          prenom: string,\r\n          mail: string,\r\n          numero: string,\r\n          password: string,\r\n          medecinUid: string\r\n        ): Promise<void> {\r\n          try {\r\n            // Mettre à jour les données du secrétaire dans la collection 'inscrits'\r\n            await firestore.collection('secretaire').doc(secretaireID).update({\r\n              nom: nom,\r\n              prenom: prenom,\r\n              mail: mail,\r\n              numero: numero,\r\n              password: password,\r\n              medecinUid: medecinUid\r\n            });\r\n        \r\n            console.log('Secrétaire mis à jour avec succès dans la base de données.');\r\n          } catch (error) {\r\n            console.error('Erreur lors de la mise à jour du secrétaire dans la base de données :', error);\r\n            throw error; // Vous pouvez gérer l'erreur ici ou la laisser remonter\r\n          }\r\n        }\r\n        \r\n        export async function supprimerSecretaire(firestore: AngularFirestore, secretaireId: string) {\r\n          try {\r\n              // Référence au document du secrétaire à supprimer\r\n              const secretaireRef = firestore.collection('secretaire').doc(secretaireId);\r\n      \r\n              // Supprimer le document du secrétaire\r\n              await secretaireRef.delete();\r\n      \r\n              console.log('Le secrétaire a été supprimé avec succès.');\r\n          } catch (error) {\r\n              console.error('Erreur lors de la suppression du secrétaire :', error);\r\n          }\r\n      }\r\n\r\n    \r\n\r\n    // firebaseConfig.ts\r\n\r\nexport async function getPatientsByMedecinUid(firestore: AngularFirestore, medecinUid: string) {\r\n  try {\r\n    const snapshot = await firestore.collection('patient').ref.where('medecinUid', '==', medecinUid).get();\r\n\r\n    const patients: PatientData[] = snapshot.docs.map(doc => {\r\n      const data = doc.data() as PatientData;\r\n\r\n      return {\r\n        uid: doc.id,\r\n        nom: data.nom,\r\n        prenom: data.prenom,\r\n        email: data.email,\r\n        telephone: data.telephone,\r\n        age: data.age,\r\n        sexe: data.sexe,\r\n        useruid:data.useruid,\r\n        groupeSanguin: data.groupeSanguin,\r\n        situationFamiliale: data.situationFamiliale,\r\n        profession: data.profession,\r\n        telephone2: data.telephone2,\r\n        numeroAssurance: data.numeroAssurance,\r\n        adresse: data.adresse,\r\n        note: data.note,\r\n        antecedentsMedicaux: data.antecedentsMedicaux,\r\n        antecedentsChirurgicaux: data.antecedentsChirurgicaux,\r\n        antecedentsFamiliaux: data.antecedentsFamiliaux,\r\n        autresAntecedents: data.autresAntecedents,\r\n        medicaments: data.medicaments,\r\n   \r\n      };\r\n    });\r\n\r\n    return patients;\r\n  } catch (error) {\r\n    console.error('Error fetching patients:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n   \r\n    export interface PatientData {\r\n      uid:string;\r\n      nom: string;\r\n      prenom: string;\r\n      age: number;\r\n      sexe: string;\r\n      groupeSanguin: string;\r\n      situationFamiliale: string;\r\n      profession: string;\r\n      email: string;\r\n      telephone: string;\r\n      telephone2: string;\r\n      numeroAssurance: string;\r\n      adresse: string;\r\n      note: string;\r\n      antecedentsMedicaux: string;\r\n      antecedentsChirurgicaux: string;\r\n      antecedentsFamiliaux: string;\r\n      autresAntecedents: string;\r\n      medicaments: string;\r\n      useruid:string;\r\n    }\r\n    \r\n    \r\n   \r\n\r\n\r\n    export interface MedicamentDD {\r\n      class: string;\r\n      conditionnement: string;\r\n      conservation: string;\r\n      amm: string;\r\n      dateamm: string;\r\n      dci: string;\r\n      dosage: string;\r\n      forme: string;\r\n      indication: string;\r\n      laboratoire: string;\r\n      sousclass: string;\r\n      specialite: string;\r\n      specification: string;\r\n      tableau: string;\r\n    }\r\n    \r\n\r\n    export async function getMedicamentByName(firestore: AngularFirestore, nomMedicament: string) {\r\n      const snapshot = await firestore.collection('med').ref.where('specialite', '==', nomMedicament).get();\r\n    \r\n      if (snapshot) {\r\n        // Convertir le snapshot en tableau de médicaments\r\n        const medicaments: MedicamentDD[] = snapshot.docs.map(doc => {\r\n          const data = doc.data() as MedicamentDD;\r\n          return { id: doc.id, ...data };\r\n        });\r\n    \r\n        return medicaments;\r\n      } else {\r\n        console.log('Aucun médicament trouvé avec ce nom :', nomMedicament);\r\n        return null; // Ou renvoyez un objet vide, selon vos besoins\r\n      }\r\n    }\r\n\r\n\r\n    interface PersonneData {\r\n      nom: string;\r\n      prenom: string;\r\n    }\r\n\r\n\r\n  \r\n    export async function getPersonByUid(firestore: AngularFirestore, uid: string) {\r\n      try {\r\n        const snapshot = await firestore.collection('personne').ref.where('uidPersonne', '==', uid).get();\r\n    \r\n        if (snapshot) {\r\n          // Convertir le snapshot en objet personne\r\n          const personne: PersonneData[] = snapshot.docs.map(doc => {\r\n            const data = doc.data() as PersonneData;\r\n            return { id: doc.id, ...data };\r\n          });\r\n          return personne;\r\n        } else {\r\n          console.log('Aucune personne trouvée avec cet UID :', uid);\r\n          return null; // Ou renvoyez un objet vide, selon vos besoins\r\n        }\r\n      } catch (error) {\r\n        console.error('Erreur lors de la récupération de la personne par UID:', error);\r\n        throw error; // Vous pouvez gérer l'erreur selon vos besoins\r\n      }\r\n    }\r\n\r\n    export async function savePersonData(firestore: AngularFirestore, nom: string, prenom: string, uidPersonne: string) {\r\n      try {\r\n        const personne = {\r\n          nom: nom,\r\n          prenom: prenom,\r\n          uidPersonne: uidPersonne\r\n        };\r\n    \r\n        await firestore.collection('personne').add(personne);\r\n        console.log('Données de la personne enregistrées avec succès dans Firebase.');\r\n      } catch (error) {\r\n        console.error('Erreur lors de l\\'enregistrement des données de la personne dans Firebase :', error);\r\n        throw error;\r\n      }\r\n    }\r\n    \r\n    \r\n    interface Consultation {\r\n      uid? :string;\r\n      date: string;\r\n      details?: string;\r\n    }\r\n    \r\n    export async function AddRendezVous(firestore: AngularFirestore, medecinId: string, rendezVousData: any) {\r\n      try {\r\n        // Enregistrer le rendez-vous dans la sous-collection \"rdv\" pour le médecin spécifié\r\n        await firestore.collection('medecin').doc(medecinId).collection('rdv').add(rendezVousData);\r\n    \r\n        // Enregistrer le nom et le prénom du patient dans la liste des patients du médecin\r\n        \r\n        console.log('Rendez-vous ajouté avec succès à Firebase.');\r\n    \r\n      } catch (error) {\r\n        console.error('Erreur lors de l\\'ajout du rendez-vous à Firebase :', error);\r\n      }\r\n    }\r\n    interface RendezVousData {\r\n      present?: boolean;\r\n      date: string;\r\n      heure: string;\r\n      nom: string;\r\n      prenom: string;\r\n      useruid: string;\r\n      medecinNom?: string; // Ajout de la propriété medecinNom comme optionnelle\r\n      medecinPrenom?: string; \r\n      medecinuid:string;// Ajout de la propriété medecinPrenom comme optionnelle\r\n      key:string ;\r\n      excuse?:string;\r\n      statut?:string;\r\n    }\r\n    export async function getRdvByPatientUid(firestore: AngularFirestore,  userUid: string) {\r\n      try {\r\n        const snapshot = await firestore.collection('inscrits').doc(userUid).collection('rdv').ref.where('useruid', '==', userUid).get();\r\n    \r\n        if (snapshot) {\r\n          // Convertir le snapshot en objet rendez-vous\r\n          const rdv: RendezVousData[] = snapshot.docs.map(doc => {\r\n            const data = doc.data() as RendezVousData;\r\n            return { id: doc.id, ...data };\r\n          });\r\n          return rdv;\r\n        } else {\r\n          console.log('Aucun rendez-vous trouvé avec cet UID de patient :', userUid);\r\n          return null; // Ou renvoyez un objet vide, selon vos besoins\r\n        }\r\n      } catch (error) {\r\n        console.error('Erreur lors de la récupération des rendez-vous par UID de patient:', error);\r\n        throw error; // Vous pouvez gérer l'erreur selon vos besoins\r\n      }\r\n    }\r\n    export async function getRdvdateByPatientUid(firestore: AngularFirestore,  userUid: string, date :string) {\r\n      try {\r\n        const snapshot = await firestore.collection('inscrits').doc(userUid).collection('rdv').ref.where('useruid', '==', userUid).where('date', '==', date).get();\r\n    \r\n        if (snapshot) {\r\n          // Convertir le snapshot en objet rendez-vous\r\n          const rdv: RendezVousData[] = snapshot.docs.map(doc => {\r\n            const data = doc.data() as RendezVousData;\r\n            return { id: doc.id, ...data };\r\n          });\r\n          return rdv;\r\n        } else {\r\n          console.log('Aucun rendez-vous trouvé avec cet UID de patient :', userUid);\r\n          return null; // Ou renvoyez un objet vide, selon vos besoins\r\n        }\r\n      } catch (error) {\r\n        console.error('Erreur lors de la récupération des rendez-vous par UID de patient:', error);\r\n        throw error; // Vous pouvez gérer l'erreur selon vos besoins\r\n      }\r\n    }\r\n    \r\n    \r\n    export async function AddRendezVousForUser(firestore: AngularFirestore, userId: string, rendezVousData: RendezVousData) {\r\n      try {\r\n        // Ajoutez le rendez-vous à la sous-collection \"rdv\" pour l'utilisateur spécifié\r\n        await firestore.collection('inscrits').doc(userId).collection('rdv').add({\r\n          ...rendezVousData,\r\n         \r\n        });\r\n    \r\n        console.log('Rendez-vous ajouté avec succès chez l\\'utilisateur dans Firebase.');\r\n      } catch (error) {\r\n        console.error('Erreur lors de l\\'ajout du rendez-vous chez l\\'utilisateur dans Firebase :', error);\r\n        throw error; // Vous pouvez gérer l'erreur selon vos besoins\r\n      }\r\n    }\r\n    interface userData {\r\n      // Définissez les champs nécessaires\r\n      uid : string ;\r\n      email: string;\r\n      password:string;\r\n      }\r\n      export async function loginUser(firestore: AngularFirestore, email: string, password: string): Promise<{ userData: userData, uid: string } | null> {\r\n        try {\r\n          // Recherchez l'utilisateur dans la base de données avec l'email fourni\r\n          const userCollection: CollectionReference<DocumentData> = firestore.collection('inscrits').ref as CollectionReference<DocumentData>;\r\n          const userQuery: QuerySnapshot<DocumentData> = await userCollection.where('email', '==', email).get();\r\n      \r\n          if (userQuery.size === 1) {\r\n            // Vérifiez le mot de passe\r\n            const userData = userQuery.docs[0].data() as userData;\r\n            const uid = userQuery.docs[0].id;\r\n      \r\n            if (userData && userData.password === password) {\r\n              console.log('Connexion réussie en tant qu\\'utilisateur.');\r\n              return { userData, uid }; // Authentification réussie, renvoie les informations de l'utilisateur et son UID\r\n            }\r\n          }\r\n      \r\n          console.error('Identifiants invalides.');\r\n          return null; // Authentification échouée\r\n      \r\n        } catch (error) {\r\n          console.error('Erreur lors de la connexion de l\\'utilisateur :', error);\r\n          throw error; // Vous pouvez gérer l'erreur ici ou la laisser remonter\r\n        }\r\n      }\r\n      export async function generateUniqueKey() : Promise<string>{\r\n        const timestamp = Date.now().toString(36); // Convertit le timestamp en base 36\r\n        const randomStr = Math.random().toString(36).substring(2, 10); // Génère une chaîne aléatoire en base 36\r\n      \r\n        // Opérations mathématiques complexes pour générer une clé unique\r\n        const key = parseInt(timestamp + randomStr, 36).toString(36).toUpperCase();\r\n      \r\n        return key;\r\n      }\r\n      export async function getRdvByMedUid(firestore: AngularFirestore,  userUid: string) {\r\n        try {\r\n          const snapshot = await firestore.collection('medecin').doc(userUid).collection('rdv').ref.where('medecinuid', '==', userUid).get();\r\n      \r\n          if (snapshot) {\r\n            // Convertir le snapshot en objet rendez-vous\r\n            const rdv: RendezVousData[] = snapshot.docs.map(doc => {\r\n              const data = doc.data() as RendezVousData;\r\n              return { id: doc.id, ...data };\r\n            });\r\n            return rdv;\r\n          } else {\r\n            console.log('Aucun rendez-vous trouvé avec cet UID de medecin :', userUid);\r\n            return null; // Ou renvoyez un objet vide, selon vos besoins\r\n          }\r\n        } catch (error) {\r\n          console.error('Erreur lors de la récupération des rendez-vous par UID de medecin:', error);\r\n          throw error; // Vous pouvez gérer l'erreur selon vos besoins\r\n        }\r\n      }\r\n      export async function deleteRendezVous(firestore: AngularFirestore, medecinUid: string, rendezVous: RendezVousData, excuse: string) {\r\n        try {\r\n            // Supprimer le rendez-vous du médecin avec l'excuse\r\n            const rendezVousSnapshot1 = await firestore.collection('medecin').doc(rendezVous.medecinuid).collection('rdv').ref.where('key', '==', rendezVous.key).get();\r\n            rendezVousSnapshot1.forEach(doc => {\r\n                doc.ref.delete();\r\n            });\r\n            const rendezVousSnapshot3 = await firestore.collection('medecin').doc(rendezVous.medecinuid).collection('rdv').ref.where('key', '==', rendezVous.key).get();\r\n            rendezVousSnapshot3.forEach(doc => {\r\n                doc.ref.set({ ...rendezVous, statut: \"annule\", excuse: excuse });\r\n            });\r\n    \r\n            \r\n    \r\n            // Mettre à jour le rendez-vous chez le patient avec l'excuse\r\n            const rendezVousSnapshot2 = await firestore.collection('inscrits').doc(rendezVous.useruid).collection('rdv').ref.where('key', '==', rendezVous.key).get();\r\n            rendezVousSnapshot2.forEach(doc => {\r\n                doc.ref.set({ ...rendezVous, statut: \"annule\", excuse: excuse });\r\n            });\r\n           \r\n        } catch (error) {\r\n            console.error('Erreur lors de la suppression du rendez-vous:', error);\r\n            throw error;\r\n        }\r\n    }\r\n    \r\n      \r\n      export async function deleteRendezVousR(firestore: AngularFirestore, medecinUid: string, rendezVous: RendezVousData, ) {\r\n        try {\r\n          // Supprimer le rendez-vous du médecin avec l'excuse\r\n          const rendezVousSnapshot1 = await firestore.collection('medecin').doc(rendezVous.medecinuid).collection('rdv').ref.where('key', '==', rendezVous.key).get();\r\n          rendezVousSnapshot1.forEach(doc => {\r\n            doc.ref.delete();\r\n          });\r\n      \r\n          // Supprimer le rendez-vous chez le patient\r\n          const rendezVousSnapshot = await firestore.collection('inscrits').doc(rendezVous.useruid).collection('rdv').ref.where('key', '==', rendezVous.key).get();\r\n          rendezVousSnapshot.forEach(doc => {\r\n            doc.ref.delete();\r\n          });\r\n      \r\n         \r\n          console.log('Rendez-vous supprimé avec succès.');\r\n        } catch (error) {\r\n          console.error('Erreur lors de la suppression du rendez-vous:', error);\r\n          throw error;\r\n        }\r\n      }\r\n      export async function savePatient(\r\n        firestore: AngularFirestore,\r\n        adresse: string,\r\n        age: number,\r\n        antecedentsChirurgicaux: string,\r\n        antecedentsFamiliaux: string,\r\n        antecedentsMedicaux: string,\r\n        autresAntecedents: string,\r\n        email: string,\r\n        medicaments: string,\r\n        groupeSanguin: string,\r\n        nom: string,\r\n        note: string,\r\n        numeroAssurance: string,\r\n        prenom: string,\r\n        profession: string,\r\n        sexe: string,\r\n        situationFamiliale: string,\r\n        telephone: string,\r\n        telephone2: string,\r\n        uid: string,\r\n        medecinUid: string\r\n      ): Promise<void> {\r\n        try {\r\n          // Création de l'objet patientData avec les données passées en paramètres\r\n          const patientData = {\r\n            adresse,\r\n            age,\r\n            antecedentsChirurgicaux,\r\n            antecedentsFamiliaux,\r\n            antecedentsMedicaux,\r\n            autresAntecedents,\r\n            email,\r\n            medicaments,\r\n            groupeSanguin,\r\n            nom,\r\n            note,\r\n            numeroAssurance,\r\n            prenom,\r\n            profession,\r\n            sexe,\r\n            situationFamiliale,\r\n            telephone,\r\n            telephone2,\r\n            uid\r\n          };\r\n      \r\n          // Référence au document du patient dans la collection des patients du médecin\r\n          const patientRef = firestore.collection('medecin').doc(medecinUid)\r\n                              .collection('patients').doc(uid);\r\n      \r\n          // Vérifie si le patient existe déjà avant de le mettre à jour\r\n          const patientSnapshot = await patientRef.get();\r\n          if (patientSnapshot) {\r\n            await patientRef.update(patientData); // Met à jour les données du patient existant\r\n            console.log('Patient mis à jour avec succès.');\r\n          } else {\r\n            console.log('Le patient n\\'existe pas chez ce médecin.');\r\n          }\r\n        } catch (error) {\r\n          console.error('Erreur lors de la mise à jour du patient chez le médecin :', error);\r\n          throw error;\r\n        }\r\n      }\r\n      \r\n      \r\n      \r\n      async function checkPatientExistence(firestore: AngularFirestore, medecinUid: string, patientData: any): Promise<boolean> {\r\n        try {\r\n          const patientsSnapshot = await firestore.collection('medecin').doc(medecinUid).collection('patients').ref\r\n            .where('nom', '==', patientData.nom)\r\n            .where('prenom', '==', patientData.prenom)\r\n            .get();\r\n      \r\n          return !patientsSnapshot.empty;\r\n        } catch (error) {\r\n          console.error('Erreur lors de la vérification de l\\'existence du patient :', error);\r\n          throw error;\r\n        }\r\n      }\r\n \r\n// Fonction pour ajouter un patient avec les champs nom et prénom remplis\r\nexport async function AddPatientWithNomPrenom(firestore: AngularFirestore, medecinId: string, rendezVousData: any): Promise<void> {\r\n  try {\r\n    // Vérifiez si la collection patients existe, sinon la crée\r\n    const medecinRef = firestore.collection('medecin').doc(medecinId);\r\n    const medecinSnapshot = await medecinRef.get().toPromise();\r\n    \r\n    // Vérifiez si le médecin existe avant d'ajouter le patient\r\n    if (medecinSnapshot && medecinSnapshot.exists) {\r\n      // Vérifiez si un patient avec le même nom et prénom existe déjà dans la collection\r\n      const patientSnapshot = await medecinRef.collection('patients').ref\r\n        .where('nom', '==', rendezVousData.nom)\r\n        .where('prenom', '==', rendezVousData.prenom)\r\n        .get();\r\n\r\n      if (!patientSnapshot.empty) {\r\n        console.error('Un patient avec le même nom et prénom existe déjà.');\r\n        return; // Arrêtez l'exécution de la fonction s'il existe déjà un patient avec ces informations\r\n      }\r\n\r\n      // Ajoutez le patient avec les champs nom et prénom remplis\r\n      const patientRef = await medecinRef.collection('patients').add({\r\n        nom: rendezVousData.nom,\r\n        prenom: rendezVousData.prenom,\r\n        age: '',\r\n        adresse: '',\r\n        telephone: '',\r\n        uid: '',\r\n        useruid:rendezVousData.useruid \r\n      });\r\n\r\n      // Mettez à jour le champ uid avec l'UID généré pour le patient\r\n      await patientRef.update({ uid: patientRef.id });\r\n\r\n      console.log('Patient ajouté avec succès à Firebase.', patientRef, patientRef.id);\r\n\r\n      try {\r\n        const patientConsultationRef = firestore.collection('medecin').doc(medecinId).collection('patients').doc(patientRef.id);\r\n\r\n        // Créer un objet de consultation avec la date et éventuellement les détails\r\n        const consultationData: Consultation = {\r\n            date: rendezVousData.date,\r\n            details: '' // Vous pouvez fournir les détails de la consultation ici\r\n        };\r\n    \r\n        // Ajouter la nouvelle consultation dans la collection 'consultations' du patient\r\n        await patientConsultationRef.collection('consultations').add(consultationData);\r\n    \r\n        console.log('Nouvelle consultation ajoutée avec succès.');\r\n      } catch (error) {\r\n        console.error('Erreur lors de l\\'ajout de la consultation :', error);\r\n      }\r\n    } else {\r\n      console.error('Le médecin n\\'existe pas. Impossible d\\'ajouter le patient.');\r\n    }\r\n  } catch (error) {\r\n    console.error('Erreur lors de l\\'ajout du patient à Firebase :', error);\r\n  }\r\n}\r\n\r\n\r\nexport async function getPatientsByMedUid(firestore: AngularFirestore, medecinId: string) {\r\n  try {\r\n    // Récupérer la référence du médecin\r\n    const medecinRef = firestore.collection('medecin').doc(medecinId);\r\n\r\n    // Récupérer la liste des patients du médecin\r\n    const patientsSnapshot = await medecinRef.collection('patients').get().toPromise();\r\n\r\n    // Initialiser un tableau pour stocker les patients\r\n    const patients: PatientData[] = [];\r\n\r\n    // Vérifier si la snapshot des patients contient des documents\r\n    if (patientsSnapshot) {\r\n      // Parcourir les documents de la collection patients\r\n      patientsSnapshot.forEach((doc) => {\r\n        // Récupérer les données du patient\r\n        const patientData = doc.data() as PatientData;\r\n        // Ajouter un uid au patient (peut être n'importe quel identifiant unique)\r\n        patientData.uid = doc.id;\r\n        // Ajouter les données du patient au tableau\r\n        patients.push(patientData);\r\n      });\r\n    }\r\n\r\n    // Retourner le tableau de patients\r\n    return patients;\r\n  } catch (error) {\r\n    console.error('Erreur lors de la récupération des patients:', error);\r\n    return []; // Retourner un tableau vide en cas d'erreur\r\n  }\r\n}\r\n\r\nexport async function getConsultationsForPatient(firestore: AngularFirestore,medecinUid: string, patientUid: string): Promise<Consultation[]> {\r\n  try {\r\n    const consultations: Consultation[] = [];\r\n\r\n    // Récupérer les consultations du patient en utilisant son UID\r\n    const snapshot = await firestore.collection('medecin').doc(medecinUid).collection('patients').doc(patientUid).collection('consultations').get().toPromise();\r\n    if (snapshot)\r\n    snapshot.forEach((doc) => {\r\n      const consultation = doc.data() as Consultation;\r\n      consultations.push(consultation);\r\n    });\r\n\r\n    return consultations;\r\n  } catch (error) {\r\n    console.error('Erreur lors de la récupération des consultations pour le patient avec UID', patientUid, 'du médecin avec UID', medecinUid, ':', error);\r\n    return [];\r\n  }\r\n}\r\ninterface consultationData {\r\n  date:string;\r\n  details: string;\r\n  poids?: string;\r\n  taille?: string;\r\n  temperature?: string;\r\n  frequenceCardiaque?: string;\r\n  glycemie?: string;\r\n  pressionArtérielle?: string;\r\n  observation: string;\r\n  diagnosticMedical: string;\r\n}\r\nexport async function getConsultations(firestore: AngularFirestore, medecinUid: string, patientUid: string) {\r\n  try {\r\n    const snapshot = await firestore.collection('medecin').doc(medecinUid).collection('patients').doc(patientUid).collection('consultations').ref.get();\r\n\r\n    if (snapshot) {\r\n      // Convertir le snapshot en objet de consultations\r\n      const consultations: consultationData[] = snapshot.docs.map(doc => {\r\n        const data = doc.data() as consultationData;\r\n        return { id: doc.id, ...data };\r\n      });\r\n      return consultations;\r\n    } else {\r\n      console.log('Aucune consultation trouvée avec cet UID de patient et de médecin :', patientUid, medecinUid);\r\n    return null \r\n    }\r\n\r\n  } catch (error) {\r\n    console.error('Erreur lors de la récupération des consultations par UID de patient et de médecin :', error);\r\n    throw error; // Vous pouvez gérer l'erreur selon vos besoins\r\n  }\r\n}\r\nexport async function modifierSauvegarderConsultation(firestore: AngularFirestore, medecinUid: string, patientUid: string, date: string, newDetails: string) {\r\n  try {\r\n    const consultationsRef = firestore.collection('medecin').doc(medecinUid).collection('patients').doc(patientUid).collection('consultations').ref;\r\n\r\n    // Récupérer la consultation à modifier\r\n    const snapshot = await consultationsRef.where('date', '==', date).get();\r\n    snapshot.forEach(doc => {\r\n      const consultationData = doc.data() as consultationData;\r\n      // Modifier les détails de la consultation si la date correspond\r\n      consultationsRef.doc(doc.id).update({ details: newDetails });\r\n    });\r\n\r\n    console.log('Détails de la consultation mis à jour avec succès.');\r\n  } catch (error) {\r\n    console.error('Erreur lors de la modification et de la sauvegarde des détails de la consultation :', error);\r\n    throw error; // Vous pouvez gérer l'erreur selon vos besoins\r\n  }\r\n}\r\nexport async function ajouterConsultation(firestore: AngularFirestore, medecinId: string, patientUid: string, consultationData: Consultation) {\r\n  try {\r\n    const patientConsultationRef = firestore.collection('medecin').doc(medecinId).collection('patients').doc(patientUid);\r\n\r\n    // Ajouter la nouvelle consultation dans la collection 'consultations' du patient\r\n    await patientConsultationRef.collection('consultations').add(consultationData);\r\n\r\n    console.log('Nouvelle consultation ajoutée avec succès.');\r\n  } catch (error) {\r\n    console.error('Erreur lors de l\\'ajout de la consultation :', error);\r\n    throw error; // Gérer l'erreur selon vos besoins\r\n  }\r\n}\r\nexport async function chercherPatient(firestore: AngularFirestore, medecinId: string, nom: string, prenom: string, email: string) {\r\n  try {\r\n    const patientsSnapshot = await firestore.collection('medecin').doc(medecinId).collection('patients').ref\r\n      .where('nom', '==', nom)\r\n      .where('prenom', '==', prenom)\r\n      .where('email', '==', email) // Ajoutez le critère de recherche pour l'e-mail\r\n      .get();\r\n\r\n    if (!patientsSnapshot.empty) {\r\n      // Retournez l'UID du premier patient trouvé\r\n      return patientsSnapshot.docs[0].id;\r\n    } else {\r\n      // Aucun patient trouvé avec ce nom, prénom et e-mail\r\n      return null;\r\n    }\r\n  } catch (error) {\r\n    console.error('Erreur lors de la recherche du patient :', error);\r\n    return null;\r\n  }\r\n}\r\nexport async function getPatientsUIDByMedecinId(firestore: AngularFirestore, medecinId: string): Promise<string[]> {\r\n  try {\r\n    const patientsSnapshot = await firestore.collection('medecin').doc(medecinId).collection('patients').get().toPromise();\r\n    \r\n    if (patientsSnapshot) {\r\n      // Retournez les UID des patients\r\n      return patientsSnapshot.docs.map(doc => doc.id);\r\n    } else {\r\n      // Aucun patient trouvé\r\n      return [];\r\n    }\r\n  } catch (error) {\r\n    console.error('Erreur lors de la récupération des UID des patients :', error);\r\n    return [];\r\n  }\r\n}\r\nexport async function checkExistingPatient(firestore: AngularFirestore, medecinId: string, nom: string, prenom: string): Promise<string | null> {\r\n  try {\r\n    const patientsSnapshot = await firestore.collection('medecin').doc(medecinId).collection('patients').ref\r\n      .where('nom', '==', nom)\r\n      .where('prenom', '==', prenom)\r\n      .get();\r\n\r\n    if (!patientsSnapshot.empty) {\r\n      // Un patient avec le même nom et prénom existe déjà\r\n      const patientDoc = patientsSnapshot.docs[0];\r\n      return patientDoc.id;\r\n    } else {\r\n      // Aucun patient trouvé avec ce nom et prénom\r\n      return null;\r\n    }\r\n  } catch (error) {\r\n    console.error('Erreur lors de la vérification de l\\'existence du patient :', error);\r\n    return null;\r\n  }\r\n}\r\nexport async function getFichePatient(firestore: AngularFirestore, medecinUid: string, patientUid: string) {\r\n  try {\r\n    const medecinRef = firestore.collection('medecin').doc(medecinUid);\r\n    const patientDoc = await medecinRef.collection('patients').doc(patientUid).get().toPromise();\r\n\r\n    if (!patientDoc) {\r\n      console.log('Fiche patient non trouvée.');\r\n      return null; // Retourner null si la fiche patient n'est pas trouvée\r\n    }\r\n\r\n    const patientData = patientDoc.data();\r\n    return patientData;\r\n  } catch (error) {\r\n    console.error('Erreur lors de la récupération de la fiche patient :', error);\r\n    throw error;\r\n  }\r\n}\r\nexport async function getPatientByUid(firestore: AngularFirestore, medecinUid: string, patientUid: string){\r\n  try {\r\n    const patientRef = firestore.collection('medecin').doc(medecinUid).collection('patients').doc(patientUid);\r\n    const patientDoc = await patientRef.ref.get();\r\n    if (patientDoc.exists) {\r\n      const patientData = patientDoc.data() as PatientData;\r\n      return patientData;\r\n    } else {\r\n      console.log('Le patient n\\'existe pas.');\r\n      return null;\r\n    }\r\n  } catch (error) {\r\n    console.error('Erreur lors de la récupération du patient par UID :', error);\r\n    return null;\r\n  }\r\n}\r\ninterface Documentdata{\r\n  url:string;\r\n  description:string;\r\n  useruid:string;\r\n}\r\nexport async function getDocuments(firestore: AngularFirestore, medecinUid: string, patientUid: string) {\r\n  try {\r\n    const patientRef = firestore.collection('medecin').doc(medecinUid).collection('documents');\r\n    const documentsSnapshot = await patientRef.ref.where('patientUid', '==', patientUid).get();\r\n\r\n    if (!documentsSnapshot.empty) {\r\n      const documents: Documentdata[] = [];\r\n      documentsSnapshot.forEach(doc => {\r\n        const data = doc.data() as Documentdata;\r\n        documents.push(data);\r\n      });\r\n\r\n      return documents;\r\n    } else {\r\n      console.log('Aucun document trouvé pour ce patient.');\r\n      return [];\r\n    }\r\n  } catch (error) {\r\n    console.error('Erreur lors de la récupération des documents :', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport async function getConsultationsmed(firestore: AngularFirestore, medecinUid: string) {\r\n  try {\r\n    const snapshot = await firestore.collection('medecin').doc(medecinUid).collection('consultations').ref.get();\r\n\r\n    if (snapshot) {\r\n      // Convertir le snapshot en objet de consultations\r\n      const consultations: consultationData[] = snapshot.docs.map(doc => {\r\n        const data = doc.data() as consultationData;\r\n        return { id: doc.id, ...data };\r\n      });\r\n      return consultations;\r\n    } else {\r\n      console.log('Aucune consultation trouvée pour ce médecin.');\r\n      return [];\r\n    }\r\n  } catch (error) {\r\n    console.error('Erreur lors de la récupération des consultations du médecin :', error);\r\n    throw error; // Vous pouvez gérer l'erreur selon vos besoins\r\n  }\r\n}\r\nexport async function getConsultationByDateAndUidPat(firestore: AngularFirestore, medecinUid: string, patientUid: string, consultationDate: string) {\r\n  try {\r\n    const snapshot = await firestore.collection('medecin').doc(medecinUid).collection('patients').doc(patientUid).collection('consultations').ref.where('date', '==', consultationDate).get();\r\n\r\n    if (snapshot.empty) {\r\n      console.log('Aucune consultation trouvée avec cette date, UID de patient et de médecin :', consultationDate, patientUid, medecinUid);\r\n      return null;\r\n    }\r\n\r\n    if (snapshot) {\r\n      // Convertir le snapshot en objet de consultation\r\n      const consultations: consultationData[] = snapshot.docs.map(doc => {\r\n        const data = doc.data() as consultationData;\r\n        return { id: doc.id, ...data };\r\n      });\r\n      const consultation=consultations[0]\r\n      return consultation;\r\n    }\r\n    else {\r\n      return null ;\r\n    }\r\n\r\n  } catch (error) {\r\n    console.error('Erreur lors de la récupération de la consultation par date, UID de patient et de médecin :', error);\r\n    throw error; // Vous pouvez gérer l'erreur selon vos besoins\r\n  }\r\n}\r\nexport async function getDocumentsByMedecin(firestore: AngularFirestore, medecinId: string) {\r\n  try {\r\n    // Récupérer la liste des patients du médecin\r\n    const patients = await getPatientsByMedUid(firestore, medecinId);\r\n\r\n    // Initialiser un tableau pour stocker les documents\r\n    const documents: Documentdata[] = [];\r\n\r\n    // Parcourir les patients\r\n    for (const patient of patients) {\r\n      // Récupérer les documents pour le patient\r\n      const patientDocuments = await getDocuments(firestore, medecinId, patient.uid);\r\n\r\n      // Ajouter les documents du patient au tableau\r\n      documents.push(...patientDocuments);\r\n    }\r\n\r\n    // Retourner le tableau de documents\r\n    return documents;\r\n  } catch (error) {\r\n    console.error('Erreur lors de la récupération des documents du médecin:', error);\r\n    return []; // Retourner un tableau vide en cas d'erreur\r\n  }\r\n}\r\nexport async function AddMedecinforpatient(firestore: AngularFirestore, patientuid: string ,medecin:MedecinData) {\r\n  const medecinA = {\r\n    nom: medecin.nom,\r\n    prenom:medecin.prenom,\r\n    specialite:medecin.specialite,\r\n    medecin:medecin.uid,\r\n    patientuid:patientuid,\r\n  };\r\n\r\n  try {\r\n    \r\n    const medref =await firestore.collection('medecinpatient').add(medecinA);\r\n    const uid = medref.id;\r\n\r\n    // Mettre à jour le document avec l'uid\r\n    await medref.update({ idd: uid });\r\n\r\n\r\n  } catch (error) {\r\n    console.error('Erreur lors de l\\'ajout du medecin:', error);\r\n    throw error;  // Renvoyer l'erreur pour que le gestionnaire puisse la gérer\r\n  }\r\n}\r\ninterface medecinpatient{\r\n  idd:string,\r\n  medecin:string,\r\n  nom:string,\r\n  patientuid:string,\r\n  prenom:string\r\n  specialite:string,\r\n }\r\nexport async function getMedecinforPatient(firestore: AngularFirestore, patientUid: string) {\r\n  try {\r\n    const medecinPatientRef = firestore.collection('medecinpatient');\r\n    const medecinPatientSnapshot = await medecinPatientRef.ref.where('patientuid', '==', patientUid).get();\r\n\r\n    if (!medecinPatientSnapshot.empty) {\r\n      const medecins: medecinpatient[] = [];\r\n\r\n      medecinPatientSnapshot.forEach(doc => {\r\n        const medecinData = doc.data() as medecinpatient;\r\n        medecins.push(medecinData);\r\n      });\r\n\r\n      return medecins;\r\n    } else {\r\n      console.log('Aucun médecin trouvé pour ce patient.');\r\n      return [];\r\n    }\r\n  } catch (error) {\r\n    console.error('Erreur lors de la récupération des médecins pour le patient :', error);\r\n    throw error;\r\n  }\r\n}\r\nexport async function getDocumentsforpatient(firestore: AngularFirestore,  patientUid: string) {\r\n  try {\r\n    const patientRef = firestore.collection('documents');\r\n    const documentsSnapshot = await patientRef.ref.where('useruid', '==', patientUid).get();\r\n\r\n    if (!documentsSnapshot.empty) {\r\n      const documents: Documentdata[] = [];\r\n      documentsSnapshot.forEach(doc => {\r\n        const data = doc.data() as Documentdata;\r\n        documents.push(data);\r\n      });\r\n\r\n      return documents;\r\n    } else {\r\n      console.log('Aucun document trouvé pour ce patient.');\r\n      return [];\r\n    }\r\n  } catch (error) {\r\n    console.error('Erreur lors de la récupération des documents :', error);\r\n    throw error;\r\n  }\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}