{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/MacBook Air/Desktop/shifai1VV/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n// Import des modules nécessaires\nimport { initializeApp } from 'firebase/app';\nimport { getAnalytics } from 'firebase/analytics';\nimport { getAuth } from 'firebase/auth';\nimport { map } from 'rxjs';\nimport { finalize } from 'rxjs/operators';\nimport { getStorage } from 'firebase/storage';\nimport { getFirestore } from 'firebase/firestore';\n// Configuration Firebase\nexport const firebaseConfig = {\n  apiKey: \"AIzaSyA7iKnEnxTdm9UdRnegNamwRDsLFESDk7s\",\n  authDomain: \"shifai-f46a0.firebaseapp.com\",\n  projectId: \"shifai-f46a0\",\n  storageBucket: \"shifai-f46a0.appspot.com\",\n  messagingSenderId: \"383597072570\",\n  appId: \"1:383597072570:web:870d9d280b22a1aa28b283\",\n  measurementId: \"G-Y2QLPH92NB\"\n};\n// Initialisation Firebase\nexport const app = initializeApp(firebaseConfig);\nexport const storage = getStorage(app, 'gs://shifai-f46a0.appspot.com');\nconst analytics = getAnalytics(app);\n// Objet d'authentification pour être utilisé dans d'autres fichiers\n// Fonction pour connecter l'utilisateur\n/* export async function loginUser(email: string, password: string) {\n  try {\n    \n    const userCredential = await signInWithEmailAndPassword(auth, email, password);\n    console.log('Utilisateur connecté :', userCredential.user);\n    return userCredential;\n  } catch (error) {\n    console.error(error);\n    throw error;\n  }\n}\n*/\nconst auth = getAuth(app);\nconst firestore = getFirestore(app);\nexport { auth, firestore };\nexport function AddUser(_x, _x2, _x3, _x4, _x5, _x6, _x7, _x8, _x9) {\n  return _AddUser.apply(this, arguments);\n}\nfunction _AddUser() {\n  _AddUser = _asyncToGenerator(function* (firestore, app, familyName, name, email, password, date, sexe, role) {\n    const user = {\n      familyName: familyName,\n      name: name,\n      email: email,\n      password: password,\n      date: date,\n      sexe: sexe,\n      role: role\n    };\n    try {\n      // Ajouter l'utilisateur à la collection \"inscrits\"\n      const userDocRef = yield firestore.collection('inscrits').add(user);\n      console.log('Utilisateur ajouté avec succès à Firebase.');\n      // Récupérer l'uid généré pour ce document\n      const uid = userDocRef.id;\n      // Mettre à jour le document avec l'uid\n      yield userDocRef.update({\n        uid: uid\n      });\n      console.log('UID ajouté avec succès à l\\'utilisateur.');\n      // Créer une sous-collection \"rdv\" pour l'utilisateur\n      yield userDocRef.collection('rdv').add({}); // Ajouter ici les données de rendez-vous si nécessaire\n      console.log('Sous-collection \"rdv\" créée avec succès pour l\\'utilisateur.');\n    } catch (error) {\n      console.error('Erreur lors de l\\'ajout de l\\'utilisateur et de la sous-collection \"rdv\" à Firebase :', error);\n      throw error; // Vous pouvez gérer l'erreur selon vos besoins\n    }\n  });\n  return _AddUser.apply(this, arguments);\n}\nexport function AddUserToAuth(_x10, _x11, _x12) {\n  return _AddUserToAuth.apply(this, arguments);\n}\nfunction _AddUserToAuth() {\n  _AddUserToAuth = _asyncToGenerator(function* (auth, email, password) {\n    try {\n      // Ajouter l'utilisateur à l'authentification Firebase\n      const userCredential = yield auth.createUserWithEmailAndPassword(email, password);\n      console.log('Utilisateur ajouté avec succès à l\\'authentification Firebase.');\n      return userCredential.user;\n    } catch (error) {\n      console.error('Erreur lors de l\\'ajout de l\\'utilisateur à l\\'authentification Firebase :', error);\n      throw error; // Vous pouvez gérer l'erreur selon vos besoins\n    }\n  });\n  return _AddUserToAuth.apply(this, arguments);\n}\nexport function AddMedicament(_x13, _x14, _x15, _x16, _x17, _x18) {\n  return _AddMedicament.apply(this, arguments);\n}\nfunction _AddMedicament() {\n  _AddMedicament = _asyncToGenerator(function* (firestore, app, nom, dosage, prises, uid) {\n    const medicament = {\n      nom: nom,\n      dosage: dosage,\n      prises: prises.map(prise => ({\n        label: prise.label,\n        checked: prise.checked\n      })),\n      uid: uid\n    };\n    try {\n      yield firestore.collection('medicaments').add(medicament);\n    } catch (error) {\n      console.error('Erreur lors de l\\'ajout du médicament:', error);\n      throw error; // Renvoyer l'erreur pour que le gestionnaire puisse la gérer\n    }\n  });\n  return _AddMedicament.apply(this, arguments);\n}\nexport function getMedicamentsByUid(_x19, _x20) {\n  return _getMedicamentsByUid.apply(this, arguments);\n}\nfunction _getMedicamentsByUid() {\n  _getMedicamentsByUid = _asyncToGenerator(function* (firestore, uid) {\n    try {\n      const snapshot = yield firestore.collection('medicaments').ref.where('uid', '==', uid).get();\n      // Convertir le snapshot en tableau de médicaments en utilisant l'interface\n      const medicaments = snapshot.docs.map(doc => {\n        const data = doc.data(); // Cast vers l'interface définie\n        return {\n          id: doc.id,\n          ...data\n        };\n      });\n      return medicaments;\n    } catch (error) {\n      console.error('Erreur lors de la récupération des médicaments :', error);\n      throw error;\n    }\n  });\n  return _getMedicamentsByUid.apply(this, arguments);\n}\nexport function getMedecinsByLocalisationAndSpecialite(_x21, _x22, _x23) {\n  return _getMedecinsByLocalisationAndSpecialite.apply(this, arguments);\n}\nfunction _getMedecinsByLocalisationAndSpecialite() {\n  _getMedecinsByLocalisationAndSpecialite = _asyncToGenerator(function* (firestore, localisation, specialite) {\n    try {\n      const snapshot = yield firestore.collection('medecin').ref.where('specialite', '==', specialite).where('etat', '==', localisation).get();\n      // Vérifier si snapshot est défini avant de l'utiliser\n      if (snapshot) {\n        // Convertir le snapshot en tableau de médecins\n        const medecins = snapshot.docs.map(doc => {\n          const data = doc.data();\n          return {\n            id: doc.id,\n            ...data\n          };\n        });\n        return medecins;\n      } else {\n        console.error('La requête n\\'a pas renvoyé de snapshot.');\n        return []; // Ou lancez une erreur appropriée selon vos besoins\n      }\n    } catch (error) {\n      console.error('Erreur lors de la récupération des médecins (firebase) :', error);\n      throw error;\n    }\n  });\n  return _getMedecinsByLocalisationAndSpecialite.apply(this, arguments);\n}\nexport function AddMedecin(_x24, _x25, _x26, _x27, _x28, _x29, _x30, _x31, _x32, _x33, _x34, _x35, _x36, _x37) {\n  return _AddMedecin.apply(this, arguments);\n}\nfunction _AddMedecin() {\n  _AddMedecin = _asyncToGenerator(function* (firestore, storage, nom, prenom, email, password, date, sexe, role, delegation, etat, specialite, telephone, file) {\n    let fileUrl = null;\n    if (file) {\n      const filePath = `gs://shifai-f46a0.appspot.com/${file.name}`; // Replace 'votre/chemin/dans/storage' with your storage path\n      const fileRef = storage.refFromURL(filePath);\n      const uploadTask = fileRef.put(file);\n      yield uploadTask.snapshotChanges().pipe(finalize( /*#__PURE__*/_asyncToGenerator(function* () {\n        fileUrl = yield fileRef.getDownloadURL().toPromise(); // Wait for the Observable to resolve\n      }))).toPromise(); // Wait for the upload task to complete\n    }\n    function AddMedecin(_x94, _x95, _x96, _x97, _x98, _x99, _x100, _x101, _x102, _x103, _x104, _x105, _x106) {\n      return _AddMedecin2.apply(this, arguments);\n    }\n    function _AddMedecin2() {\n      _AddMedecin2 = _asyncToGenerator(function* (firestore, nom, prenom, email, password, date, sexe, role, specialite, telephone, fileUrl, delegation, etat) {\n        try {\n          const medecin = {\n            nom: nom,\n            prenom: prenom,\n            email: email,\n            password: password,\n            date: date,\n            sexe: sexe,\n            role: role,\n            specialite: specialite,\n            telephone: telephone,\n            fileUrl: fileUrl,\n            delegation: delegation,\n            etat: etat\n          };\n          // Ajoutez le médecin à la collection \"admin\"\n          const medecinRef = yield firestore.collection('admin').add(medecin);\n          // Récupérez l'ID du médecin nouvellement ajouté\n          const medecinId = medecinRef.id;\n          // Créez automatiquement une sous-collection \"appointments\" pour ce médecin\n          yield firestore.collection('admin').doc(medecinId).collection('rdv').add({/* Données initiales des rendez-vous si nécessaire */});\n          console.log('Médecin ajouté avec succès à Firebase.');\n        } catch (error) {\n          console.error('Erreur lors de l\\'ajout du médecin à Firebase :', error);\n        }\n      });\n      return _AddMedecin2.apply(this, arguments);\n    }\n  });\n  return _AddMedecin.apply(this, arguments);\n}\nexport function getMedecinByUid(_x38, _x39) {\n  return _getMedecinByUid.apply(this, arguments);\n}\nfunction _getMedecinByUid() {\n  _getMedecinByUid = _asyncToGenerator(function* (firestore, uid) {\n    const snapshot = yield firestore.collection('medecin').ref.where('uid', '==', uid).get();\n    if (snapshot) {\n      // Convertir le snapshot en tableau de médecins\n      const medecins = snapshot.docs.map(doc => {\n        const data = doc.data();\n        return {\n          id: doc.id,\n          ...data\n        };\n      });\n      return medecins;\n    } else {\n      console.log('Aucun médecin trouvé pour cet UID :', uid);\n      return null; // Ou renvoyez un objet vide, selon vos besoins\n    }\n  });\n  return _getMedecinByUid.apply(this, arguments);\n}\nexport function loginMedecins(_x40, _x41, _x42) {\n  return _loginMedecins.apply(this, arguments);\n}\nfunction _loginMedecins() {\n  _loginMedecins = _asyncToGenerator(function* (firestore, email, password) {\n    try {\n      // Recherchez le médecin dans la base de données avec l'email fourni\n      const medecinCollection = firestore.collection('medecin').ref;\n      const medecinQuery = yield medecinCollection.where('email', '==', email).get();\n      if (medecinQuery.size === 1) {\n        // Vérifiez le mot de passe (vous pouvez utiliser une bibliothèque de hachage appropriée)\n        const medecinData = medecinQuery.docs[0].data();\n        const uid = medecinQuery.docs[0].id;\n        if (medecinData && medecinData.password === password) {\n          console.log('Connexion réussie en tant que médecin.');\n          return {\n            medecinData,\n            uid\n          }; // Authentification réussie, renvoie les informations du médecin et son UID\n        }\n      }\n      console.error('Identifiants invalides.');\n      return null; // Authentification échouée\n    } catch (error) {\n      console.error('Erreur lors de la connexion du médecin :', error);\n      throw error; // Vous pouvez gérer l'erreur ici ou la laisser remonter\n    }\n  });\n  return _loginMedecins.apply(this, arguments);\n}\nexport const medecinUid = {\n  uid: ''\n};\nexport function ajouterSecretaire(_x43, _x44, _x45, _x46, _x47, _x48, _x49) {\n  return _ajouterSecretaire.apply(this, arguments);\n}\nfunction _ajouterSecretaire() {\n  _ajouterSecretaire = _asyncToGenerator(function* (firestore, nom, prenom, mail, numero, password, medecinUid) {\n    try {\n      // Ajoutez votre logique pour ajouter les données du formulaire à la collection 'secretaire'\n      // Utilisez firestore.collection('secretaire') pour accéder à la collection 'secretaire' dans Firebase\n      yield firestore.collection('secretaire').add({\n        nom: nom,\n        prenom: prenom,\n        mail: mail,\n        numero: numero,\n        password: password,\n        medecinUid: medecinUid\n      });\n      console.log('Secrétaire ajoutée avec succès à la base de données.');\n    } catch (error) {\n      console.error('Erreur lors de l\\'ajout du secrétaire à la base de données :', error);\n      throw error; // Vous pouvez gérer l'erreur ici ou la laisser remonter\n    }\n  });\n  return _ajouterSecretaire.apply(this, arguments);\n}\nexport const getSecretaireByUid = (firestore, uid) => {\n  return firestore.collection('secretaires').doc(uid).snapshotChanges().pipe(map(docChange => {\n    const data = docChange.payload.data();\n    if (data) {\n      return data;\n      console.log(data);\n    } else {\n      throw new Error('Secrétaire non trouvé');\n    }\n  }));\n};\n// firebaseConfig.ts\nexport function getPatientsByMedecinUid(_x50, _x51) {\n  return _getPatientsByMedecinUid.apply(this, arguments);\n}\nfunction _getPatientsByMedecinUid() {\n  _getPatientsByMedecinUid = _asyncToGenerator(function* (firestore, medecinUid) {\n    try {\n      const snapshot = yield firestore.collection('patient').ref.where('medecinUid', '==', medecinUid).get();\n      const patients = snapshot.docs.map(doc => {\n        const data = doc.data();\n        return {\n          id: doc.id,\n          nom: data.nom,\n          prenom: data.prenom,\n          email: data.email,\n          telephone: data.telephone,\n          dateNaissance: data.dateNaissance,\n          sexe: data.sexe\n        };\n      });\n      return patients;\n    } catch (error) {\n      console.error('Error fetching patients:', error);\n      throw error;\n    }\n  });\n  return _getPatientsByMedecinUid.apply(this, arguments);\n}\n;\nexport function getMedicamentByName(_x52, _x53) {\n  return _getMedicamentByName.apply(this, arguments);\n}\nfunction _getMedicamentByName() {\n  _getMedicamentByName = _asyncToGenerator(function* (firestore, nomMedicament) {\n    const snapshot = yield firestore.collection('med').ref.where('specialite', '==', nomMedicament).get();\n    if (snapshot) {\n      // Convertir le snapshot en tableau de médicaments\n      const medicaments = snapshot.docs.map(doc => {\n        const data = doc.data();\n        return {\n          id: doc.id,\n          ...data\n        };\n      });\n      return medicaments;\n    } else {\n      console.log('Aucun médicament trouvé avec ce nom :', nomMedicament);\n      return null; // Ou renvoyez un objet vide, selon vos besoins\n    }\n  });\n  return _getMedicamentByName.apply(this, arguments);\n}\nexport function getPersonByUid(_x54, _x55) {\n  return _getPersonByUid.apply(this, arguments);\n}\nfunction _getPersonByUid() {\n  _getPersonByUid = _asyncToGenerator(function* (firestore, uid) {\n    try {\n      const snapshot = yield firestore.collection('personne').ref.where('uidPersonne', '==', uid).get();\n      if (snapshot) {\n        // Convertir le snapshot en objet personne\n        const personne = snapshot.docs.map(doc => {\n          const data = doc.data();\n          return {\n            id: doc.id,\n            ...data\n          };\n        });\n        return personne;\n      } else {\n        console.log('Aucune personne trouvée avec cet UID :', uid);\n        return null; // Ou renvoyez un objet vide, selon vos besoins\n      }\n    } catch (error) {\n      console.error('Erreur lors de la récupération de la personne par UID:', error);\n      throw error; // Vous pouvez gérer l'erreur selon vos besoins\n    }\n  });\n  return _getPersonByUid.apply(this, arguments);\n}\nexport function savePersonData(_x56, _x57, _x58, _x59) {\n  return _savePersonData.apply(this, arguments);\n}\nfunction _savePersonData() {\n  _savePersonData = _asyncToGenerator(function* (firestore, nom, prenom, uidPersonne) {\n    try {\n      const personne = {\n        nom: nom,\n        prenom: prenom,\n        uidPersonne: uidPersonne\n      };\n      yield firestore.collection('personne').add(personne);\n      console.log('Données de la personne enregistrées avec succès dans Firebase.');\n    } catch (error) {\n      console.error('Erreur lors de l\\'enregistrement des données de la personne dans Firebase :', error);\n      throw error;\n    }\n  });\n  return _savePersonData.apply(this, arguments);\n}\nexport function AddRendezVous(_x60, _x61, _x62) {\n  return _AddRendezVous.apply(this, arguments);\n}\nfunction _AddRendezVous() {\n  _AddRendezVous = _asyncToGenerator(function* (firestore, medecinId, rendezVousData) {\n    try {\n      // Enregistrer le rendez-vous dans la sous-collection \"rdv\" pour le médecin spécifié\n      yield firestore.collection('medecin').doc(medecinId).collection('rdv').add(rendezVousData);\n      // Enregistrer le nom et le prénom du patient dans la liste des patients du médecin\n      console.log('Rendez-vous ajouté avec succès à Firebase.');\n    } catch (error) {\n      console.error('Erreur lors de l\\'ajout du rendez-vous à Firebase :', error);\n    }\n  });\n  return _AddRendezVous.apply(this, arguments);\n}\nexport function getRdvByPatientUid(_x63, _x64) {\n  return _getRdvByPatientUid.apply(this, arguments);\n}\nfunction _getRdvByPatientUid() {\n  _getRdvByPatientUid = _asyncToGenerator(function* (firestore, userUid) {\n    try {\n      const snapshot = yield firestore.collection('inscrits').doc(userUid).collection('rdv').ref.where('useruid', '==', userUid).get();\n      if (snapshot) {\n        // Convertir le snapshot en objet rendez-vous\n        const rdv = snapshot.docs.map(doc => {\n          const data = doc.data();\n          return {\n            id: doc.id,\n            ...data\n          };\n        });\n        return rdv;\n      } else {\n        console.log('Aucun rendez-vous trouvé avec cet UID de patient :', userUid);\n        return null; // Ou renvoyez un objet vide, selon vos besoins\n      }\n    } catch (error) {\n      console.error('Erreur lors de la récupération des rendez-vous par UID de patient:', error);\n      throw error; // Vous pouvez gérer l'erreur selon vos besoins\n    }\n  });\n  return _getRdvByPatientUid.apply(this, arguments);\n}\nexport function AddRendezVousForUser(_x65, _x66, _x67) {\n  return _AddRendezVousForUser.apply(this, arguments);\n}\nfunction _AddRendezVousForUser() {\n  _AddRendezVousForUser = _asyncToGenerator(function* (firestore, userId, rendezVousData) {\n    try {\n      // Ajoutez le rendez-vous à la sous-collection \"rdv\" pour l'utilisateur spécifié\n      yield firestore.collection('inscrits').doc(userId).collection('rdv').add({\n        ...rendezVousData\n      });\n      console.log('Rendez-vous ajouté avec succès chez l\\'utilisateur dans Firebase.');\n    } catch (error) {\n      console.error('Erreur lors de l\\'ajout du rendez-vous chez l\\'utilisateur dans Firebase :', error);\n      throw error; // Vous pouvez gérer l'erreur selon vos besoins\n    }\n  });\n  return _AddRendezVousForUser.apply(this, arguments);\n}\nexport function loginUser(_x68, _x69, _x70) {\n  return _loginUser.apply(this, arguments);\n}\nfunction _loginUser() {\n  _loginUser = _asyncToGenerator(function* (firestore, email, password) {\n    try {\n      // Recherchez l'utilisateur dans la base de données avec l'email fourni\n      const userCollection = firestore.collection('inscrits').ref;\n      const userQuery = yield userCollection.where('email', '==', email).get();\n      if (userQuery.size === 1) {\n        // Vérifiez le mot de passe\n        const userData = userQuery.docs[0].data();\n        const uid = userQuery.docs[0].id;\n        if (userData && userData.password === password) {\n          console.log('Connexion réussie en tant qu\\'utilisateur.');\n          return {\n            userData,\n            uid\n          }; // Authentification réussie, renvoie les informations de l'utilisateur et son UID\n        }\n      }\n      console.error('Identifiants invalides.');\n      return null; // Authentification échouée\n    } catch (error) {\n      console.error('Erreur lors de la connexion de l\\'utilisateur :', error);\n      throw error; // Vous pouvez gérer l'erreur ici ou la laisser remonter\n    }\n  });\n  return _loginUser.apply(this, arguments);\n}\nexport function generateUniqueKey() {\n  return _generateUniqueKey.apply(this, arguments);\n}\nfunction _generateUniqueKey() {\n  _generateUniqueKey = _asyncToGenerator(function* () {\n    const timestamp = Date.now().toString(36); // Convertit le timestamp en base 36\n    const randomStr = Math.random().toString(36).substring(2, 10); // Génère une chaîne aléatoire en base 36\n    // Opérations mathématiques complexes pour générer une clé unique\n    const key = parseInt(timestamp + randomStr, 36).toString(36).toUpperCase();\n    return key;\n  });\n  return _generateUniqueKey.apply(this, arguments);\n}\nexport function getRdvByMedUid(_x71, _x72) {\n  return _getRdvByMedUid.apply(this, arguments);\n}\nfunction _getRdvByMedUid() {\n  _getRdvByMedUid = _asyncToGenerator(function* (firestore, userUid) {\n    try {\n      const snapshot = yield firestore.collection('medecin').doc(userUid).collection('rdv').ref.where('medecinuid', '==', userUid).get();\n      if (snapshot) {\n        // Convertir le snapshot en objet rendez-vous\n        const rdv = snapshot.docs.map(doc => {\n          const data = doc.data();\n          return {\n            id: doc.id,\n            ...data\n          };\n        });\n        return rdv;\n      } else {\n        console.log('Aucun rendez-vous trouvé avec cet UID de medecin :', userUid);\n        return null; // Ou renvoyez un objet vide, selon vos besoins\n      }\n    } catch (error) {\n      console.error('Erreur lors de la récupération des rendez-vous par UID de medecin:', error);\n      throw error; // Vous pouvez gérer l'erreur selon vos besoins\n    }\n  });\n  return _getRdvByMedUid.apply(this, arguments);\n}\nexport function deleteRendezVous(_x73, _x74, _x75, _x76) {\n  return _deleteRendezVous.apply(this, arguments);\n}\nfunction _deleteRendezVous() {\n  _deleteRendezVous = _asyncToGenerator(function* (firestore, medecinUid, rendezVous, excuse) {\n    try {\n      // Supprimer le rendez-vous du médecin avec l'excuse\n      const rendezVousSnapshot1 = yield firestore.collection('medecin').doc(rendezVous.medecinuid).collection('rdv').ref.where('key', '==', rendezVous.key).get();\n      rendezVousSnapshot1.forEach(doc => {\n        doc.ref.delete();\n      });\n      const rendezVousSnapshot3 = yield firestore.collection('medecin').doc(rendezVous.medecinuid).collection('rdv').ref.where('key', '==', rendezVous.key).get();\n      rendezVousSnapshot3.forEach(doc => {\n        doc.ref.set({\n          ...rendezVous,\n          statut: \"annule\",\n          excuse: excuse\n        });\n      });\n      // Mettre à jour le rendez-vous chez le patient avec l'excuse\n      const rendezVousSnapshot2 = yield firestore.collection('inscrits').doc(rendezVous.useruid).collection('rdv').ref.where('key', '==', rendezVous.key).get();\n      rendezVousSnapshot2.forEach(doc => {\n        doc.ref.set({\n          ...rendezVous,\n          statut: \"annule\",\n          excuse: excuse\n        });\n      });\n    } catch (error) {\n      console.error('Erreur lors de la suppression du rendez-vous:', error);\n      throw error;\n    }\n  });\n  return _deleteRendezVous.apply(this, arguments);\n}\nexport function deleteRendezVousR(_x77, _x78, _x79) {\n  return _deleteRendezVousR.apply(this, arguments);\n}\nfunction _deleteRendezVousR() {\n  _deleteRendezVousR = _asyncToGenerator(function* (firestore, medecinUid, rendezVous) {\n    try {\n      // Supprimer le rendez-vous du médecin avec l'excuse\n      const rendezVousSnapshot1 = yield firestore.collection('medecin').doc(rendezVous.medecinuid).collection('rdv').ref.where('key', '==', rendezVous.key).get();\n      rendezVousSnapshot1.forEach(doc => {\n        doc.ref.delete();\n      });\n      // Supprimer le rendez-vous chez le patient\n      const rendezVousSnapshot = yield firestore.collection('inscrits').doc(rendezVous.useruid).collection('rdv').ref.where('key', '==', rendezVous.key).get();\n      rendezVousSnapshot.forEach(doc => {\n        doc.ref.delete();\n      });\n      console.log('Rendez-vous supprimé avec succès.');\n    } catch (error) {\n      console.error('Erreur lors de la suppression du rendez-vous:', error);\n      throw error;\n    }\n  });\n  return _deleteRendezVousR.apply(this, arguments);\n}\nexport function savePatient(_x80, _x81, _x82) {\n  return _savePatient.apply(this, arguments);\n}\n// Fonction pour ajouter un patient avec les champs nom et prénom remplis\nfunction _savePatient() {\n  _savePatient = _asyncToGenerator(function* (firestore, patientData, medecinUid) {\n    try {\n      const medecinRef = firestore.collection('medecin').doc(medecinUid);\n      yield medecinRef.collection('patients').add(patientData);\n      console.log('Patient ajouté avec succès chez le médecin.');\n    } catch (error) {\n      console.error('Erreur lors de l\\'ajout du patient chez le médecin :', error);\n      throw error;\n    }\n  });\n  return _savePatient.apply(this, arguments);\n}\nexport function AddPatientWithNomPrenom(_x83, _x84, _x85) {\n  return _AddPatientWithNomPrenom.apply(this, arguments);\n}\nfunction _AddPatientWithNomPrenom() {\n  _AddPatientWithNomPrenom = _asyncToGenerator(function* (firestore, medecinId, rendezVousData) {\n    try {\n      // Vérifiez si la collection patients existe, sinon la crée\n      const medecinRef = firestore.collection('medecin').doc(medecinId);\n      const medecinSnapshot = yield medecinRef.get().toPromise();\n      // Vérifiez si le médecin existe avant d'ajouter le patient\n      if (medecinSnapshot && medecinSnapshot.exists) {\n        // Ajoutez le patient avec les champs nom et prénom remplis\n        const patientRef = yield medecinRef.collection('patients').add({\n          nom: rendezVousData.nom,\n          prenom: rendezVousData.prenom,\n          age: '',\n          adresse: '',\n          telephone: '',\n          uid: '' // Ajoutez le champ uid avec une valeur vide pour le moment\n        });\n        // Mettez à jour le champ uid avec l'UID généré pour le patient\n        yield patientRef.update({\n          uid: patientRef.id\n        });\n        const uid = patientRef.id;\n        try {\n          // Référence au document du patient dans Firestore\n          const patientRef = firestore.collection('medecin').doc(medecinId).collection('patients').doc(uid);\n          // Ajout de la nouvelle consultation dans la collection 'consultations' du patient\n          yield patientRef.collection('consultations').add(rendezVousData.date);\n          console.log('Nouvelle consultation ajoutée avec succès.');\n        } catch (error) {\n          console.error('Erreur lors de l\\'ajout de la consultation :', error);\n        }\n        console.log('Patient ajouté avec succès à Firebase.', patientRef, patientRef.id);\n      } else {\n        console.error('Le médecin n\\'existe pas. Impossible d\\'ajouter le patient.');\n      }\n    } catch (error) {\n      console.error('Erreur lors de l\\'ajout du patient à Firebase :', error);\n    }\n  });\n  return _AddPatientWithNomPrenom.apply(this, arguments);\n}\nexport function getPatientsByMedUid(_x86, _x87) {\n  return _getPatientsByMedUid.apply(this, arguments);\n}\nfunction _getPatientsByMedUid() {\n  _getPatientsByMedUid = _asyncToGenerator(function* (firestore, medecinId) {\n    try {\n      // Récupérer la référence du médecin\n      const medecinRef = firestore.collection('medecin').doc(medecinId);\n      // Récupérer la liste des patients du médecin\n      const patientsSnapshot = yield medecinRef.collection('patients').get().toPromise();\n      // Initialiser un tableau pour stocker les patients\n      const patients = [];\n      // Vérifier si la snapshot des patients contient des documents\n      if (patientsSnapshot) {\n        // Parcourir les documents de la collection patients\n        patientsSnapshot.forEach(doc => {\n          // Récupérer les données du patient\n          const patientData = doc.data();\n          // Ajouter les données du patient au tableau\n          patients.push(patientData);\n        });\n      }\n      // Retourner le tableau de patients\n      return patients;\n    } catch (error) {\n      console.error('Erreur lors de la récupération des patients:', error);\n      return []; // Retourner un tableau vide en cas d'erreur\n    }\n  });\n  return _getPatientsByMedUid.apply(this, arguments);\n}\nexport function getConsultationsForPatient(_x88, _x89, _x90) {\n  return _getConsultationsForPatient.apply(this, arguments);\n}\nfunction _getConsultationsForPatient() {\n  _getConsultationsForPatient = _asyncToGenerator(function* (firestore, medecinUid, patientUid) {\n    try {\n      const consultations = [];\n      // Récupérer les consultations du patient en utilisant son UID\n      const snapshot = yield firestore.collection('medecin').doc(medecinUid).collection('patients').doc(patientUid).collection('consultations').get().toPromise();\n      if (snapshot) snapshot.forEach(doc => {\n        const consultation = doc.data();\n        consultations.push(consultation);\n      });\n      return consultations;\n    } catch (error) {\n      console.error('Erreur lors de la récupération des consultations pour le patient avec UID', patientUid, 'du médecin avec UID', medecinUid, ':', error);\n      return [];\n    }\n  });\n  return _getConsultationsForPatient.apply(this, arguments);\n}\nexport function getConsultations(_x91, _x92, _x93) {\n  return _getConsultations.apply(this, arguments);\n}\nfunction _getConsultations() {\n  _getConsultations = _asyncToGenerator(function* (firestore, medecinUid, patientUid) {\n    try {\n      const consultations = [];\n      // Récupérer les consultations du patient en utilisant son UID\n      const snapshot = yield firestore.collection('medecin').doc(medecinUid).collection('patients').doc(patientUid).collection('consultations').get().toPromise();\n      if (snapshot) {\n        // Parcourir les documents de la collection consultations\n        snapshot.docs.forEach(doc => {\n          // Récupérer les données de la consultation\n          const consultation = doc.data();\n          // Ajouter les données de la consultation au tableau\n          consultations.push(consultation);\n        });\n      }\n      return consultations;\n    } catch (error) {\n      console.error('Erreur lors de la récupération des consultations pour le patient avec UID', patientUid, 'du médecin avec UID', medecinUid, ':', error);\n      return [];\n    }\n  });\n  return _getConsultations.apply(this, arguments);\n}","map":{"version":3,"names":["initializeApp","getAnalytics","getAuth","map","finalize","getStorage","getFirestore","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","app","storage","analytics","auth","firestore","AddUser","_x","_x2","_x3","_x4","_x5","_x6","_x7","_x8","_x9","_AddUser","apply","arguments","_asyncToGenerator","familyName","name","email","password","date","sexe","role","user","userDocRef","collection","add","console","log","uid","id","update","error","AddUserToAuth","_x10","_x11","_x12","_AddUserToAuth","userCredential","createUserWithEmailAndPassword","AddMedicament","_x13","_x14","_x15","_x16","_x17","_x18","_AddMedicament","nom","dosage","prises","medicament","prise","label","checked","getMedicamentsByUid","_x19","_x20","_getMedicamentsByUid","snapshot","ref","where","get","medicaments","docs","doc","data","getMedecinsByLocalisationAndSpecialite","_x21","_x22","_x23","_getMedecinsByLocalisationAndSpecialite","localisation","specialite","medecins","AddMedecin","_x24","_x25","_x26","_x27","_x28","_x29","_x30","_x31","_x32","_x33","_x34","_x35","_x36","_x37","_AddMedecin","prenom","delegation","etat","telephone","file","fileUrl","filePath","fileRef","refFromURL","uploadTask","put","snapshotChanges","pipe","getDownloadURL","toPromise","_x94","_x95","_x96","_x97","_x98","_x99","_x100","_x101","_x102","_x103","_x104","_x105","_x106","_AddMedecin2","medecin","medecinRef","medecinId","getMedecinByUid","_x38","_x39","_getMedecinByUid","loginMedecins","_x40","_x41","_x42","_loginMedecins","medecinCollection","medecinQuery","size","medecinData","medecinUid","ajouterSecretaire","_x43","_x44","_x45","_x46","_x47","_x48","_x49","_ajouterSecretaire","mail","numero","getSecretaireByUid","docChange","payload","Error","getPatientsByMedecinUid","_x50","_x51","_getPatientsByMedecinUid","patients","dateNaissance","getMedicamentByName","_x52","_x53","_getMedicamentByName","nomMedicament","getPersonByUid","_x54","_x55","_getPersonByUid","personne","savePersonData","_x56","_x57","_x58","_x59","_savePersonData","uidPersonne","AddRendezVous","_x60","_x61","_x62","_AddRendezVous","rendezVousData","getRdvByPatientUid","_x63","_x64","_getRdvByPatientUid","userUid","rdv","AddRendezVousForUser","_x65","_x66","_x67","_AddRendezVousForUser","userId","loginUser","_x68","_x69","_x70","_loginUser","userCollection","userQuery","userData","generateUniqueKey","_generateUniqueKey","timestamp","Date","now","toString","randomStr","Math","random","substring","key","parseInt","toUpperCase","getRdvByMedUid","_x71","_x72","_getRdvByMedUid","deleteRendezVous","_x73","_x74","_x75","_x76","_deleteRendezVous","rendezVous","excuse","rendezVousSnapshot1","medecinuid","forEach","delete","rendezVousSnapshot3","set","statut","rendezVousSnapshot2","useruid","deleteRendezVousR","_x77","_x78","_x79","_deleteRendezVousR","rendezVousSnapshot","savePatient","_x80","_x81","_x82","_savePatient","patientData","AddPatientWithNomPrenom","_x83","_x84","_x85","_AddPatientWithNomPrenom","medecinSnapshot","exists","patientRef","age","adresse","getPatientsByMedUid","_x86","_x87","_getPatientsByMedUid","patientsSnapshot","push","getConsultationsForPatient","_x88","_x89","_x90","_getConsultationsForPatient","patientUid","consultations","consultation","getConsultations","_x91","_x92","_x93","_getConsultations"],"sources":["C:\\Users\\MacBook Air\\Desktop\\shifai1VV\\src\\firebaseConfig.ts"],"sourcesContent":["// Import des modules nécessaires\r\nimport { initializeApp, FirebaseApp } from 'firebase/app';\r\nimport { getAnalytics } from 'firebase/analytics';\r\nimport { getAuth, signInWithEmailAndPassword, Auth } from 'firebase/auth';\r\nimport { AngularFirestore, CollectionReference, DocumentData, QuerySnapshot } from '@angular/fire/compat/firestore';\r\nimport { Observable, map } from 'rxjs';\r\nimport { AngularFireStorage } from '@angular/fire/compat/storage';\r\nimport { finalize } from 'rxjs/operators';\r\nimport { getStorage } from 'firebase/storage';\r\nimport { AngularFireAuth } from '@angular/fire/compat/auth';\r\nimport { QueryDocumentSnapshot, getFirestore } from 'firebase/firestore';\r\nimport { p } from './app/patient/patient.page';\r\n\r\n\r\n\r\n// Configuration Firebase\r\n\r\nexport const firebaseConfig = {\r\n  apiKey: \"AIzaSyA7iKnEnxTdm9UdRnegNamwRDsLFESDk7s\",\r\n  authDomain: \"shifai-f46a0.firebaseapp.com\",\r\n  projectId: \"shifai-f46a0\",\r\n  storageBucket: \"shifai-f46a0.appspot.com\",\r\n  messagingSenderId: \"383597072570\",\r\n  appId: \"1:383597072570:web:870d9d280b22a1aa28b283\",\r\n  measurementId: \"G-Y2QLPH92NB\"\r\n};\r\n\r\n// Initialisation Firebase\r\nexport const app: FirebaseApp = initializeApp(firebaseConfig);\r\n\r\nexport const storage = getStorage(app, 'gs://shifai-f46a0.appspot.com');\r\n\r\nconst analytics = getAnalytics(app);\r\n\r\n// Objet d'authentification pour être utilisé dans d'autres fichiers\r\n\r\n\r\n\r\n\r\n// Fonction pour connecter l'utilisateur\r\n/* export async function loginUser(email: string, password: string) {\r\n  try {\r\n    \r\n    const userCredential = await signInWithEmailAndPassword(auth, email, password);\r\n    console.log('Utilisateur connecté :', userCredential.user);\r\n    return userCredential;\r\n  } catch (error) {\r\n    console.error(error);\r\n    throw error;\r\n  }\r\n}\r\n*/\r\nconst auth = getAuth(app);\r\nconst firestore = getFirestore(app);\r\n\r\nexport { auth, firestore, RendezVousData };\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport async function AddUser(firestore: AngularFirestore, app: FirebaseApp, familyName: string, name: string, email: string, password: string, date: string, sexe: string, role: string) {\r\n  const user = {\r\n    familyName: familyName,\r\n    name: name,\r\n    email: email,\r\n    password: password,\r\n    date: date,\r\n    sexe: sexe,\r\n    role: role,\r\n  };\r\n\r\n  try {\r\n    // Ajouter l'utilisateur à la collection \"inscrits\"\r\n    const userDocRef = await firestore.collection('inscrits').add(user);\r\n\r\n    console.log('Utilisateur ajouté avec succès à Firebase.');\r\n\r\n    // Récupérer l'uid généré pour ce document\r\n    const uid = userDocRef.id;\r\n\r\n    // Mettre à jour le document avec l'uid\r\n    await userDocRef.update({ uid: uid });\r\n\r\n    console.log('UID ajouté avec succès à l\\'utilisateur.');\r\n\r\n    // Créer une sous-collection \"rdv\" pour l'utilisateur\r\n    await userDocRef.collection('rdv').add({}); // Ajouter ici les données de rendez-vous si nécessaire\r\n\r\n    console.log('Sous-collection \"rdv\" créée avec succès pour l\\'utilisateur.');\r\n\r\n  } catch (error) {\r\n    console.error('Erreur lors de l\\'ajout de l\\'utilisateur et de la sous-collection \"rdv\" à Firebase :', error);\r\n    throw error; // Vous pouvez gérer l'erreur selon vos besoins\r\n  }\r\n}\r\nexport async function AddUserToAuth(auth: AngularFireAuth, email: string, password: string) {\r\n  try {\r\n    // Ajouter l'utilisateur à l'authentification Firebase\r\n    const userCredential = await auth.createUserWithEmailAndPassword(email, password);\r\n    console.log('Utilisateur ajouté avec succès à l\\'authentification Firebase.');\r\n    return userCredential.user;\r\n  } catch (error) {\r\n    console.error('Erreur lors de l\\'ajout de l\\'utilisateur à l\\'authentification Firebase :', error);\r\n    throw error; // Vous pouvez gérer l'erreur selon vos besoins\r\n  }\r\n}\r\nexport async function AddMedicament(firestore: AngularFirestore, app: FirebaseApp, nom: string, dosage: number, prises: any[], uid:string) {\r\n  const medicament = {\r\n    nom: nom,\r\n    dosage: dosage,\r\n    prises: prises.map(prise => ({\r\n      label: prise.label,\r\n      checked: prise.checked\r\n    })),\r\n    uid: uid,\r\n  };\r\n\r\n  try {\r\n    await firestore.collection('medicaments').add(medicament);\r\n  } catch (error) {\r\n    console.error('Erreur lors de l\\'ajout du médicament:', error);\r\n    throw error;  // Renvoyer l'erreur pour que le gestionnaire puisse la gérer\r\n  }\r\n}\r\n\r\ninterface MedicamentData {\r\n  nom: string;\r\n  dosage: number;\r\n  prise: boolean[];\r\n  // Autres champs si nécessaire...\r\n}\r\n\r\nexport async function getMedicamentsByUid(firestore: AngularFirestore, uid: string) {\r\n  try {\r\n    const snapshot = await firestore.collection('medicaments').ref.where('uid', '==', uid).get();\r\n  \r\n    // Convertir le snapshot en tableau de médicaments en utilisant l'interface\r\n    const medicaments: MedicamentData[] = snapshot.docs.map(doc => {\r\n      const data = doc.data() as MedicamentData; // Cast vers l'interface définie\r\n      return { id: doc.id, ...data };\r\n    });\r\n  \r\n    return medicaments;\r\n  } catch (error) {\r\n    console.error('Erreur lors de la récupération des médicaments :', error);\r\n    throw error;\r\n  }\r\n  \r\n}\r\n\r\n// Exemple d'interface pour la structure des données des médecins\r\ninterface MedecinData {\r\n  // Définissez les champs nécessaires\r\n  uid : string ;\r\n  nom: string;\r\n  prenom:string;\r\n  localisation:string;\r\n  specialite:string;\r\n  // ... autres champs\r\n}\r\n\r\n\r\n\r\n\r\nexport async function getMedecinsByLocalisationAndSpecialite(firestore: AngularFirestore, localisation: string | null, specialite: string | null) {\r\n  try {\r\n    const snapshot = await firestore.collection('medecin').ref.where('specialite', '==', specialite).where('etat', '==', localisation).get();\r\n\r\n    // Vérifier si snapshot est défini avant de l'utiliser\r\n    if (snapshot) {\r\n      // Convertir le snapshot en tableau de médecins\r\n      const medecins: MedecinData[] = snapshot.docs.map(doc => {\r\n        const data = doc.data() as MedecinData;\r\n        return { id: doc.id, ...data };\r\n      });\r\n\r\n      return medecins;\r\n    } else {\r\n      console.error('La requête n\\'a pas renvoyé de snapshot.');\r\n      return []; // Ou lancez une erreur appropriée selon vos besoins\r\n    }\r\n  } catch (error) {\r\n    console.error('Erreur lors de la récupération des médecins (firebase) :', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport async function AddMedecin(\r\n  firestore: AngularFirestore,\r\n  storage: AngularFireStorage,\r\n  nom: string,\r\n  prenom: string,\r\n  email: string,\r\n  password: string,\r\n  date: string,\r\n  sexe: string,\r\n  role: string,\r\n  delegation: string,\r\n  etat: string,\r\n  specialite: string,\r\n  telephone: string,\r\n  file: File | null\r\n) {\r\n  let fileUrl: string | null = null;\r\n\r\n  if (file) {\r\n    const filePath = `gs://shifai-f46a0.appspot.com/${file.name}`; // Replace 'votre/chemin/dans/storage' with your storage path\r\n    const fileRef = storage.refFromURL(filePath);\r\n\r\n    const uploadTask = fileRef.put(file);\r\n\r\n    await uploadTask.snapshotChanges().pipe(\r\n      finalize(async () => {\r\n        fileUrl = await fileRef.getDownloadURL().toPromise(); // Wait for the Observable to resolve\r\n      })\r\n    ).toPromise(); // Wait for the upload task to complete\r\n  }\r\n\r\n  async function AddMedecin(firestore: AngularFirestore, nom: string, prenom: string, email: string, password: string, date: string, sexe: string, role: string, specialite: string, telephone: string, fileUrl: string, delegation: string, etat: string) {\r\n    try {\r\n      const medecin = {\r\n        nom: nom,\r\n        prenom: prenom,\r\n        email: email,\r\n        password: password,\r\n        date: date,\r\n        sexe: sexe,\r\n        role: role,\r\n        specialite: specialite,\r\n        telephone: telephone,\r\n        fileUrl: fileUrl,\r\n        delegation: delegation,\r\n        etat: etat,\r\n      };\r\n  \r\n      // Ajoutez le médecin à la collection \"admin\"\r\n      const medecinRef = await firestore.collection('admin').add(medecin);\r\n  \r\n      // Récupérez l'ID du médecin nouvellement ajouté\r\n      const medecinId = medecinRef.id;\r\n  \r\n      // Créez automatiquement une sous-collection \"appointments\" pour ce médecin\r\n      await firestore.collection('admin').doc(medecinId).collection('rdv').add({ /* Données initiales des rendez-vous si nécessaire */ });\r\n  \r\n      console.log('Médecin ajouté avec succès à Firebase.');\r\n    } catch (error) {\r\n      console.error('Erreur lors de l\\'ajout du médecin à Firebase :', error);\r\n    }\r\n  }\r\n}  \r\n\r\n\r\n\r\nexport async function getMedecinByUid(firestore: AngularFirestore, uid: string) {\r\n  const snapshot = await firestore.collection('medecin').ref.where('uid', '==', uid).get();\r\n  if (snapshot) {\r\n    // Convertir le snapshot en tableau de médecins\r\n    const medecins: MedecinData[] = snapshot.docs.map(doc => {\r\n      const data = doc.data() as MedecinData;\r\n      return { id: doc.id, ...data };\r\n    });\r\n\r\n    return medecins;\r\n      } else {\r\n        console.log('Aucun médecin trouvé pour cet UID :', uid);\r\n        return null; // Ou renvoyez un objet vide, selon vos besoins\r\n      }\r\n    }\r\n\r\n    export async function loginMedecins(firestore: AngularFirestore, email: string, password: string): Promise<{ medecinData: any, uid: string } | null> {\r\n      try {\r\n        // Recherchez le médecin dans la base de données avec l'email fourni\r\n        const medecinCollection: CollectionReference<DocumentData> = firestore.collection('medecin').ref as CollectionReference<DocumentData>;\r\n        const medecinQuery: QuerySnapshot<DocumentData> = await medecinCollection.where('email', '==', email).get();\r\n    \r\n        if (medecinQuery.size === 1) {\r\n          // Vérifiez le mot de passe (vous pouvez utiliser une bibliothèque de hachage appropriée)\r\n          const medecinData = medecinQuery.docs[0].data() as { password?: string };\r\n          const uid = medecinQuery.docs[0].id;\r\n    \r\n          if (medecinData && medecinData.password === password) {\r\n            console.log('Connexion réussie en tant que médecin.');\r\n            return { medecinData, uid }; // Authentification réussie, renvoie les informations du médecin et son UID\r\n          }\r\n        }\r\n    \r\n        console.error('Identifiants invalides.');\r\n        return null; // Authentification échouée\r\n    \r\n      } catch (error) {\r\n        console.error('Erreur lors de la connexion du médecin :', error);\r\n        throw error; // Vous pouvez gérer l'erreur ici ou la laisser remonter\r\n      }\r\n    }\r\n  \r\n    export const medecinUid = { uid: '' };\r\n\r\n    export async function ajouterSecretaire(\r\n      firestore: AngularFirestore,\r\n      nom: string,\r\n      prenom: string,\r\n      mail: string,\r\n      numero: string,\r\n      password: string,\r\n      medecinUid: string\r\n    ): Promise<void> {\r\n      try {\r\n        // Ajoutez votre logique pour ajouter les données du formulaire à la collection 'secretaire'\r\n        // Utilisez firestore.collection('secretaire') pour accéder à la collection 'secretaire' dans Firebase\r\n        await firestore.collection('secretaire').add({\r\n          nom: nom,\r\n          prenom: prenom,\r\n          mail: mail,\r\n          numero: numero,\r\n          password: password,\r\n          medecinUid: medecinUid\r\n        });\r\n    \r\n        console.log('Secrétaire ajoutée avec succès à la base de données.');\r\n      } catch (error) {\r\n        console.error('Erreur lors de l\\'ajout du secrétaire à la base de données :', error);\r\n        throw error; // Vous pouvez gérer l'erreur ici ou la laisser remonter\r\n      }\r\n    }\r\n    \r\n\r\n    export const getSecretaireByUid = (firestore: AngularFirestore, uid: string): Observable<any> => {\r\n      return firestore.collection('secretaires').doc(uid).snapshotChanges().pipe(\r\n        map(docChange => {\r\n          const data = docChange.payload.data();\r\n          if (data) {\r\n            return data;\r\n            console.log(data);\r\n          } else {\r\n            throw new Error('Secrétaire non trouvé');\r\n          }\r\n        })\r\n      );\r\n    };\r\n\r\n    \r\n\r\n    // firebaseConfig.ts\r\n\r\nexport async function getPatientsByMedecinUid(firestore: AngularFirestore, medecinUid: string): Promise<Patient[]> {\r\n  try {\r\n    const snapshot = await firestore.collection('patient').ref.where('medecinUid', '==', medecinUid).get();\r\n\r\n    const patients: Patient[] = snapshot.docs.map(doc => {\r\n      const data = doc.data() as PatientData;\r\n\r\n      return {\r\n        id: doc.id,\r\n        nom: data.nom,\r\n        prenom: data.prenom,\r\n        email: data.email,\r\n        telephone: data.telephone,\r\n        dateNaissance: data.dateNaissance,\r\n        sexe: data.sexe,\r\n      };\r\n    });\r\n\r\n    return patients;\r\n  } catch (error) {\r\n    console.error('Error fetching patients:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n    interface PatientData {\r\n      nom: string;\r\n      prenom: string;\r\n      email: string;\r\n      telephone: string;\r\n      dateNaissance: string;\r\n      sexe: string;\r\n    }\r\n    \r\n    export interface Patient {\r\n      id: string;\r\n      nom: string;\r\n      prenom: string;\r\n      email: string;\r\n      telephone: string;\r\n      dateNaissance: string;\r\n      sexe: string;\r\n    }\r\n\r\n\r\n\r\n    export interface MedicamentDD {\r\n      class: string;\r\n      conditionnement: string;\r\n      conservation: string;\r\n      amm: string;\r\n      dateamm: string;\r\n      dci: string;\r\n      dosage: string;\r\n      forme: string;\r\n      indication: string;\r\n      laboratoire: string;\r\n      sousclass: string;\r\n      specialite: string;\r\n      specification: string;\r\n      tableau: string;\r\n    }\r\n    \r\n\r\n    export async function getMedicamentByName(firestore: AngularFirestore, nomMedicament: string) {\r\n      const snapshot = await firestore.collection('med').ref.where('specialite', '==', nomMedicament).get();\r\n    \r\n      if (snapshot) {\r\n        // Convertir le snapshot en tableau de médicaments\r\n        const medicaments: MedicamentDD[] = snapshot.docs.map(doc => {\r\n          const data = doc.data() as MedicamentDD;\r\n          return { id: doc.id, ...data };\r\n        });\r\n    \r\n        return medicaments;\r\n      } else {\r\n        console.log('Aucun médicament trouvé avec ce nom :', nomMedicament);\r\n        return null; // Ou renvoyez un objet vide, selon vos besoins\r\n      }\r\n    }\r\n\r\n\r\n    interface PersonneData {\r\n      nom: string;\r\n      prenom: string;\r\n    }\r\n\r\n\r\n  \r\n    export async function getPersonByUid(firestore: AngularFirestore, uid: string) {\r\n      try {\r\n        const snapshot = await firestore.collection('personne').ref.where('uidPersonne', '==', uid).get();\r\n    \r\n        if (snapshot) {\r\n          // Convertir le snapshot en objet personne\r\n          const personne: PersonneData[] = snapshot.docs.map(doc => {\r\n            const data = doc.data() as PersonneData;\r\n            return { id: doc.id, ...data };\r\n          });\r\n          return personne;\r\n        } else {\r\n          console.log('Aucune personne trouvée avec cet UID :', uid);\r\n          return null; // Ou renvoyez un objet vide, selon vos besoins\r\n        }\r\n      } catch (error) {\r\n        console.error('Erreur lors de la récupération de la personne par UID:', error);\r\n        throw error; // Vous pouvez gérer l'erreur selon vos besoins\r\n      }\r\n    }\r\n\r\n    export async function savePersonData(firestore: AngularFirestore, nom: string, prenom: string, uidPersonne: string) {\r\n      try {\r\n        const personne = {\r\n          nom: nom,\r\n          prenom: prenom,\r\n          uidPersonne: uidPersonne\r\n        };\r\n    \r\n        await firestore.collection('personne').add(personne);\r\n        console.log('Données de la personne enregistrées avec succès dans Firebase.');\r\n      } catch (error) {\r\n        console.error('Erreur lors de l\\'enregistrement des données de la personne dans Firebase :', error);\r\n        throw error;\r\n      }\r\n    }\r\n    interface PatientData {\r\n      nom: string;\r\n      prenom: string;\r\n      age?: number;\r\n      adresse?: string;\r\n      telephones?: string;\r\n      uid?:string ;\r\n    }\r\n    \r\n    interface Consultation {\r\n      uid? :string;\r\n      date: string;\r\n      details?: string;\r\n    }\r\n    \r\n    export async function AddRendezVous(firestore: AngularFirestore, medecinId: string, rendezVousData: any) {\r\n      try {\r\n        // Enregistrer le rendez-vous dans la sous-collection \"rdv\" pour le médecin spécifié\r\n        await firestore.collection('medecin').doc(medecinId).collection('rdv').add(rendezVousData);\r\n    \r\n        // Enregistrer le nom et le prénom du patient dans la liste des patients du médecin\r\n        \r\n        console.log('Rendez-vous ajouté avec succès à Firebase.');\r\n    \r\n      } catch (error) {\r\n        console.error('Erreur lors de l\\'ajout du rendez-vous à Firebase :', error);\r\n      }\r\n    }\r\n    interface RendezVousData {\r\n      date: string;\r\n      heure: string;\r\n      nom: string;\r\n      prenom: string;\r\n      useruid: string;\r\n      medecinNom?: string; // Ajout de la propriété medecinNom comme optionnelle\r\n      medecinPrenom?: string; \r\n      medecinuid:string;// Ajout de la propriété medecinPrenom comme optionnelle\r\n      key:string ;\r\n      excuse?:string;\r\n      statut?:string;\r\n    }\r\n    export async function getRdvByPatientUid(firestore: AngularFirestore,  userUid: string) {\r\n      try {\r\n        const snapshot = await firestore.collection('inscrits').doc(userUid).collection('rdv').ref.where('useruid', '==', userUid).get();\r\n    \r\n        if (snapshot) {\r\n          // Convertir le snapshot en objet rendez-vous\r\n          const rdv: RendezVousData[] = snapshot.docs.map(doc => {\r\n            const data = doc.data() as RendezVousData;\r\n            return { id: doc.id, ...data };\r\n          });\r\n          return rdv;\r\n        } else {\r\n          console.log('Aucun rendez-vous trouvé avec cet UID de patient :', userUid);\r\n          return null; // Ou renvoyez un objet vide, selon vos besoins\r\n        }\r\n      } catch (error) {\r\n        console.error('Erreur lors de la récupération des rendez-vous par UID de patient:', error);\r\n        throw error; // Vous pouvez gérer l'erreur selon vos besoins\r\n      }\r\n    }\r\n    \r\n    export async function AddRendezVousForUser(firestore: AngularFirestore, userId: string, rendezVousData: RendezVousData) {\r\n      try {\r\n        // Ajoutez le rendez-vous à la sous-collection \"rdv\" pour l'utilisateur spécifié\r\n        await firestore.collection('inscrits').doc(userId).collection('rdv').add({\r\n          ...rendezVousData,\r\n         \r\n        });\r\n    \r\n        console.log('Rendez-vous ajouté avec succès chez l\\'utilisateur dans Firebase.');\r\n      } catch (error) {\r\n        console.error('Erreur lors de l\\'ajout du rendez-vous chez l\\'utilisateur dans Firebase :', error);\r\n        throw error; // Vous pouvez gérer l'erreur selon vos besoins\r\n      }\r\n    }\r\n    interface userData {\r\n      // Définissez les champs nécessaires\r\n      uid : string ;\r\n      email: string;\r\n      password:string;\r\n      }\r\n      export async function loginUser(firestore: AngularFirestore, email: string, password: string): Promise<{ userData: userData, uid: string } | null> {\r\n        try {\r\n          // Recherchez l'utilisateur dans la base de données avec l'email fourni\r\n          const userCollection: CollectionReference<DocumentData> = firestore.collection('inscrits').ref as CollectionReference<DocumentData>;\r\n          const userQuery: QuerySnapshot<DocumentData> = await userCollection.where('email', '==', email).get();\r\n      \r\n          if (userQuery.size === 1) {\r\n            // Vérifiez le mot de passe\r\n            const userData = userQuery.docs[0].data() as userData;\r\n            const uid = userQuery.docs[0].id;\r\n      \r\n            if (userData && userData.password === password) {\r\n              console.log('Connexion réussie en tant qu\\'utilisateur.');\r\n              return { userData, uid }; // Authentification réussie, renvoie les informations de l'utilisateur et son UID\r\n            }\r\n          }\r\n      \r\n          console.error('Identifiants invalides.');\r\n          return null; // Authentification échouée\r\n      \r\n        } catch (error) {\r\n          console.error('Erreur lors de la connexion de l\\'utilisateur :', error);\r\n          throw error; // Vous pouvez gérer l'erreur ici ou la laisser remonter\r\n        }\r\n      }\r\n      export async function generateUniqueKey() : Promise<string>{\r\n        const timestamp = Date.now().toString(36); // Convertit le timestamp en base 36\r\n        const randomStr = Math.random().toString(36).substring(2, 10); // Génère une chaîne aléatoire en base 36\r\n      \r\n        // Opérations mathématiques complexes pour générer une clé unique\r\n        const key = parseInt(timestamp + randomStr, 36).toString(36).toUpperCase();\r\n      \r\n        return key;\r\n      }\r\n      export async function getRdvByMedUid(firestore: AngularFirestore,  userUid: string) {\r\n        try {\r\n          const snapshot = await firestore.collection('medecin').doc(userUid).collection('rdv').ref.where('medecinuid', '==', userUid).get();\r\n      \r\n          if (snapshot) {\r\n            // Convertir le snapshot en objet rendez-vous\r\n            const rdv: RendezVousData[] = snapshot.docs.map(doc => {\r\n              const data = doc.data() as RendezVousData;\r\n              return { id: doc.id, ...data };\r\n            });\r\n            return rdv;\r\n          } else {\r\n            console.log('Aucun rendez-vous trouvé avec cet UID de medecin :', userUid);\r\n            return null; // Ou renvoyez un objet vide, selon vos besoins\r\n          }\r\n        } catch (error) {\r\n          console.error('Erreur lors de la récupération des rendez-vous par UID de medecin:', error);\r\n          throw error; // Vous pouvez gérer l'erreur selon vos besoins\r\n        }\r\n      }\r\n      export async function deleteRendezVous(firestore: AngularFirestore, medecinUid: string, rendezVous: RendezVousData, excuse: string) {\r\n        try {\r\n            // Supprimer le rendez-vous du médecin avec l'excuse\r\n            const rendezVousSnapshot1 = await firestore.collection('medecin').doc(rendezVous.medecinuid).collection('rdv').ref.where('key', '==', rendezVous.key).get();\r\n            rendezVousSnapshot1.forEach(doc => {\r\n                doc.ref.delete();\r\n            });\r\n            const rendezVousSnapshot3 = await firestore.collection('medecin').doc(rendezVous.medecinuid).collection('rdv').ref.where('key', '==', rendezVous.key).get();\r\n            rendezVousSnapshot3.forEach(doc => {\r\n                doc.ref.set({ ...rendezVous, statut: \"annule\", excuse: excuse });\r\n            });\r\n    \r\n            \r\n    \r\n            // Mettre à jour le rendez-vous chez le patient avec l'excuse\r\n            const rendezVousSnapshot2 = await firestore.collection('inscrits').doc(rendezVous.useruid).collection('rdv').ref.where('key', '==', rendezVous.key).get();\r\n            rendezVousSnapshot2.forEach(doc => {\r\n                doc.ref.set({ ...rendezVous, statut: \"annule\", excuse: excuse });\r\n            });\r\n           \r\n        } catch (error) {\r\n            console.error('Erreur lors de la suppression du rendez-vous:', error);\r\n            throw error;\r\n        }\r\n    }\r\n    \r\n      \r\n      export async function deleteRendezVousR(firestore: AngularFirestore, medecinUid: string, rendezVous: RendezVousData, ) {\r\n        try {\r\n          // Supprimer le rendez-vous du médecin avec l'excuse\r\n          const rendezVousSnapshot1 = await firestore.collection('medecin').doc(rendezVous.medecinuid).collection('rdv').ref.where('key', '==', rendezVous.key).get();\r\n          rendezVousSnapshot1.forEach(doc => {\r\n            doc.ref.delete();\r\n          });\r\n      \r\n          // Supprimer le rendez-vous chez le patient\r\n          const rendezVousSnapshot = await firestore.collection('inscrits').doc(rendezVous.useruid).collection('rdv').ref.where('key', '==', rendezVous.key).get();\r\n          rendezVousSnapshot.forEach(doc => {\r\n            doc.ref.delete();\r\n          });\r\n      \r\n         \r\n          console.log('Rendez-vous supprimé avec succès.');\r\n        } catch (error) {\r\n          console.error('Erreur lors de la suppression du rendez-vous:', error);\r\n          throw error;\r\n        }\r\n      }\r\n      export async function savePatient(firestore: AngularFirestore, patientData: any, medecinUid: string) {\r\n        try {\r\n          const medecinRef = firestore.collection('medecin').doc(medecinUid);\r\n          await medecinRef.collection('patients').add(patientData);\r\n          console.log('Patient ajouté avec succès chez le médecin.');\r\n        } catch (error) {\r\n          console.error('Erreur lors de l\\'ajout du patient chez le médecin :', error);\r\n          throw error;\r\n        }\r\n      }\r\n \r\n// Fonction pour ajouter un patient avec les champs nom et prénom remplis\r\nexport async function AddPatientWithNomPrenom(firestore: AngularFirestore, medecinId: string, rendezVousData: any): Promise<void> {\r\n  try {\r\n    // Vérifiez si la collection patients existe, sinon la crée\r\n    const medecinRef = firestore.collection('medecin').doc(medecinId);\r\n    const medecinSnapshot = await medecinRef.get().toPromise();\r\n    \r\n    // Vérifiez si le médecin existe avant d'ajouter le patient\r\n    if (medecinSnapshot && medecinSnapshot.exists) {\r\n      // Ajoutez le patient avec les champs nom et prénom remplis\r\n      const patientRef = await medecinRef.collection('patients').add({\r\n        nom: rendezVousData.nom,\r\n        prenom: rendezVousData.prenom,\r\n        age: '',\r\n        adresse: '',\r\n        telephone: '',\r\n        uid: '' // Ajoutez le champ uid avec une valeur vide pour le moment\r\n      });\r\n\r\n      // Mettez à jour le champ uid avec l'UID généré pour le patient\r\n      await patientRef.update({ uid: patientRef.id });\r\n      const uid=patientRef.id ;\r\n      try {\r\n        // Référence au document du patient dans Firestore\r\n        const patientRef = firestore.collection('medecin').doc(medecinId).collection('patients').doc(uid);\r\n    \r\n        // Ajout de la nouvelle consultation dans la collection 'consultations' du patient\r\n        await patientRef.collection('consultations').add(rendezVousData.date);\r\n    \r\n        console.log('Nouvelle consultation ajoutée avec succès.');\r\n      } catch (error) {\r\n        console.error('Erreur lors de l\\'ajout de la consultation :', error);\r\n      }\r\n\r\n      console.log('Patient ajouté avec succès à Firebase.',patientRef,patientRef.id);\r\n    } else {\r\n      console.error('Le médecin n\\'existe pas. Impossible d\\'ajouter le patient.');\r\n    }\r\n  } catch (error) {\r\n    console.error('Erreur lors de l\\'ajout du patient à Firebase :', error);\r\n  }\r\n}\r\n\r\n\r\nexport async function getPatientsByMedUid(firestore: AngularFirestore, medecinId: string): Promise<Patient[]> {\r\n  try {\r\n    // Récupérer la référence du médecin\r\n    const medecinRef = firestore.collection('medecin').doc(medecinId);\r\n\r\n    // Récupérer la liste des patients du médecin\r\n    const patientsSnapshot = await medecinRef.collection('patients').get().toPromise();\r\n\r\n    // Initialiser un tableau pour stocker les patients\r\n    const patients: Patient[] = [];\r\n\r\n    // Vérifier si la snapshot des patients contient des documents\r\n    if (patientsSnapshot) {\r\n      // Parcourir les documents de la collection patients\r\n      patientsSnapshot.forEach((doc) => {\r\n        // Récupérer les données du patient\r\n        const patientData = doc.data() as Patient;\r\n        // Ajouter les données du patient au tableau\r\n        patients.push(patientData);\r\n      });\r\n    }\r\n\r\n    // Retourner le tableau de patients\r\n    return patients;\r\n  } catch (error) {\r\n    console.error('Erreur lors de la récupération des patients:', error);\r\n    return []; // Retourner un tableau vide en cas d'erreur\r\n  }\r\n}\r\nexport async function getConsultationsForPatient(firestore: AngularFirestore,medecinUid: string, patientUid: string): Promise<Consultation[]> {\r\n  try {\r\n    const consultations: Consultation[] = [];\r\n\r\n    // Récupérer les consultations du patient en utilisant son UID\r\n    const snapshot = await firestore.collection('medecin').doc(medecinUid).collection('patients').doc(patientUid).collection('consultations').get().toPromise();\r\n    if (snapshot)\r\n    snapshot.forEach((doc) => {\r\n      const consultation = doc.data() as Consultation;\r\n      consultations.push(consultation);\r\n    });\r\n\r\n    return consultations;\r\n  } catch (error) {\r\n    console.error('Erreur lors de la récupération des consultations pour le patient avec UID', patientUid, 'du médecin avec UID', medecinUid, ':', error);\r\n    return [];\r\n  }\r\n}\r\ninterface consultationData {\r\n  date: string;\r\n  details?: string;\r\n  uid?: string;\r\n}\r\nexport async function getConsultations(firestore: AngularFirestore, medecinUid: string, patientUid: string): Promise<consultationData[]> {\r\n  try {\r\n    const consultations: Consultation[] = [];\r\n\r\n    // Récupérer les consultations du patient en utilisant son UID\r\n    const snapshot = await firestore.collection('medecin').doc(medecinUid).collection('patients').doc(patientUid).collection('consultations').get().toPromise();\r\n    if (snapshot) {\r\n      // Parcourir les documents de la collection consultations\r\n      snapshot.docs.forEach((doc) => {\r\n        // Récupérer les données de la consultation\r\n        const consultation = doc.data() as Consultation;\r\n        // Ajouter les données de la consultation au tableau\r\n        consultations.push(consultation);\r\n      });\r\n    }\r\n\r\n    return consultations;\r\n  } catch (error) {\r\n    console.error('Erreur lors de la récupération des consultations pour le patient avec UID', patientUid, 'du médecin avec UID', medecinUid, ':', error);\r\n    return [];\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}