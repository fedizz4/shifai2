{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/MacBook Air/Desktop/shifai1VV/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { getConsultations, getPatientsByMedUid } from 'src/firebaseConfig';\nimport { medecinUid } from 'src/firebaseConfig';\nlet ConsultationMedPage = class ConsultationMedPage {\n  constructor(firestore) {\n    this.firestore = firestore;\n    this.consultations = [];\n    this.uid = medecinUid.uid;\n    this.patients = [];\n  }\n  ngOnInit() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      console.log('Med UID:', _this.uid);\n      yield _this.getPatients();\n    })();\n  }\n  loadConsultations(patientUid) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        const consultations = yield getConsultations(_this2.firestore, medecinUid.uid, patientUid);\n        console.log('Consultations for patient UID', patientUid, ':', consultations);\n        if (consultations && consultations.length > 0) {\n          // Concaténer les consultations à la liste existante au lieu de réinitialiser\n          _this2.consultations = _this2.consultations.concat(consultations);\n          // Trier toutes les consultations après chaque ajout\n          _this2.consultations.sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());\n        } else {\n          console.log('No consultations found for this patient.');\n        }\n      } catch (error) {\n        console.error('Error loading consultations for patient:', error);\n      }\n    })();\n  }\n  getPatients() {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        const patients = yield getPatientsByMedUid(_this3.firestore, _this3.uid);\n        console.log(patients);\n        if (patients.length > 0) {\n          _this3.patients = patients.map(patient => ({\n            ...patient,\n            consultations: [] // Initialiser consultations comme un tableau vide\n          }));\n          console.log('patients', _this3.patients);\n          // Charger les consultations pour chaque patient\n          for (const patient of _this3.patients) {\n            const consultations = yield getConsultations(_this3.firestore, medecinUid.uid, patient.uid);\n            if (consultations && consultations.length > 0) {\n              patient.consultations = consultations; // Ajouter les consultations au patient\n            }\n          }\n        }\n        console.log(\"Patients trouvés :\", _this3.patients);\n      } catch (error) {\n        console.error('Erreur lors de la récupération des patients :', error);\n      }\n    })();\n  }\n};\nConsultationMedPage = __decorate([Component({\n  selector: 'app-consultation-med',\n  templateUrl: './consultation-med.page.html',\n  styleUrls: ['./consultation-med.page.scss']\n})], ConsultationMedPage);\nexport { ConsultationMedPage };","map":{"version":3,"names":["Component","getConsultations","getPatientsByMedUid","medecinUid","ConsultationMedPage","constructor","firestore","consultations","uid","patients","ngOnInit","_this","_asyncToGenerator","console","log","getPatients","loadConsultations","patientUid","_this2","length","concat","sort","a","b","Date","date","getTime","error","_this3","map","patient","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\MacBook Air\\Desktop\\shifai1VV\\src\\app\\consultation-med\\consultation-med.page.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { AngularFirestore } from '@angular/fire/compat/firestore';\nimport { getConsultations, getPatientsByMedUid } from 'src/firebaseConfig';\nimport { medecinUid } from 'src/firebaseConfig';\n\ninterface consultationData {\n  date: string;\n  details?: string;\n  \n}\ninterface PatientData {\n  uid: string;\n  nom: string;\n  prenom: string;\n  age: number;\n  sexe: string;\n  groupeSanguin: string;\n  situationFamiliale: string;\n  profession: string;\n  email: string;\n  telephone: string;\n  telephone2: string;\n  numeroAssurance: string;\n  adresse: string;\n  note: string;\n  antecedentsMedicaux: string;\n  antecedentsChirurgicaux: string;\n  antecedentsFamiliaux: string;\n  autresAntecedents: string;\n  medicaments: string;\n  useruid: string;\n  consultations?: consultationData[]; // Ajoutez cette propriété pour les consultations\n}\n\n@Component({\n  selector: 'app-consultation-med',\n  templateUrl: './consultation-med.page.html',\n  styleUrls: ['./consultation-med.page.scss'],\n})\nexport class ConsultationMedPage implements OnInit {\n  consultations: consultationData[] = [];\n  uid: string = medecinUid.uid;\n  patients: PatientData[] = [];\n\n  constructor(private firestore: AngularFirestore) {}\n\n  async ngOnInit() {\n    console.log('Med UID:', this.uid);\n    await this.getPatients();\n  }\n  async loadConsultations(patientUid: string) {\n    try {\n      const consultations = await getConsultations(this.firestore, medecinUid.uid, patientUid);\n      console.log('Consultations for patient UID', patientUid, ':', consultations);\n  \n      if (consultations && consultations.length > 0) {\n        // Concaténer les consultations à la liste existante au lieu de réinitialiser\n        this.consultations = this.consultations.concat(consultations);\n        // Trier toutes les consultations après chaque ajout\n        this.consultations.sort((a, b) => new Date(b.date).getTime() - new Date(a.date).getTime());\n      } else {\n        console.log('No consultations found for this patient.');\n      }\n    } catch (error) {\n      console.error('Error loading consultations for patient:', error);\n    }\n  }\n  \n  \n  async getPatients() {\n    try {\n      const patients = await getPatientsByMedUid(this.firestore, this.uid);\n      console.log(patients);\n      if (patients.length > 0) {\n        this.patients = patients.map(patient => ({\n          ...patient,\n          consultations: [] // Initialiser consultations comme un tableau vide\n        }));\n        console.log('patients', this.patients);\n  \n        // Charger les consultations pour chaque patient\n        for (const patient of this.patients) {\n          const consultations = await getConsultations(this.firestore, medecinUid.uid, patient.uid);\n          if (consultations && consultations.length > 0) {\n            patient.consultations = consultations; // Ajouter les consultations au patient\n          }\n        }\n      } \n      console.log(\"Patients trouvés :\", this.patients);\n    } catch (error) {\n      console.error('Erreur lors de la récupération des patients :', error);\n    }\n  }\n  \n  \n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}