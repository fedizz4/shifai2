{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/MacBook Air/Desktop/shifai1VV/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n// Import des modules nécessaires\nimport { initializeApp } from 'firebase/app';\nimport { getAnalytics } from 'firebase/analytics';\nimport { getAuth } from 'firebase/auth';\nimport { finalize } from 'rxjs/operators';\nimport { getStorage } from 'firebase/storage';\nimport { getFirestore } from 'firebase/firestore';\n// Configuration Firebase\nexport const firebaseConfig = {\n  apiKey: \"AIzaSyA7iKnEnxTdm9UdRnegNamwRDsLFESDk7s\",\n  authDomain: \"shifai-f46a0.firebaseapp.com\",\n  projectId: \"shifai-f46a0\",\n  storageBucket: \"shifai-f46a0.appspot.com\",\n  messagingSenderId: \"383597072570\",\n  appId: \"1:383597072570:web:870d9d280b22a1aa28b283\",\n  measurementId: \"G-Y2QLPH92NB\"\n};\n// Initialisation Firebase\nexport const app = initializeApp(firebaseConfig);\nexport const storage = getStorage(app, 'gs://shifai-f46a0.appspot.com');\nconst analytics = getAnalytics(app);\n// Objet d'authentification pour être utilisé dans d'autres fichiers\n// Fonction pour connecter l'utilisateur\n/* export async function loginUser(email: string, password: string) {\n  try {\n    \n    const userCredential = await signInWithEmailAndPassword(auth, email, password);\n    console.log('Utilisateur connecté :', userCredential.user);\n    return userCredential;\n  } catch (error) {\n    console.error(error);\n    throw error;\n  }\n}\n*/\nconst auth = getAuth(app);\nconst firestore = getFirestore(app);\nexport { auth, firestore };\nexport function AddUser(_x, _x2, _x3, _x4, _x5, _x6, _x7, _x8, _x9) {\n  return _AddUser.apply(this, arguments);\n}\nfunction _AddUser() {\n  _AddUser = _asyncToGenerator(function* (firestore, app, familyName, name, email, password, date, sexe, role) {\n    const user = {\n      familyName: familyName,\n      name: name,\n      email: email,\n      password: password,\n      date: date,\n      sexe: sexe,\n      role: role\n    };\n    try {\n      // Ajouter l'utilisateur à la collection \"inscrits\"\n      const userDocRef = yield firestore.collection('inscrits').add(user);\n      console.log('Utilisateur ajouté avec succès à Firebase.');\n      // Récupérer l'uid généré pour ce document\n      const uid = userDocRef.id;\n      // Mettre à jour le document avec l'uid\n      yield userDocRef.update({\n        uid: uid\n      });\n      console.log('UID ajouté avec succès à l\\'utilisateur.');\n      // Créer une sous-collection \"rdv\" pour l'utilisateur\n      yield userDocRef.collection('rdv').add({}); // Ajouter ici les données de rendez-vous si nécessaire\n      console.log('Sous-collection \"rdv\" créée avec succès pour l\\'utilisateur.');\n    } catch (error) {\n      console.error('Erreur lors de l\\'ajout de l\\'utilisateur et de la sous-collection \"rdv\" à Firebase :', error);\n      throw error; // Vous pouvez gérer l'erreur selon vos besoins\n    }\n  });\n  return _AddUser.apply(this, arguments);\n}\nexport function AddUserToAuth(_x10, _x11, _x12) {\n  return _AddUserToAuth.apply(this, arguments);\n}\nfunction _AddUserToAuth() {\n  _AddUserToAuth = _asyncToGenerator(function* (auth, email, password) {\n    try {\n      // Ajouter l'utilisateur à l'authentification Firebase\n      const userCredential = yield auth.createUserWithEmailAndPassword(email, password);\n      console.log('Utilisateur ajouté avec succès à l\\'authentification Firebase.');\n      return userCredential.user;\n    } catch (error) {\n      console.error('Erreur lors de l\\'ajout de l\\'utilisateur à l\\'authentification Firebase :', error);\n      throw error; // Vous pouvez gérer l'erreur selon vos besoins\n    }\n  });\n  return _AddUserToAuth.apply(this, arguments);\n}\nexport function AddMedicament(_x13, _x14, _x15, _x16, _x17, _x18) {\n  return _AddMedicament.apply(this, arguments);\n}\nfunction _AddMedicament() {\n  _AddMedicament = _asyncToGenerator(function* (firestore, app, nom, dosage, prises, uid) {\n    const medicament = {\n      nom: nom,\n      dosage: dosage,\n      prises: prises.map(prise => ({\n        label: prise.label,\n        checked: prise.checked\n      })),\n      uid: uid\n    };\n    try {\n      yield firestore.collection('medicaments').add(medicament);\n    } catch (error) {\n      console.error('Erreur lors de l\\'ajout du médicament:', error);\n      throw error; // Renvoyer l'erreur pour que le gestionnaire puisse la gérer\n    }\n  });\n  return _AddMedicament.apply(this, arguments);\n}\nexport function getMedicamentsByUid(_x19, _x20) {\n  return _getMedicamentsByUid.apply(this, arguments);\n}\nfunction _getMedicamentsByUid() {\n  _getMedicamentsByUid = _asyncToGenerator(function* (firestore, uid) {\n    try {\n      const snapshot = yield firestore.collection('medicaments').ref.where('uid', '==', uid).get();\n      // Convertir le snapshot en tableau de médicaments en utilisant l'interface\n      const medicaments = snapshot.docs.map(doc => {\n        const data = doc.data(); // Cast vers l'interface définie\n        return {\n          id: doc.id,\n          ...data\n        };\n      });\n      return medicaments;\n    } catch (error) {\n      console.error('Erreur lors de la récupération des médicaments :', error);\n      throw error;\n    }\n  });\n  return _getMedicamentsByUid.apply(this, arguments);\n}\nexport function getMedecinsByLocalisationAndSpecialite(_x21, _x22, _x23) {\n  return _getMedecinsByLocalisationAndSpecialite.apply(this, arguments);\n}\nfunction _getMedecinsByLocalisationAndSpecialite() {\n  _getMedecinsByLocalisationAndSpecialite = _asyncToGenerator(function* (firestore, localisation, specialite) {\n    try {\n      const snapshot = yield firestore.collection('medecin').ref.where('specialite', '==', specialite).where('etat', '==', localisation).get();\n      // Vérifier si snapshot est défini avant de l'utiliser\n      if (snapshot) {\n        // Convertir le snapshot en tableau de médecins\n        const medecins = snapshot.docs.map(doc => {\n          const data = doc.data();\n          return {\n            id: doc.id,\n            ...data\n          };\n        });\n        return medecins;\n      } else {\n        console.error('La requête n\\'a pas renvoyé de snapshot.');\n        return []; // Ou lancez une erreur appropriée selon vos besoins\n      }\n    } catch (error) {\n      console.error('Erreur lors de la récupération des médecins (firebase) :', error);\n      throw error;\n    }\n  });\n  return _getMedecinsByLocalisationAndSpecialite.apply(this, arguments);\n}\nexport function AddMedecin(_x24, _x25, _x26, _x27, _x28, _x29, _x30, _x31, _x32, _x33, _x34, _x35, _x36, _x37) {\n  return _AddMedecin.apply(this, arguments);\n}\nfunction _AddMedecin() {\n  _AddMedecin = _asyncToGenerator(function* (firestore, storage, nom, prenom, email, password, date, sexe, role, delegation, etat, specialite, telephone, file) {\n    let fileUrl = null;\n    if (file) {\n      const filePath = `gs://shifai-f46a0.appspot.com/${file.name}`; // Replace 'votre/chemin/dans/storage' with your storage path\n      const fileRef = storage.refFromURL(filePath);\n      const uploadTask = fileRef.put(file);\n      yield uploadTask.snapshotChanges().pipe(finalize( /*#__PURE__*/_asyncToGenerator(function* () {\n        fileUrl = yield fileRef.getDownloadURL().toPromise(); // Wait for the Observable to resolve\n      }))).toPromise(); // Wait for the upload task to complete\n    }\n    function AddMedecin(_x129, _x130, _x131, _x132, _x133, _x134, _x135, _x136, _x137, _x138, _x139, _x140, _x141) {\n      return _AddMedecin2.apply(this, arguments);\n    }\n    function _AddMedecin2() {\n      _AddMedecin2 = _asyncToGenerator(function* (firestore, nom, prenom, email, password, date, sexe, role, specialite, telephone, fileUrl, delegation, etat) {\n        try {\n          const medecin = {\n            nom: nom,\n            prenom: prenom,\n            email: email,\n            password: password,\n            date: date,\n            sexe: sexe,\n            role: role,\n            specialite: specialite,\n            telephone: telephone,\n            fileUrl: fileUrl,\n            delegation: delegation,\n            etat: etat\n          };\n          // Ajoutez le médecin à la collection \"admin\"\n          const medecinRef = yield firestore.collection('admin').add(medecin);\n          // Récupérez l'ID du médecin nouvellement ajouté\n          const medecinId = medecinRef.id;\n          yield medecinRef.update({\n            uid: medecinRef.id\n          });\n          // Créez automatiquement une sous-collection \"appointments\" pour ce médecin\n          yield firestore.collection('admin').doc(medecinId).collection('rdv').add({/* Données initiales des rendez-vous si nécessaire */});\n          console.log('Médecin ajouté avec succès à Firebase.');\n        } catch (error) {\n          console.error('Erreur lors de l\\'ajout du médecin à Firebase :', error);\n        }\n      });\n      return _AddMedecin2.apply(this, arguments);\n    }\n  });\n  return _AddMedecin.apply(this, arguments);\n}\nexport function getMedecinByUid(_x38, _x39) {\n  return _getMedecinByUid.apply(this, arguments);\n}\nfunction _getMedecinByUid() {\n  _getMedecinByUid = _asyncToGenerator(function* (firestore, uid) {\n    const snapshot = yield firestore.collection('medecin').ref.where('uid', '==', uid).get();\n    if (snapshot) {\n      // Convertir le snapshot en tableau de médecins\n      const medecins = snapshot.docs.map(doc => {\n        const data = doc.data();\n        return {\n          id: doc.id,\n          ...data\n        };\n      });\n      return medecins;\n    } else {\n      console.log('Aucun médecin trouvé pour cet UID :', uid);\n      return null; // Ou renvoyez un objet vide, selon vos besoins\n    }\n  });\n  return _getMedecinByUid.apply(this, arguments);\n}\nexport function loginMedecins(_x40, _x41, _x42) {\n  return _loginMedecins.apply(this, arguments);\n}\nfunction _loginMedecins() {\n  _loginMedecins = _asyncToGenerator(function* (firestore, email, password) {\n    try {\n      // Recherchez le médecin dans la base de données avec l'email fourni\n      const medecinCollection = firestore.collection('medecin').ref;\n      const medecinQuery = yield medecinCollection.where('email', '==', email).get();\n      if (medecinQuery.size === 1) {\n        // Vérifiez le mot de passe (vous pouvez utiliser une bibliothèque de hachage appropriée)\n        const medecinData = medecinQuery.docs[0].data();\n        const uid = medecinQuery.docs[0].id;\n        if (medecinData && medecinData.password === password) {\n          console.log('Connexion réussie en tant que médecin.');\n          return {\n            medecinData,\n            uid\n          }; // Authentification réussie, renvoie les informations du médecin et son UID\n        }\n      }\n      console.error('Identifiants invalides.');\n      return null; // Authentification échouée\n    } catch (error) {\n      console.error('Erreur lors de la connexion du médecin :', error);\n      throw error; // Vous pouvez gérer l'erreur ici ou la laisser remonter\n    }\n  });\n  return _loginMedecins.apply(this, arguments);\n}\nexport const medecinUid = {\n  uid: ''\n};\nexport function ajouterSecretaire(_x43, _x44, _x45, _x46, _x47, _x48, _x49) {\n  return _ajouterSecretaire.apply(this, arguments);\n}\nfunction _ajouterSecretaire() {\n  _ajouterSecretaire = _asyncToGenerator(function* (firestore, nom, prenom, mail, numero, password, medecinUid) {\n    try {\n      // Ajoutez votre logique pour ajouter les données du formulaire à la collection 'secretaire'\n      // Utilisez firestore.collection('secretaire') pour accéder à la collection 'secretaire' dans Firebase\n      const secretaire = {\n        nom: nom,\n        prenom: prenom,\n        mail: mail,\n        numero: numero,\n        password: password,\n        medecinUid: medecinUid\n      };\n      const userDocRef = yield firestore.collection('medecin').doc(medecinUid).collection('secretaire').add(secretaire);\n      const uid = userDocRef.id;\n      // Mettre à jour le document avec l'uid\n      yield userDocRef.update({\n        uid: uid\n      });\n      console.log('Secrétaire ajoutée avec succès à la base de données.');\n    } catch (error) {\n      console.error('Erreur lors de l\\'ajout du secrétaire à la base de données :', error);\n      throw error; // Vous pouvez gérer l'erreur ici ou la laisser remonter\n    }\n  });\n  return _ajouterSecretaire.apply(this, arguments);\n}\nexport function getSecretaireByUid(_x50, _x51) {\n  return _getSecretaireByUid.apply(this, arguments);\n}\nfunction _getSecretaireByUid() {\n  _getSecretaireByUid = _asyncToGenerator(function* (firestore, uid) {\n    const snapshot1 = yield firestore.collection('secretaire').ref.where('medecinUid', '==', uid).get();\n    const secretaires = snapshot1.docs.map(doc => {\n      const data = doc.data();\n      return {\n        uid: doc.id,\n        nom: data.nom,\n        prenom: data.prenom,\n        gmail: data.gmail,\n        numero: data.numero,\n        password: data.password\n      };\n    });\n    return secretaires;\n  });\n  return _getSecretaireByUid.apply(this, arguments);\n}\nexport function modifierSecretaire(_x52, _x53, _x54, _x55, _x56, _x57, _x58, _x59) {\n  return _modifierSecretaire.apply(this, arguments);\n}\nfunction _modifierSecretaire() {\n  _modifierSecretaire = _asyncToGenerator(function* (firestore, secretaireID, nom, prenom, mail, numero, password, medecinUid) {\n    try {\n      // Mettre à jour les données du secrétaire dans la collection 'inscrits'\n      yield firestore.collection('secretaire').doc(secretaireID).update({\n        nom: nom,\n        prenom: prenom,\n        mail: mail,\n        numero: numero,\n        password: password,\n        medecinUid: medecinUid\n      });\n      console.log('Secrétaire mis à jour avec succès dans la base de données.');\n    } catch (error) {\n      console.error('Erreur lors de la mise à jour du secrétaire dans la base de données :', error);\n      throw error; // Vous pouvez gérer l'erreur ici ou la laisser remonter\n    }\n  });\n  return _modifierSecretaire.apply(this, arguments);\n}\nexport function supprimerSecretaire(_x60, _x61) {\n  return _supprimerSecretaire.apply(this, arguments);\n}\n// firebaseConfig.ts\nfunction _supprimerSecretaire() {\n  _supprimerSecretaire = _asyncToGenerator(function* (firestore, secretaireId) {\n    try {\n      // Référence au document du secrétaire à supprimer\n      const secretaireRef = firestore.collection('secretaire').doc(secretaireId);\n      // Supprimer le document du secrétaire\n      yield secretaireRef.delete();\n      console.log('Le secrétaire a été supprimé avec succès.');\n    } catch (error) {\n      console.error('Erreur lors de la suppression du secrétaire :', error);\n    }\n  });\n  return _supprimerSecretaire.apply(this, arguments);\n}\nexport function getPatientsByMedecinUid(_x62, _x63) {\n  return _getPatientsByMedecinUid.apply(this, arguments);\n}\nfunction _getPatientsByMedecinUid() {\n  _getPatientsByMedecinUid = _asyncToGenerator(function* (firestore, medecinUid) {\n    try {\n      const snapshot = yield firestore.collection('patient').ref.where('medecinUid', '==', medecinUid).get();\n      const patients = snapshot.docs.map(doc => {\n        const data = doc.data();\n        return {\n          id: doc.id,\n          nom: data.nom,\n          prenom: data.prenom,\n          email: data.email,\n          telephone: data.telephone,\n          dateNaissance: data.dateNaissance,\n          sexe: data.sexe\n        };\n      });\n      return patients;\n    } catch (error) {\n      console.error('Error fetching patients:', error);\n      throw error;\n    }\n  });\n  return _getPatientsByMedecinUid.apply(this, arguments);\n}\n;\nexport function getMedicamentByName(_x64, _x65) {\n  return _getMedicamentByName.apply(this, arguments);\n}\nfunction _getMedicamentByName() {\n  _getMedicamentByName = _asyncToGenerator(function* (firestore, nomMedicament) {\n    const snapshot = yield firestore.collection('med').ref.where('specialite', '==', nomMedicament).get();\n    if (snapshot) {\n      // Convertir le snapshot en tableau de médicaments\n      const medicaments = snapshot.docs.map(doc => {\n        const data = doc.data();\n        return {\n          id: doc.id,\n          ...data\n        };\n      });\n      return medicaments;\n    } else {\n      console.log('Aucun médicament trouvé avec ce nom :', nomMedicament);\n      return null; // Ou renvoyez un objet vide, selon vos besoins\n    }\n  });\n  return _getMedicamentByName.apply(this, arguments);\n}\nexport function getPersonByUid(_x66, _x67) {\n  return _getPersonByUid.apply(this, arguments);\n}\nfunction _getPersonByUid() {\n  _getPersonByUid = _asyncToGenerator(function* (firestore, uid) {\n    try {\n      const snapshot = yield firestore.collection('personne').ref.where('uidPersonne', '==', uid).get();\n      if (snapshot) {\n        // Convertir le snapshot en objet personne\n        const personne = snapshot.docs.map(doc => {\n          const data = doc.data();\n          return {\n            id: doc.id,\n            ...data\n          };\n        });\n        return personne;\n      } else {\n        console.log('Aucune personne trouvée avec cet UID :', uid);\n        return null; // Ou renvoyez un objet vide, selon vos besoins\n      }\n    } catch (error) {\n      console.error('Erreur lors de la récupération de la personne par UID:', error);\n      throw error; // Vous pouvez gérer l'erreur selon vos besoins\n    }\n  });\n  return _getPersonByUid.apply(this, arguments);\n}\nexport function savePersonData(_x68, _x69, _x70, _x71) {\n  return _savePersonData.apply(this, arguments);\n}\nfunction _savePersonData() {\n  _savePersonData = _asyncToGenerator(function* (firestore, nom, prenom, uidPersonne) {\n    try {\n      const personne = {\n        nom: nom,\n        prenom: prenom,\n        uidPersonne: uidPersonne\n      };\n      yield firestore.collection('personne').add(personne);\n      console.log('Données de la personne enregistrées avec succès dans Firebase.');\n    } catch (error) {\n      console.error('Erreur lors de l\\'enregistrement des données de la personne dans Firebase :', error);\n      throw error;\n    }\n  });\n  return _savePersonData.apply(this, arguments);\n}\nexport function AddRendezVous(_x72, _x73, _x74) {\n  return _AddRendezVous.apply(this, arguments);\n}\nfunction _AddRendezVous() {\n  _AddRendezVous = _asyncToGenerator(function* (firestore, medecinId, rendezVousData) {\n    try {\n      // Enregistrer le rendez-vous dans la sous-collection \"rdv\" pour le médecin spécifié\n      yield firestore.collection('medecin').doc(medecinId).collection('rdv').add(rendezVousData);\n      // Enregistrer le nom et le prénom du patient dans la liste des patients du médecin\n      console.log('Rendez-vous ajouté avec succès à Firebase.');\n    } catch (error) {\n      console.error('Erreur lors de l\\'ajout du rendez-vous à Firebase :', error);\n    }\n  });\n  return _AddRendezVous.apply(this, arguments);\n}\nexport function getRdvByPatientUid(_x75, _x76) {\n  return _getRdvByPatientUid.apply(this, arguments);\n}\nfunction _getRdvByPatientUid() {\n  _getRdvByPatientUid = _asyncToGenerator(function* (firestore, userUid) {\n    try {\n      const snapshot = yield firestore.collection('inscrits').doc(userUid).collection('rdv').ref.where('useruid', '==', userUid).get();\n      if (snapshot) {\n        // Convertir le snapshot en objet rendez-vous\n        const rdv = snapshot.docs.map(doc => {\n          const data = doc.data();\n          return {\n            id: doc.id,\n            ...data\n          };\n        });\n        return rdv;\n      } else {\n        console.log('Aucun rendez-vous trouvé avec cet UID de patient :', userUid);\n        return null; // Ou renvoyez un objet vide, selon vos besoins\n      }\n    } catch (error) {\n      console.error('Erreur lors de la récupération des rendez-vous par UID de patient:', error);\n      throw error; // Vous pouvez gérer l'erreur selon vos besoins\n    }\n  });\n  return _getRdvByPatientUid.apply(this, arguments);\n}\nexport function AddRendezVousForUser(_x77, _x78, _x79) {\n  return _AddRendezVousForUser.apply(this, arguments);\n}\nfunction _AddRendezVousForUser() {\n  _AddRendezVousForUser = _asyncToGenerator(function* (firestore, userId, rendezVousData) {\n    try {\n      // Ajoutez le rendez-vous à la sous-collection \"rdv\" pour l'utilisateur spécifié\n      yield firestore.collection('inscrits').doc(userId).collection('rdv').add({\n        ...rendezVousData\n      });\n      console.log('Rendez-vous ajouté avec succès chez l\\'utilisateur dans Firebase.');\n    } catch (error) {\n      console.error('Erreur lors de l\\'ajout du rendez-vous chez l\\'utilisateur dans Firebase :', error);\n      throw error; // Vous pouvez gérer l'erreur selon vos besoins\n    }\n  });\n  return _AddRendezVousForUser.apply(this, arguments);\n}\nexport function loginUser(_x80, _x81, _x82) {\n  return _loginUser.apply(this, arguments);\n}\nfunction _loginUser() {\n  _loginUser = _asyncToGenerator(function* (firestore, email, password) {\n    try {\n      // Recherchez l'utilisateur dans la base de données avec l'email fourni\n      const userCollection = firestore.collection('inscrits').ref;\n      const userQuery = yield userCollection.where('email', '==', email).get();\n      if (userQuery.size === 1) {\n        // Vérifiez le mot de passe\n        const userData = userQuery.docs[0].data();\n        const uid = userQuery.docs[0].id;\n        if (userData && userData.password === password) {\n          console.log('Connexion réussie en tant qu\\'utilisateur.');\n          return {\n            userData,\n            uid\n          }; // Authentification réussie, renvoie les informations de l'utilisateur et son UID\n        }\n      }\n      console.error('Identifiants invalides.');\n      return null; // Authentification échouée\n    } catch (error) {\n      console.error('Erreur lors de la connexion de l\\'utilisateur :', error);\n      throw error; // Vous pouvez gérer l'erreur ici ou la laisser remonter\n    }\n  });\n  return _loginUser.apply(this, arguments);\n}\nexport function generateUniqueKey() {\n  return _generateUniqueKey.apply(this, arguments);\n}\nfunction _generateUniqueKey() {\n  _generateUniqueKey = _asyncToGenerator(function* () {\n    const timestamp = Date.now().toString(36); // Convertit le timestamp en base 36\n    const randomStr = Math.random().toString(36).substring(2, 10); // Génère une chaîne aléatoire en base 36\n    // Opérations mathématiques complexes pour générer une clé unique\n    const key = parseInt(timestamp + randomStr, 36).toString(36).toUpperCase();\n    return key;\n  });\n  return _generateUniqueKey.apply(this, arguments);\n}\nexport function getRdvByMedUid(_x83, _x84) {\n  return _getRdvByMedUid.apply(this, arguments);\n}\nfunction _getRdvByMedUid() {\n  _getRdvByMedUid = _asyncToGenerator(function* (firestore, userUid) {\n    try {\n      const snapshot = yield firestore.collection('medecin').doc(userUid).collection('rdv').ref.where('medecinuid', '==', userUid).get();\n      if (snapshot) {\n        // Convertir le snapshot en objet rendez-vous\n        const rdv = snapshot.docs.map(doc => {\n          const data = doc.data();\n          return {\n            id: doc.id,\n            ...data\n          };\n        });\n        return rdv;\n      } else {\n        console.log('Aucun rendez-vous trouvé avec cet UID de medecin :', userUid);\n        return null; // Ou renvoyez un objet vide, selon vos besoins\n      }\n    } catch (error) {\n      console.error('Erreur lors de la récupération des rendez-vous par UID de medecin:', error);\n      throw error; // Vous pouvez gérer l'erreur selon vos besoins\n    }\n  });\n  return _getRdvByMedUid.apply(this, arguments);\n}\nexport function deleteRendezVous(_x85, _x86, _x87, _x88) {\n  return _deleteRendezVous.apply(this, arguments);\n}\nfunction _deleteRendezVous() {\n  _deleteRendezVous = _asyncToGenerator(function* (firestore, medecinUid, rendezVous, excuse) {\n    try {\n      // Supprimer le rendez-vous du médecin avec l'excuse\n      const rendezVousSnapshot1 = yield firestore.collection('medecin').doc(rendezVous.medecinuid).collection('rdv').ref.where('key', '==', rendezVous.key).get();\n      rendezVousSnapshot1.forEach(doc => {\n        doc.ref.delete();\n      });\n      const rendezVousSnapshot3 = yield firestore.collection('medecin').doc(rendezVous.medecinuid).collection('rdv').ref.where('key', '==', rendezVous.key).get();\n      rendezVousSnapshot3.forEach(doc => {\n        doc.ref.set({\n          ...rendezVous,\n          statut: \"annule\",\n          excuse: excuse\n        });\n      });\n      // Mettre à jour le rendez-vous chez le patient avec l'excuse\n      const rendezVousSnapshot2 = yield firestore.collection('inscrits').doc(rendezVous.useruid).collection('rdv').ref.where('key', '==', rendezVous.key).get();\n      rendezVousSnapshot2.forEach(doc => {\n        doc.ref.set({\n          ...rendezVous,\n          statut: \"annule\",\n          excuse: excuse\n        });\n      });\n    } catch (error) {\n      console.error('Erreur lors de la suppression du rendez-vous:', error);\n      throw error;\n    }\n  });\n  return _deleteRendezVous.apply(this, arguments);\n}\nexport function deleteRendezVousR(_x89, _x90, _x91) {\n  return _deleteRendezVousR.apply(this, arguments);\n}\nfunction _deleteRendezVousR() {\n  _deleteRendezVousR = _asyncToGenerator(function* (firestore, medecinUid, rendezVous) {\n    try {\n      // Supprimer le rendez-vous du médecin avec l'excuse\n      const rendezVousSnapshot1 = yield firestore.collection('medecin').doc(rendezVous.medecinuid).collection('rdv').ref.where('key', '==', rendezVous.key).get();\n      rendezVousSnapshot1.forEach(doc => {\n        doc.ref.delete();\n      });\n      // Supprimer le rendez-vous chez le patient\n      const rendezVousSnapshot = yield firestore.collection('inscrits').doc(rendezVous.useruid).collection('rdv').ref.where('key', '==', rendezVous.key).get();\n      rendezVousSnapshot.forEach(doc => {\n        doc.ref.delete();\n      });\n      console.log('Rendez-vous supprimé avec succès.');\n    } catch (error) {\n      console.error('Erreur lors de la suppression du rendez-vous:', error);\n      throw error;\n    }\n  });\n  return _deleteRendezVousR.apply(this, arguments);\n}\nexport function savePatient(_x92, _x93, _x94) {\n  return _savePatient.apply(this, arguments);\n}\nfunction _savePatient() {\n  _savePatient = _asyncToGenerator(function* (firestore, patientData, medecinUid) {\n    try {\n      // Vérifie si le patient existe déjà avant de l'ajouter\n      const patientExists = yield checkPatientExistence(firestore, medecinUid, patientData);\n      if (!patientExists) {\n        const medecinRef = firestore.collection('medecin').doc(medecinUid);\n        yield medecinRef.collection('patients').add(patientData);\n        console.log('Patient ajouté avec succès chez le médecin.');\n      } else {\n        console.log('Le patient existe déjà chez ce médecin.');\n      }\n    } catch (error) {\n      console.error('Erreur lors de l\\'ajout du patient chez le médecin :', error);\n      throw error;\n    }\n  });\n  return _savePatient.apply(this, arguments);\n}\nfunction checkPatientExistence(_x95, _x96, _x97) {\n  return _checkPatientExistence.apply(this, arguments);\n} // Fonction pour ajouter un patient avec les champs nom et prénom remplis\nfunction _checkPatientExistence() {\n  _checkPatientExistence = _asyncToGenerator(function* (firestore, medecinUid, patientData) {\n    try {\n      const patientsSnapshot = yield firestore.collection('medecin').doc(medecinUid).collection('patients').ref.where('nom', '==', patientData.nom).where('prenom', '==', patientData.prenom).get();\n      return !patientsSnapshot.empty;\n    } catch (error) {\n      console.error('Erreur lors de la vérification de l\\'existence du patient :', error);\n      throw error;\n    }\n  });\n  return _checkPatientExistence.apply(this, arguments);\n}\nexport function AddPatientWithNomPrenom(_x98, _x99, _x100) {\n  return _AddPatientWithNomPrenom.apply(this, arguments);\n}\nfunction _AddPatientWithNomPrenom() {\n  _AddPatientWithNomPrenom = _asyncToGenerator(function* (firestore, medecinId, rendezVousData) {\n    try {\n      // Vérifiez si la collection patients existe, sinon la crée\n      const medecinRef = firestore.collection('medecin').doc(medecinId);\n      const medecinSnapshot = yield medecinRef.get().toPromise();\n      // Vérifiez si le médecin existe avant d'ajouter le patient\n      if (medecinSnapshot && medecinSnapshot.exists) {\n        // Vérifiez si un patient avec le même nom et prénom existe déjà dans la collection\n        const patientSnapshot = yield medecinRef.collection('patients').ref.where('nom', '==', rendezVousData.nom).where('prenom', '==', rendezVousData.prenom).get();\n        if (!patientSnapshot.empty) {\n          console.error('Un patient avec le même nom et prénom existe déjà.');\n          return; // Arrêtez l'exécution de la fonction s'il existe déjà un patient avec ces informations\n        }\n        // Ajoutez le patient avec les champs nom et prénom remplis\n        const patientRef = yield medecinRef.collection('patients').add({\n          nom: rendezVousData.nom,\n          prenom: rendezVousData.prenom,\n          age: '',\n          adresse: '',\n          telephone: '',\n          uid: '' // Ajoutez le champ uid avec une valeur vide pour le moment\n        });\n        // Mettez à jour le champ uid avec l'UID généré pour le patient\n        yield patientRef.update({\n          uid: patientRef.id\n        });\n        console.log('Patient ajouté avec succès à Firebase.', patientRef, patientRef.id);\n        try {\n          const patientConsultationRef = firestore.collection('medecin').doc(medecinId).collection('patients').doc(patientRef.id);\n          // Créer un objet de consultation avec la date et éventuellement les détails\n          const consultationData = {\n            date: rendezVousData.date,\n            details: '' // Vous pouvez fournir les détails de la consultation ici\n          };\n          // Ajouter la nouvelle consultation dans la collection 'consultations' du patient\n          yield patientConsultationRef.collection('consultations').add(consultationData);\n          console.log('Nouvelle consultation ajoutée avec succès.');\n        } catch (error) {\n          console.error('Erreur lors de l\\'ajout de la consultation :', error);\n        }\n      } else {\n        console.error('Le médecin n\\'existe pas. Impossible d\\'ajouter le patient.');\n      }\n    } catch (error) {\n      console.error('Erreur lors de l\\'ajout du patient à Firebase :', error);\n    }\n  });\n  return _AddPatientWithNomPrenom.apply(this, arguments);\n}\nexport function getPatientsByMedUid(_x101, _x102) {\n  return _getPatientsByMedUid.apply(this, arguments);\n}\nfunction _getPatientsByMedUid() {\n  _getPatientsByMedUid = _asyncToGenerator(function* (firestore, medecinId) {\n    try {\n      // Récupérer la référence du médecin\n      const medecinRef = firestore.collection('medecin').doc(medecinId);\n      // Récupérer la liste des patients du médecin\n      const patientsSnapshot = yield medecinRef.collection('patients').get().toPromise();\n      // Initialiser un tableau pour stocker les patients\n      const patients = [];\n      // Vérifier si la snapshot des patients contient des documents\n      if (patientsSnapshot) {\n        // Parcourir les documents de la collection patients\n        patientsSnapshot.forEach(doc => {\n          // Récupérer les données du patient\n          const patientData = doc.data();\n          // Ajouter un uid au patient (peut être n'importe quel identifiant unique)\n          patientData.uid = doc.id;\n          // Ajouter les données du patient au tableau\n          patients.push(patientData);\n        });\n      }\n      // Retourner le tableau de patients\n      return patients;\n    } catch (error) {\n      console.error('Erreur lors de la récupération des patients:', error);\n      return []; // Retourner un tableau vide en cas d'erreur\n    }\n  });\n  return _getPatientsByMedUid.apply(this, arguments);\n}\nexport function getConsultationsForPatient(_x103, _x104, _x105) {\n  return _getConsultationsForPatient.apply(this, arguments);\n}\nfunction _getConsultationsForPatient() {\n  _getConsultationsForPatient = _asyncToGenerator(function* (firestore, medecinUid, patientUid) {\n    try {\n      const consultations = [];\n      // Récupérer les consultations du patient en utilisant son UID\n      const snapshot = yield firestore.collection('medecin').doc(medecinUid).collection('patients').doc(patientUid).collection('consultations').get().toPromise();\n      if (snapshot) snapshot.forEach(doc => {\n        const consultation = doc.data();\n        consultations.push(consultation);\n      });\n      return consultations;\n    } catch (error) {\n      console.error('Erreur lors de la récupération des consultations pour le patient avec UID', patientUid, 'du médecin avec UID', medecinUid, ':', error);\n      return [];\n    }\n  });\n  return _getConsultationsForPatient.apply(this, arguments);\n}\nexport function getConsultations(_x106, _x107, _x108) {\n  return _getConsultations.apply(this, arguments);\n}\nfunction _getConsultations() {\n  _getConsultations = _asyncToGenerator(function* (firestore, medecinUid, patientUid) {\n    try {\n      const snapshot = yield firestore.collection('medecin').doc(medecinUid).collection('patients').doc(patientUid).collection('consultations').ref.get();\n      if (snapshot) {\n        // Convertir le snapshot en objet de consultations\n        const consultations = snapshot.docs.map(doc => {\n          const data = doc.data();\n          return {\n            id: doc.id,\n            ...data\n          };\n        });\n        return consultations;\n      } else {\n        console.log('Aucune consultation trouvée avec cet UID de patient et de médecin :', patientUid, medecinUid);\n        return null;\n      }\n    } catch (error) {\n      console.error('Erreur lors de la récupération des consultations par UID de patient et de médecin :', error);\n      throw error; // Vous pouvez gérer l'erreur selon vos besoins\n    }\n  });\n  return _getConsultations.apply(this, arguments);\n}\nexport function modifierSauvegarderConsultation(_x109, _x110, _x111, _x112, _x113) {\n  return _modifierSauvegarderConsultation.apply(this, arguments);\n}\nfunction _modifierSauvegarderConsultation() {\n  _modifierSauvegarderConsultation = _asyncToGenerator(function* (firestore, medecinUid, patientUid, date, newDetails) {\n    try {\n      const consultationsRef = firestore.collection('medecin').doc(medecinUid).collection('patients').doc(patientUid).collection('consultations').ref;\n      // Récupérer la consultation à modifier\n      const snapshot = yield consultationsRef.where('date', '==', date).get();\n      snapshot.forEach(doc => {\n        const consultationData = doc.data();\n        // Modifier les détails de la consultation si la date correspond\n        consultationsRef.doc(doc.id).update({\n          details: newDetails\n        });\n      });\n      console.log('Détails de la consultation mis à jour avec succès.');\n    } catch (error) {\n      console.error('Erreur lors de la modification et de la sauvegarde des détails de la consultation :', error);\n      throw error; // Vous pouvez gérer l'erreur selon vos besoins\n    }\n  });\n  return _modifierSauvegarderConsultation.apply(this, arguments);\n}\nexport function ajouterConsultation(_x114, _x115, _x116, _x117) {\n  return _ajouterConsultation.apply(this, arguments);\n}\nfunction _ajouterConsultation() {\n  _ajouterConsultation = _asyncToGenerator(function* (firestore, medecinId, patientUid, consultationData) {\n    try {\n      const patientConsultationRef = firestore.collection('medecin').doc(medecinId).collection('patients').doc(patientUid);\n      // Ajouter la nouvelle consultation dans la collection 'consultations' du patient\n      yield patientConsultationRef.collection('consultations').add(consultationData);\n      console.log('Nouvelle consultation ajoutée avec succès.');\n    } catch (error) {\n      console.error('Erreur lors de l\\'ajout de la consultation :', error);\n      throw error; // Gérer l'erreur selon vos besoins\n    }\n  });\n  return _ajouterConsultation.apply(this, arguments);\n}\nexport function chercherPatient(_x118, _x119, _x120, _x121, _x122) {\n  return _chercherPatient.apply(this, arguments);\n}\nfunction _chercherPatient() {\n  _chercherPatient = _asyncToGenerator(function* (firestore, medecinId, nom, prenom, email) {\n    try {\n      const patientsSnapshot = yield firestore.collection('medecin').doc(medecinId).collection('patients').ref.where('nom', '==', nom).where('prenom', '==', prenom).where('email', '==', email) // Ajoutez le critère de recherche pour l'e-mail\n      .get();\n      if (!patientsSnapshot.empty) {\n        // Retournez l'UID du premier patient trouvé\n        return patientsSnapshot.docs[0].id;\n      } else {\n        // Aucun patient trouvé avec ce nom, prénom et e-mail\n        return null;\n      }\n    } catch (error) {\n      console.error('Erreur lors de la recherche du patient :', error);\n      return null;\n    }\n  });\n  return _chercherPatient.apply(this, arguments);\n}\nexport function getPatientsUIDByMedecinId(_x123, _x124) {\n  return _getPatientsUIDByMedecinId.apply(this, arguments);\n}\nfunction _getPatientsUIDByMedecinId() {\n  _getPatientsUIDByMedecinId = _asyncToGenerator(function* (firestore, medecinId) {\n    try {\n      const patientsSnapshot = yield firestore.collection('medecin').doc(medecinId).collection('patients').get().toPromise();\n      if (patientsSnapshot) {\n        // Retournez les UID des patients\n        return patientsSnapshot.docs.map(doc => doc.id);\n      } else {\n        // Aucun patient trouvé\n        return [];\n      }\n    } catch (error) {\n      console.error('Erreur lors de la récupération des UID des patients :', error);\n      return [];\n    }\n  });\n  return _getPatientsUIDByMedecinId.apply(this, arguments);\n}\nexport function checkExistingPatient(_x125, _x126, _x127, _x128) {\n  return _checkExistingPatient.apply(this, arguments);\n}\nfunction _checkExistingPatient() {\n  _checkExistingPatient = _asyncToGenerator(function* (firestore, medecinId, nom, prenom) {\n    try {\n      const patientsSnapshot = yield firestore.collection('medecin').doc(medecinId).collection('patients').ref.where('nom', '==', nom).where('prenom', '==', prenom).get();\n      if (!patientsSnapshot.empty) {\n        // Un patient avec le même nom et prénom existe déjà\n        const patientDoc = patientsSnapshot.docs[0];\n        return patientDoc.id;\n      } else {\n        // Aucun patient trouvé avec ce nom et prénom\n        return null;\n      }\n    } catch (error) {\n      console.error('Erreur lors de la vérification de l\\'existence du patient :', error);\n      return null;\n    }\n  });\n  return _checkExistingPatient.apply(this, arguments);\n}","map":{"version":3,"names":["initializeApp","getAnalytics","getAuth","finalize","getStorage","getFirestore","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","app","storage","analytics","auth","firestore","AddUser","_x","_x2","_x3","_x4","_x5","_x6","_x7","_x8","_x9","_AddUser","apply","arguments","_asyncToGenerator","familyName","name","email","password","date","sexe","role","user","userDocRef","collection","add","console","log","uid","id","update","error","AddUserToAuth","_x10","_x11","_x12","_AddUserToAuth","userCredential","createUserWithEmailAndPassword","AddMedicament","_x13","_x14","_x15","_x16","_x17","_x18","_AddMedicament","nom","dosage","prises","medicament","map","prise","label","checked","getMedicamentsByUid","_x19","_x20","_getMedicamentsByUid","snapshot","ref","where","get","medicaments","docs","doc","data","getMedecinsByLocalisationAndSpecialite","_x21","_x22","_x23","_getMedecinsByLocalisationAndSpecialite","localisation","specialite","medecins","AddMedecin","_x24","_x25","_x26","_x27","_x28","_x29","_x30","_x31","_x32","_x33","_x34","_x35","_x36","_x37","_AddMedecin","prenom","delegation","etat","telephone","file","fileUrl","filePath","fileRef","refFromURL","uploadTask","put","snapshotChanges","pipe","getDownloadURL","toPromise","_x129","_x130","_x131","_x132","_x133","_x134","_x135","_x136","_x137","_x138","_x139","_x140","_x141","_AddMedecin2","medecin","medecinRef","medecinId","getMedecinByUid","_x38","_x39","_getMedecinByUid","loginMedecins","_x40","_x41","_x42","_loginMedecins","medecinCollection","medecinQuery","size","medecinData","medecinUid","ajouterSecretaire","_x43","_x44","_x45","_x46","_x47","_x48","_x49","_ajouterSecretaire","mail","numero","secretaire","getSecretaireByUid","_x50","_x51","_getSecretaireByUid","snapshot1","secretaires","gmail","modifierSecretaire","_x52","_x53","_x54","_x55","_x56","_x57","_x58","_x59","_modifierSecretaire","secretaireID","supprimerSecretaire","_x60","_x61","_supprimerSecretaire","secretaireId","secretaireRef","delete","getPatientsByMedecinUid","_x62","_x63","_getPatientsByMedecinUid","patients","dateNaissance","getMedicamentByName","_x64","_x65","_getMedicamentByName","nomMedicament","getPersonByUid","_x66","_x67","_getPersonByUid","personne","savePersonData","_x68","_x69","_x70","_x71","_savePersonData","uidPersonne","AddRendezVous","_x72","_x73","_x74","_AddRendezVous","rendezVousData","getRdvByPatientUid","_x75","_x76","_getRdvByPatientUid","userUid","rdv","AddRendezVousForUser","_x77","_x78","_x79","_AddRendezVousForUser","userId","loginUser","_x80","_x81","_x82","_loginUser","userCollection","userQuery","userData","generateUniqueKey","_generateUniqueKey","timestamp","Date","now","toString","randomStr","Math","random","substring","key","parseInt","toUpperCase","getRdvByMedUid","_x83","_x84","_getRdvByMedUid","deleteRendezVous","_x85","_x86","_x87","_x88","_deleteRendezVous","rendezVous","excuse","rendezVousSnapshot1","medecinuid","forEach","rendezVousSnapshot3","set","statut","rendezVousSnapshot2","useruid","deleteRendezVousR","_x89","_x90","_x91","_deleteRendezVousR","rendezVousSnapshot","savePatient","_x92","_x93","_x94","_savePatient","patientData","patientExists","checkPatientExistence","_x95","_x96","_x97","_checkPatientExistence","patientsSnapshot","empty","AddPatientWithNomPrenom","_x98","_x99","_x100","_AddPatientWithNomPrenom","medecinSnapshot","exists","patientSnapshot","patientRef","age","adresse","patientConsultationRef","consultationData","details","getPatientsByMedUid","_x101","_x102","_getPatientsByMedUid","push","getConsultationsForPatient","_x103","_x104","_x105","_getConsultationsForPatient","patientUid","consultations","consultation","getConsultations","_x106","_x107","_x108","_getConsultations","modifierSauvegarderConsultation","_x109","_x110","_x111","_x112","_x113","_modifierSauvegarderConsultation","newDetails","consultationsRef","ajouterConsultation","_x114","_x115","_x116","_x117","_ajouterConsultation","chercherPatient","_x118","_x119","_x120","_x121","_x122","_chercherPatient","getPatientsUIDByMedecinId","_x123","_x124","_getPatientsUIDByMedecinId","checkExistingPatient","_x125","_x126","_x127","_x128","_checkExistingPatient","patientDoc"],"sources":["C:\\Users\\MacBook Air\\Desktop\\shifai1VV\\src\\firebaseConfig.ts"],"sourcesContent":["// Import des modules nécessaires\r\nimport { initializeApp, FirebaseApp } from 'firebase/app';\r\nimport { getAnalytics } from 'firebase/analytics';\r\nimport { getAuth, signInWithEmailAndPassword, Auth } from 'firebase/auth';\r\nimport { AngularFirestore, CollectionReference, DocumentData, QuerySnapshot } from '@angular/fire/compat/firestore';\r\nimport { Observable, map } from 'rxjs';\r\nimport { AngularFireStorage } from '@angular/fire/compat/storage';\r\nimport { finalize } from 'rxjs/operators';\r\nimport { getStorage } from 'firebase/storage';\r\nimport { AngularFireAuth } from '@angular/fire/compat/auth';\r\nimport { QueryDocumentSnapshot, getFirestore } from 'firebase/firestore';\r\nimport { p } from './app/patient/patient.page';\r\nimport { consultationdate } from './app/consultationliste/consultationliste.page';\r\n\r\n\r\n\r\n// Configuration Firebase\r\n\r\nexport const firebaseConfig = {\r\n  apiKey: \"AIzaSyA7iKnEnxTdm9UdRnegNamwRDsLFESDk7s\",\r\n  authDomain: \"shifai-f46a0.firebaseapp.com\",\r\n  projectId: \"shifai-f46a0\",\r\n  storageBucket: \"shifai-f46a0.appspot.com\",\r\n  messagingSenderId: \"383597072570\",\r\n  appId: \"1:383597072570:web:870d9d280b22a1aa28b283\",\r\n  measurementId: \"G-Y2QLPH92NB\"\r\n};\r\n\r\n// Initialisation Firebase\r\nexport const app: FirebaseApp = initializeApp(firebaseConfig);\r\n\r\nexport const storage = getStorage(app, 'gs://shifai-f46a0.appspot.com');\r\n\r\nconst analytics = getAnalytics(app);\r\n\r\n// Objet d'authentification pour être utilisé dans d'autres fichiers\r\n\r\n\r\n\r\n\r\n// Fonction pour connecter l'utilisateur\r\n/* export async function loginUser(email: string, password: string) {\r\n  try {\r\n    \r\n    const userCredential = await signInWithEmailAndPassword(auth, email, password);\r\n    console.log('Utilisateur connecté :', userCredential.user);\r\n    return userCredential;\r\n  } catch (error) {\r\n    console.error(error);\r\n    throw error;\r\n  }\r\n}\r\n*/\r\nconst auth = getAuth(app);\r\nconst firestore = getFirestore(app);\r\n\r\nexport { auth, firestore, RendezVousData };\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport async function AddUser(firestore: AngularFirestore, app: FirebaseApp, familyName: string, name: string, email: string, password: string, date: string, sexe: string, role: string) {\r\n  const user = {\r\n    familyName: familyName,\r\n    name: name,\r\n    email: email,\r\n    password: password,\r\n    date: date,\r\n    sexe: sexe,\r\n    role: role,\r\n  };\r\n\r\n  try {\r\n    // Ajouter l'utilisateur à la collection \"inscrits\"\r\n    const userDocRef = await firestore.collection('inscrits').add(user);\r\n\r\n    console.log('Utilisateur ajouté avec succès à Firebase.');\r\n\r\n    // Récupérer l'uid généré pour ce document\r\n    const uid = userDocRef.id;\r\n\r\n    // Mettre à jour le document avec l'uid\r\n    await userDocRef.update({ uid: uid });\r\n\r\n    console.log('UID ajouté avec succès à l\\'utilisateur.');\r\n\r\n    // Créer une sous-collection \"rdv\" pour l'utilisateur\r\n    await userDocRef.collection('rdv').add({}); // Ajouter ici les données de rendez-vous si nécessaire\r\n\r\n    console.log('Sous-collection \"rdv\" créée avec succès pour l\\'utilisateur.');\r\n\r\n  } catch (error) {\r\n    console.error('Erreur lors de l\\'ajout de l\\'utilisateur et de la sous-collection \"rdv\" à Firebase :', error);\r\n    throw error; // Vous pouvez gérer l'erreur selon vos besoins\r\n  }\r\n}\r\nexport async function AddUserToAuth(auth: AngularFireAuth, email: string, password: string) {\r\n  try {\r\n    // Ajouter l'utilisateur à l'authentification Firebase\r\n    const userCredential = await auth.createUserWithEmailAndPassword(email, password);\r\n    console.log('Utilisateur ajouté avec succès à l\\'authentification Firebase.');\r\n    return userCredential.user;\r\n  } catch (error) {\r\n    console.error('Erreur lors de l\\'ajout de l\\'utilisateur à l\\'authentification Firebase :', error);\r\n    throw error; // Vous pouvez gérer l'erreur selon vos besoins\r\n  }\r\n}\r\nexport async function AddMedicament(firestore: AngularFirestore, app: FirebaseApp, nom: string, dosage: number, prises: any[], uid:string) {\r\n  const medicament = {\r\n    nom: nom,\r\n    dosage: dosage,\r\n    prises: prises.map(prise => ({\r\n      label: prise.label,\r\n      checked: prise.checked\r\n    })),\r\n    uid: uid,\r\n  };\r\n\r\n  try {\r\n    await firestore.collection('medicaments').add(medicament);\r\n  } catch (error) {\r\n    console.error('Erreur lors de l\\'ajout du médicament:', error);\r\n    throw error;  // Renvoyer l'erreur pour que le gestionnaire puisse la gérer\r\n  }\r\n}\r\n\r\ninterface MedicamentData {\r\n  nom: string;\r\n  dosage: number;\r\n  prise: boolean[];\r\n  // Autres champs si nécessaire...\r\n}\r\n\r\nexport async function getMedicamentsByUid(firestore: AngularFirestore, uid: string) {\r\n  try {\r\n    const snapshot = await firestore.collection('medicaments').ref.where('uid', '==', uid).get();\r\n  \r\n    // Convertir le snapshot en tableau de médicaments en utilisant l'interface\r\n    const medicaments: MedicamentData[] = snapshot.docs.map(doc => {\r\n      const data = doc.data() as MedicamentData; // Cast vers l'interface définie\r\n      return { id: doc.id, ...data };\r\n    });\r\n  \r\n    return medicaments;\r\n  } catch (error) {\r\n    console.error('Erreur lors de la récupération des médicaments :', error);\r\n    throw error;\r\n  }\r\n  \r\n}\r\n\r\n// Exemple d'interface pour la structure des données des médecins\r\ninterface MedecinData {\r\n  // Définissez les champs nécessaires\r\n  uid : string ;\r\n  nom: string;\r\n  prenom:string;\r\n  localisation:string;\r\n  specialite:string;\r\n  // ... autres champs\r\n}\r\n\r\n\r\n\r\n\r\nexport async function getMedecinsByLocalisationAndSpecialite(firestore: AngularFirestore, localisation: string | null, specialite: string | null) {\r\n  try {\r\n    const snapshot = await firestore.collection('medecin').ref.where('specialite', '==', specialite).where('etat', '==', localisation).get();\r\n\r\n    // Vérifier si snapshot est défini avant de l'utiliser\r\n    if (snapshot) {\r\n      // Convertir le snapshot en tableau de médecins\r\n      const medecins: MedecinData[] = snapshot.docs.map(doc => {\r\n        const data = doc.data() as MedecinData;\r\n        return { id: doc.id, ...data };\r\n      });\r\n\r\n      return medecins;\r\n    } else {\r\n      console.error('La requête n\\'a pas renvoyé de snapshot.');\r\n      return []; // Ou lancez une erreur appropriée selon vos besoins\r\n    }\r\n  } catch (error) {\r\n    console.error('Erreur lors de la récupération des médecins (firebase) :', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport async function AddMedecin(\r\n  firestore: AngularFirestore,\r\n  storage: AngularFireStorage,\r\n  nom: string,\r\n  prenom: string,\r\n  email: string,\r\n  password: string,\r\n  date: string,\r\n  sexe: string,\r\n  role: string,\r\n  delegation: string,\r\n  etat: string,\r\n  specialite: string,\r\n  telephone: string,\r\n  file: File | null\r\n) {\r\n  let fileUrl: string | null = null;\r\n\r\n  if (file) {\r\n    const filePath = `gs://shifai-f46a0.appspot.com/${file.name}`; // Replace 'votre/chemin/dans/storage' with your storage path\r\n    const fileRef = storage.refFromURL(filePath);\r\n\r\n    const uploadTask = fileRef.put(file);\r\n\r\n    await uploadTask.snapshotChanges().pipe(\r\n      finalize(async () => {\r\n        fileUrl = await fileRef.getDownloadURL().toPromise(); // Wait for the Observable to resolve\r\n      })\r\n    ).toPromise(); // Wait for the upload task to complete\r\n  }\r\n\r\n  async function AddMedecin(firestore: AngularFirestore, nom: string, prenom: string, email: string, password: string, date: string, sexe: string, role: string, specialite: string, telephone: string, fileUrl: string, delegation: string, etat: string) {\r\n    try {\r\n      const medecin = {\r\n        nom: nom,\r\n        prenom: prenom,\r\n        email: email,\r\n        password: password,\r\n        date: date,\r\n        sexe: sexe,\r\n        role: role,\r\n        specialite: specialite,\r\n        telephone: telephone,\r\n        fileUrl: fileUrl,\r\n        delegation: delegation,\r\n        etat: etat,\r\n      };\r\n  \r\n      // Ajoutez le médecin à la collection \"admin\"\r\n      const medecinRef = await firestore.collection('admin').add(medecin);\r\n  \r\n      // Récupérez l'ID du médecin nouvellement ajouté\r\n      const medecinId = medecinRef.id;\r\n      await medecinRef.update({ uid: medecinRef.id });\r\n\r\n\r\n  \r\n      // Créez automatiquement une sous-collection \"appointments\" pour ce médecin\r\n      await firestore.collection('admin').doc(medecinId).collection('rdv').add({ /* Données initiales des rendez-vous si nécessaire */ });\r\n  \r\n      console.log('Médecin ajouté avec succès à Firebase.');\r\n    } catch (error) {\r\n      console.error('Erreur lors de l\\'ajout du médecin à Firebase :', error);\r\n    }\r\n  }\r\n}  \r\n\r\n\r\n\r\nexport async function getMedecinByUid(firestore: AngularFirestore, uid: string) {\r\n  const snapshot = await firestore.collection('medecin').ref.where('uid', '==', uid).get();\r\n  if (snapshot) {\r\n    // Convertir le snapshot en tableau de médecins\r\n    const medecins: MedecinData[] = snapshot.docs.map(doc => {\r\n      const data = doc.data() as MedecinData;\r\n      return { id: doc.id, ...data };\r\n    });\r\n\r\n    return medecins;\r\n      } else {\r\n        console.log('Aucun médecin trouvé pour cet UID :', uid);\r\n        return null; // Ou renvoyez un objet vide, selon vos besoins\r\n      }\r\n    }\r\n\r\n    export async function loginMedecins(firestore: AngularFirestore, email: string, password: string): Promise<{ medecinData: any, uid: string } | null> {\r\n      try {\r\n        // Recherchez le médecin dans la base de données avec l'email fourni\r\n        const medecinCollection: CollectionReference<DocumentData> = firestore.collection('medecin').ref as CollectionReference<DocumentData>;\r\n        const medecinQuery: QuerySnapshot<DocumentData> = await medecinCollection.where('email', '==', email).get();\r\n    \r\n        if (medecinQuery.size === 1) {\r\n          // Vérifiez le mot de passe (vous pouvez utiliser une bibliothèque de hachage appropriée)\r\n          const medecinData = medecinQuery.docs[0].data() as { password?: string };\r\n          const uid = medecinQuery.docs[0].id;\r\n    \r\n          if (medecinData && medecinData.password === password) {\r\n            console.log('Connexion réussie en tant que médecin.');\r\n            return { medecinData, uid }; // Authentification réussie, renvoie les informations du médecin et son UID\r\n          }\r\n        }\r\n    \r\n        console.error('Identifiants invalides.');\r\n        return null; // Authentification échouée\r\n    \r\n      } catch (error) {\r\n        console.error('Erreur lors de la connexion du médecin :', error);\r\n        throw error; // Vous pouvez gérer l'erreur ici ou la laisser remonter\r\n      }\r\n    }\r\n  \r\n    export const medecinUid = { uid: '' };\r\n\r\n    export async function ajouterSecretaire(\r\n      firestore: AngularFirestore,\r\n      nom: string,\r\n      prenom: string,\r\n      mail: string,\r\n      numero: string,\r\n      password: string,\r\n      medecinUid: string\r\n    ) {\r\n      try {\r\n        // Ajoutez votre logique pour ajouter les données du formulaire à la collection 'secretaire'\r\n        // Utilisez firestore.collection('secretaire') pour accéder à la collection 'secretaire' dans Firebase\r\n\r\n        const secretaire ={\r\n       \r\n          nom: nom,\r\n          prenom: prenom,\r\n          mail: mail,\r\n          numero: numero,\r\n          password: password,\r\n          medecinUid: medecinUid\r\n        };\r\n        const userDocRef = await firestore.collection('medecin').doc(medecinUid).collection('secretaire').add(secretaire);\r\n\r\n\r\n        const uid = userDocRef.id;\r\n\r\n    // Mettre à jour le document avec l'uid\r\n    await userDocRef.update({ uid: uid });\r\n    \r\n        console.log('Secrétaire ajoutée avec succès à la base de données.');\r\n      } catch (error) {\r\n        console.error('Erreur lors de l\\'ajout du secrétaire à la base de données :', error);\r\n        throw error; // Vous pouvez gérer l'erreur ici ou la laisser remonter\r\n      }\r\n    }\r\n   \r\n    \r\n    \r\n    interface secretaireData {\r\n      uid:string ;\r\n      prenom : string ;\r\n      nom : string ;\r\n      numero : string ;\r\n      gmail : string ;\r\n      password : string ;\r\n    }\r\n    export async function getSecretaireByUid  (firestore: AngularFirestore, uid: string) {\r\n        const snapshot1 = await firestore.collection('secretaire').ref.where('medecinUid', '==', uid).get();\r\n\r\n\r\n        const secretaires: secretaireData[] = snapshot1.docs.map(doc => {\r\n          const data = doc.data() as secretaireData;\r\n    \r\n          return {\r\n            uid: doc.id,\r\n            nom: data.nom,\r\n            prenom: data.prenom,\r\n            gmail: data.gmail,\r\n            numero: data.numero,\r\n            password: data.password,\r\n          };\r\n        });\r\n          return secretaires;\r\n\r\n       \r\n\r\n\r\n      \r\n        }\r\n        export async function modifierSecretaire(\r\n          firestore: AngularFirestore,\r\n          secretaireID: string,\r\n          nom: string,\r\n          prenom: string,\r\n          mail: string,\r\n          numero: string,\r\n          password: string,\r\n          medecinUid: string\r\n        ): Promise<void> {\r\n          try {\r\n            // Mettre à jour les données du secrétaire dans la collection 'inscrits'\r\n            await firestore.collection('secretaire').doc(secretaireID).update({\r\n              nom: nom,\r\n              prenom: prenom,\r\n              mail: mail,\r\n              numero: numero,\r\n              password: password,\r\n              medecinUid: medecinUid\r\n            });\r\n        \r\n            console.log('Secrétaire mis à jour avec succès dans la base de données.');\r\n          } catch (error) {\r\n            console.error('Erreur lors de la mise à jour du secrétaire dans la base de données :', error);\r\n            throw error; // Vous pouvez gérer l'erreur ici ou la laisser remonter\r\n          }\r\n        }\r\n        \r\n        export async function supprimerSecretaire(firestore: AngularFirestore, secretaireId: string) {\r\n          try {\r\n              // Référence au document du secrétaire à supprimer\r\n              const secretaireRef = firestore.collection('secretaire').doc(secretaireId);\r\n      \r\n              // Supprimer le document du secrétaire\r\n              await secretaireRef.delete();\r\n      \r\n              console.log('Le secrétaire a été supprimé avec succès.');\r\n          } catch (error) {\r\n              console.error('Erreur lors de la suppression du secrétaire :', error);\r\n          }\r\n      }\r\n\r\n    \r\n\r\n    // firebaseConfig.ts\r\n\r\nexport async function getPatientsByMedecinUid(firestore: AngularFirestore, medecinUid: string): Promise<Patient[]> {\r\n  try {\r\n    const snapshot = await firestore.collection('patient').ref.where('medecinUid', '==', medecinUid).get();\r\n\r\n    const patients: Patient[] = snapshot.docs.map(doc => {\r\n      const data = doc.data() as PatientData;\r\n\r\n      return {\r\n        id: doc.id,\r\n        nom: data.nom,\r\n        prenom: data.prenom,\r\n        email: data.email,\r\n        telephone: data.telephone,\r\n        dateNaissance: data.dateNaissance,\r\n        sexe: data.sexe,\r\n      };\r\n    });\r\n\r\n    return patients;\r\n  } catch (error) {\r\n    console.error('Error fetching patients:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n    interface PatientData {\r\n      nom: string;\r\n      prenom: string;\r\n      email: string;\r\n      telephone: string;\r\n      dateNaissance: string;\r\n      sexe: string;\r\n    }\r\n    \r\n    export interface Patient {\r\n      id: string;\r\n      nom: string;\r\n      prenom: string;\r\n      email: string;\r\n      telephone: string;\r\n      dateNaissance: string;\r\n      sexe: string;\r\n    }\r\n\r\n\r\n\r\n    export interface MedicamentDD {\r\n      class: string;\r\n      conditionnement: string;\r\n      conservation: string;\r\n      amm: string;\r\n      dateamm: string;\r\n      dci: string;\r\n      dosage: string;\r\n      forme: string;\r\n      indication: string;\r\n      laboratoire: string;\r\n      sousclass: string;\r\n      specialite: string;\r\n      specification: string;\r\n      tableau: string;\r\n    }\r\n    \r\n\r\n    export async function getMedicamentByName(firestore: AngularFirestore, nomMedicament: string) {\r\n      const snapshot = await firestore.collection('med').ref.where('specialite', '==', nomMedicament).get();\r\n    \r\n      if (snapshot) {\r\n        // Convertir le snapshot en tableau de médicaments\r\n        const medicaments: MedicamentDD[] = snapshot.docs.map(doc => {\r\n          const data = doc.data() as MedicamentDD;\r\n          return { id: doc.id, ...data };\r\n        });\r\n    \r\n        return medicaments;\r\n      } else {\r\n        console.log('Aucun médicament trouvé avec ce nom :', nomMedicament);\r\n        return null; // Ou renvoyez un objet vide, selon vos besoins\r\n      }\r\n    }\r\n\r\n\r\n    interface PersonneData {\r\n      nom: string;\r\n      prenom: string;\r\n    }\r\n\r\n\r\n  \r\n    export async function getPersonByUid(firestore: AngularFirestore, uid: string) {\r\n      try {\r\n        const snapshot = await firestore.collection('personne').ref.where('uidPersonne', '==', uid).get();\r\n    \r\n        if (snapshot) {\r\n          // Convertir le snapshot en objet personne\r\n          const personne: PersonneData[] = snapshot.docs.map(doc => {\r\n            const data = doc.data() as PersonneData;\r\n            return { id: doc.id, ...data };\r\n          });\r\n          return personne;\r\n        } else {\r\n          console.log('Aucune personne trouvée avec cet UID :', uid);\r\n          return null; // Ou renvoyez un objet vide, selon vos besoins\r\n        }\r\n      } catch (error) {\r\n        console.error('Erreur lors de la récupération de la personne par UID:', error);\r\n        throw error; // Vous pouvez gérer l'erreur selon vos besoins\r\n      }\r\n    }\r\n\r\n    export async function savePersonData(firestore: AngularFirestore, nom: string, prenom: string, uidPersonne: string) {\r\n      try {\r\n        const personne = {\r\n          nom: nom,\r\n          prenom: prenom,\r\n          uidPersonne: uidPersonne\r\n        };\r\n    \r\n        await firestore.collection('personne').add(personne);\r\n        console.log('Données de la personne enregistrées avec succès dans Firebase.');\r\n      } catch (error) {\r\n        console.error('Erreur lors de l\\'enregistrement des données de la personne dans Firebase :', error);\r\n        throw error;\r\n      }\r\n    }\r\n    interface PatientData {\r\n      nom: string;\r\n      prenom: string;\r\n      age?: number;\r\n      adresse?: string;\r\n      telephones?: string;\r\n      uid:string ;\r\n    }\r\n    \r\n    interface Consultation {\r\n      uid? :string;\r\n      date: string;\r\n      details?: string;\r\n    }\r\n    \r\n    export async function AddRendezVous(firestore: AngularFirestore, medecinId: string, rendezVousData: any) {\r\n      try {\r\n        // Enregistrer le rendez-vous dans la sous-collection \"rdv\" pour le médecin spécifié\r\n        await firestore.collection('medecin').doc(medecinId).collection('rdv').add(rendezVousData);\r\n    \r\n        // Enregistrer le nom et le prénom du patient dans la liste des patients du médecin\r\n        \r\n        console.log('Rendez-vous ajouté avec succès à Firebase.');\r\n    \r\n      } catch (error) {\r\n        console.error('Erreur lors de l\\'ajout du rendez-vous à Firebase :', error);\r\n      }\r\n    }\r\n    interface RendezVousData {\r\n      date: string;\r\n      heure: string;\r\n      nom: string;\r\n      prenom: string;\r\n      useruid: string;\r\n      medecinNom?: string; // Ajout de la propriété medecinNom comme optionnelle\r\n      medecinPrenom?: string; \r\n      medecinuid:string;// Ajout de la propriété medecinPrenom comme optionnelle\r\n      key:string ;\r\n      excuse?:string;\r\n      statut?:string;\r\n    }\r\n    export async function getRdvByPatientUid(firestore: AngularFirestore,  userUid: string) {\r\n      try {\r\n        const snapshot = await firestore.collection('inscrits').doc(userUid).collection('rdv').ref.where('useruid', '==', userUid).get();\r\n    \r\n        if (snapshot) {\r\n          // Convertir le snapshot en objet rendez-vous\r\n          const rdv: RendezVousData[] = snapshot.docs.map(doc => {\r\n            const data = doc.data() as RendezVousData;\r\n            return { id: doc.id, ...data };\r\n          });\r\n          return rdv;\r\n        } else {\r\n          console.log('Aucun rendez-vous trouvé avec cet UID de patient :', userUid);\r\n          return null; // Ou renvoyez un objet vide, selon vos besoins\r\n        }\r\n      } catch (error) {\r\n        console.error('Erreur lors de la récupération des rendez-vous par UID de patient:', error);\r\n        throw error; // Vous pouvez gérer l'erreur selon vos besoins\r\n      }\r\n    }\r\n    \r\n    export async function AddRendezVousForUser(firestore: AngularFirestore, userId: string, rendezVousData: RendezVousData) {\r\n      try {\r\n        // Ajoutez le rendez-vous à la sous-collection \"rdv\" pour l'utilisateur spécifié\r\n        await firestore.collection('inscrits').doc(userId).collection('rdv').add({\r\n          ...rendezVousData,\r\n         \r\n        });\r\n    \r\n        console.log('Rendez-vous ajouté avec succès chez l\\'utilisateur dans Firebase.');\r\n      } catch (error) {\r\n        console.error('Erreur lors de l\\'ajout du rendez-vous chez l\\'utilisateur dans Firebase :', error);\r\n        throw error; // Vous pouvez gérer l'erreur selon vos besoins\r\n      }\r\n    }\r\n    interface userData {\r\n      // Définissez les champs nécessaires\r\n      uid : string ;\r\n      email: string;\r\n      password:string;\r\n      }\r\n      export async function loginUser(firestore: AngularFirestore, email: string, password: string): Promise<{ userData: userData, uid: string } | null> {\r\n        try {\r\n          // Recherchez l'utilisateur dans la base de données avec l'email fourni\r\n          const userCollection: CollectionReference<DocumentData> = firestore.collection('inscrits').ref as CollectionReference<DocumentData>;\r\n          const userQuery: QuerySnapshot<DocumentData> = await userCollection.where('email', '==', email).get();\r\n      \r\n          if (userQuery.size === 1) {\r\n            // Vérifiez le mot de passe\r\n            const userData = userQuery.docs[0].data() as userData;\r\n            const uid = userQuery.docs[0].id;\r\n      \r\n            if (userData && userData.password === password) {\r\n              console.log('Connexion réussie en tant qu\\'utilisateur.');\r\n              return { userData, uid }; // Authentification réussie, renvoie les informations de l'utilisateur et son UID\r\n            }\r\n          }\r\n      \r\n          console.error('Identifiants invalides.');\r\n          return null; // Authentification échouée\r\n      \r\n        } catch (error) {\r\n          console.error('Erreur lors de la connexion de l\\'utilisateur :', error);\r\n          throw error; // Vous pouvez gérer l'erreur ici ou la laisser remonter\r\n        }\r\n      }\r\n      export async function generateUniqueKey() : Promise<string>{\r\n        const timestamp = Date.now().toString(36); // Convertit le timestamp en base 36\r\n        const randomStr = Math.random().toString(36).substring(2, 10); // Génère une chaîne aléatoire en base 36\r\n      \r\n        // Opérations mathématiques complexes pour générer une clé unique\r\n        const key = parseInt(timestamp + randomStr, 36).toString(36).toUpperCase();\r\n      \r\n        return key;\r\n      }\r\n      export async function getRdvByMedUid(firestore: AngularFirestore,  userUid: string) {\r\n        try {\r\n          const snapshot = await firestore.collection('medecin').doc(userUid).collection('rdv').ref.where('medecinuid', '==', userUid).get();\r\n      \r\n          if (snapshot) {\r\n            // Convertir le snapshot en objet rendez-vous\r\n            const rdv: RendezVousData[] = snapshot.docs.map(doc => {\r\n              const data = doc.data() as RendezVousData;\r\n              return { id: doc.id, ...data };\r\n            });\r\n            return rdv;\r\n          } else {\r\n            console.log('Aucun rendez-vous trouvé avec cet UID de medecin :', userUid);\r\n            return null; // Ou renvoyez un objet vide, selon vos besoins\r\n          }\r\n        } catch (error) {\r\n          console.error('Erreur lors de la récupération des rendez-vous par UID de medecin:', error);\r\n          throw error; // Vous pouvez gérer l'erreur selon vos besoins\r\n        }\r\n      }\r\n      export async function deleteRendezVous(firestore: AngularFirestore, medecinUid: string, rendezVous: RendezVousData, excuse: string) {\r\n        try {\r\n            // Supprimer le rendez-vous du médecin avec l'excuse\r\n            const rendezVousSnapshot1 = await firestore.collection('medecin').doc(rendezVous.medecinuid).collection('rdv').ref.where('key', '==', rendezVous.key).get();\r\n            rendezVousSnapshot1.forEach(doc => {\r\n                doc.ref.delete();\r\n            });\r\n            const rendezVousSnapshot3 = await firestore.collection('medecin').doc(rendezVous.medecinuid).collection('rdv').ref.where('key', '==', rendezVous.key).get();\r\n            rendezVousSnapshot3.forEach(doc => {\r\n                doc.ref.set({ ...rendezVous, statut: \"annule\", excuse: excuse });\r\n            });\r\n    \r\n            \r\n    \r\n            // Mettre à jour le rendez-vous chez le patient avec l'excuse\r\n            const rendezVousSnapshot2 = await firestore.collection('inscrits').doc(rendezVous.useruid).collection('rdv').ref.where('key', '==', rendezVous.key).get();\r\n            rendezVousSnapshot2.forEach(doc => {\r\n                doc.ref.set({ ...rendezVous, statut: \"annule\", excuse: excuse });\r\n            });\r\n           \r\n        } catch (error) {\r\n            console.error('Erreur lors de la suppression du rendez-vous:', error);\r\n            throw error;\r\n        }\r\n    }\r\n    \r\n      \r\n      export async function deleteRendezVousR(firestore: AngularFirestore, medecinUid: string, rendezVous: RendezVousData, ) {\r\n        try {\r\n          // Supprimer le rendez-vous du médecin avec l'excuse\r\n          const rendezVousSnapshot1 = await firestore.collection('medecin').doc(rendezVous.medecinuid).collection('rdv').ref.where('key', '==', rendezVous.key).get();\r\n          rendezVousSnapshot1.forEach(doc => {\r\n            doc.ref.delete();\r\n          });\r\n      \r\n          // Supprimer le rendez-vous chez le patient\r\n          const rendezVousSnapshot = await firestore.collection('inscrits').doc(rendezVous.useruid).collection('rdv').ref.where('key', '==', rendezVous.key).get();\r\n          rendezVousSnapshot.forEach(doc => {\r\n            doc.ref.delete();\r\n          });\r\n      \r\n         \r\n          console.log('Rendez-vous supprimé avec succès.');\r\n        } catch (error) {\r\n          console.error('Erreur lors de la suppression du rendez-vous:', error);\r\n          throw error;\r\n        }\r\n      }\r\n     export async function savePatient(firestore: AngularFirestore, patientData: any, medecinUid: string): Promise<void> {\r\n        try {\r\n          // Vérifie si le patient existe déjà avant de l'ajouter\r\n          const patientExists = await checkPatientExistence(firestore, medecinUid, patientData);\r\n          if (!patientExists) {\r\n            const medecinRef = firestore.collection('medecin').doc(medecinUid);\r\n            await medecinRef.collection('patients').add(patientData);\r\n            console.log('Patient ajouté avec succès chez le médecin.');\r\n          } else {\r\n            console.log('Le patient existe déjà chez ce médecin.');\r\n          }\r\n        } catch (error) {\r\n          console.error('Erreur lors de l\\'ajout du patient chez le médecin :', error);\r\n          throw error;\r\n        }\r\n      }\r\n      \r\n      async function checkPatientExistence(firestore: AngularFirestore, medecinUid: string, patientData: any): Promise<boolean> {\r\n        try {\r\n          const patientsSnapshot = await firestore.collection('medecin').doc(medecinUid).collection('patients').ref\r\n            .where('nom', '==', patientData.nom)\r\n            .where('prenom', '==', patientData.prenom)\r\n            .get();\r\n      \r\n          return !patientsSnapshot.empty;\r\n        } catch (error) {\r\n          console.error('Erreur lors de la vérification de l\\'existence du patient :', error);\r\n          throw error;\r\n        }\r\n      }\r\n \r\n// Fonction pour ajouter un patient avec les champs nom et prénom remplis\r\nexport async function AddPatientWithNomPrenom(firestore: AngularFirestore, medecinId: string, rendezVousData: any): Promise<void> {\r\n  try {\r\n    // Vérifiez si la collection patients existe, sinon la crée\r\n    const medecinRef = firestore.collection('medecin').doc(medecinId);\r\n    const medecinSnapshot = await medecinRef.get().toPromise();\r\n    \r\n    // Vérifiez si le médecin existe avant d'ajouter le patient\r\n    if (medecinSnapshot && medecinSnapshot.exists) {\r\n      // Vérifiez si un patient avec le même nom et prénom existe déjà dans la collection\r\n      const patientSnapshot = await medecinRef.collection('patients').ref\r\n        .where('nom', '==', rendezVousData.nom)\r\n        .where('prenom', '==', rendezVousData.prenom)\r\n        .get();\r\n\r\n      if (!patientSnapshot.empty) {\r\n        console.error('Un patient avec le même nom et prénom existe déjà.');\r\n        return; // Arrêtez l'exécution de la fonction s'il existe déjà un patient avec ces informations\r\n      }\r\n\r\n      // Ajoutez le patient avec les champs nom et prénom remplis\r\n      const patientRef = await medecinRef.collection('patients').add({\r\n        nom: rendezVousData.nom,\r\n        prenom: rendezVousData.prenom,\r\n        age: '',\r\n        adresse: '',\r\n        telephone: '',\r\n        uid: '' // Ajoutez le champ uid avec une valeur vide pour le moment\r\n      });\r\n\r\n      // Mettez à jour le champ uid avec l'UID généré pour le patient\r\n      await patientRef.update({ uid: patientRef.id });\r\n\r\n      console.log('Patient ajouté avec succès à Firebase.', patientRef, patientRef.id);\r\n\r\n      try {\r\n        const patientConsultationRef = firestore.collection('medecin').doc(medecinId).collection('patients').doc(patientRef.id);\r\n\r\n        // Créer un objet de consultation avec la date et éventuellement les détails\r\n        const consultationData: Consultation = {\r\n            date: rendezVousData.date,\r\n            details: '' // Vous pouvez fournir les détails de la consultation ici\r\n        };\r\n    \r\n        // Ajouter la nouvelle consultation dans la collection 'consultations' du patient\r\n        await patientConsultationRef.collection('consultations').add(consultationData);\r\n    \r\n        console.log('Nouvelle consultation ajoutée avec succès.');\r\n      } catch (error) {\r\n        console.error('Erreur lors de l\\'ajout de la consultation :', error);\r\n      }\r\n    } else {\r\n      console.error('Le médecin n\\'existe pas. Impossible d\\'ajouter le patient.');\r\n    }\r\n  } catch (error) {\r\n    console.error('Erreur lors de l\\'ajout du patient à Firebase :', error);\r\n  }\r\n}\r\n\r\n\r\nexport async function getPatientsByMedUid(firestore: AngularFirestore, medecinId: string) {\r\n  try {\r\n    // Récupérer la référence du médecin\r\n    const medecinRef = firestore.collection('medecin').doc(medecinId);\r\n\r\n    // Récupérer la liste des patients du médecin\r\n    const patientsSnapshot = await medecinRef.collection('patients').get().toPromise();\r\n\r\n    // Initialiser un tableau pour stocker les patients\r\n    const patients: PatientData[] = [];\r\n\r\n    // Vérifier si la snapshot des patients contient des documents\r\n    if (patientsSnapshot) {\r\n      // Parcourir les documents de la collection patients\r\n      patientsSnapshot.forEach((doc) => {\r\n        // Récupérer les données du patient\r\n        const patientData = doc.data() as PatientData;\r\n        // Ajouter un uid au patient (peut être n'importe quel identifiant unique)\r\n        patientData.uid = doc.id;\r\n        // Ajouter les données du patient au tableau\r\n        patients.push(patientData);\r\n      });\r\n    }\r\n\r\n    // Retourner le tableau de patients\r\n    return patients;\r\n  } catch (error) {\r\n    console.error('Erreur lors de la récupération des patients:', error);\r\n    return []; // Retourner un tableau vide en cas d'erreur\r\n  }\r\n}\r\n\r\nexport async function getConsultationsForPatient(firestore: AngularFirestore,medecinUid: string, patientUid: string): Promise<Consultation[]> {\r\n  try {\r\n    const consultations: Consultation[] = [];\r\n\r\n    // Récupérer les consultations du patient en utilisant son UID\r\n    const snapshot = await firestore.collection('medecin').doc(medecinUid).collection('patients').doc(patientUid).collection('consultations').get().toPromise();\r\n    if (snapshot)\r\n    snapshot.forEach((doc) => {\r\n      const consultation = doc.data() as Consultation;\r\n      consultations.push(consultation);\r\n    });\r\n\r\n    return consultations;\r\n  } catch (error) {\r\n    console.error('Erreur lors de la récupération des consultations pour le patient avec UID', patientUid, 'du médecin avec UID', medecinUid, ':', error);\r\n    return [];\r\n  }\r\n}\r\ninterface consultationData {\r\n  date: string;\r\n  details?: string;\r\n  \r\n}\r\nexport async function getConsultations(firestore: AngularFirestore, medecinUid: string, patientUid: string) {\r\n  try {\r\n    const snapshot = await firestore.collection('medecin').doc(medecinUid).collection('patients').doc(patientUid).collection('consultations').ref.get();\r\n\r\n    if (snapshot) {\r\n      // Convertir le snapshot en objet de consultations\r\n      const consultations: consultationData[] = snapshot.docs.map(doc => {\r\n        const data = doc.data() as consultationData;\r\n        return { id: doc.id, ...data };\r\n      });\r\n      return consultations;\r\n    } else {\r\n      console.log('Aucune consultation trouvée avec cet UID de patient et de médecin :', patientUid, medecinUid);\r\n    return null \r\n    }\r\n\r\n  } catch (error) {\r\n    console.error('Erreur lors de la récupération des consultations par UID de patient et de médecin :', error);\r\n    throw error; // Vous pouvez gérer l'erreur selon vos besoins\r\n  }\r\n}\r\nexport async function modifierSauvegarderConsultation(firestore: AngularFirestore, medecinUid: string, patientUid: string, date: string, newDetails: string) {\r\n  try {\r\n    const consultationsRef = firestore.collection('medecin').doc(medecinUid).collection('patients').doc(patientUid).collection('consultations').ref;\r\n\r\n    // Récupérer la consultation à modifier\r\n    const snapshot = await consultationsRef.where('date', '==', date).get();\r\n    snapshot.forEach(doc => {\r\n      const consultationData = doc.data() as consultationData;\r\n      // Modifier les détails de la consultation si la date correspond\r\n      consultationsRef.doc(doc.id).update({ details: newDetails });\r\n    });\r\n\r\n    console.log('Détails de la consultation mis à jour avec succès.');\r\n  } catch (error) {\r\n    console.error('Erreur lors de la modification et de la sauvegarde des détails de la consultation :', error);\r\n    throw error; // Vous pouvez gérer l'erreur selon vos besoins\r\n  }\r\n}\r\nexport async function ajouterConsultation(firestore: AngularFirestore, medecinId: string, patientUid: string, consultationData: Consultation) {\r\n  try {\r\n    const patientConsultationRef = firestore.collection('medecin').doc(medecinId).collection('patients').doc(patientUid);\r\n\r\n    // Ajouter la nouvelle consultation dans la collection 'consultations' du patient\r\n    await patientConsultationRef.collection('consultations').add(consultationData);\r\n\r\n    console.log('Nouvelle consultation ajoutée avec succès.');\r\n  } catch (error) {\r\n    console.error('Erreur lors de l\\'ajout de la consultation :', error);\r\n    throw error; // Gérer l'erreur selon vos besoins\r\n  }\r\n}\r\nexport async function chercherPatient(firestore: AngularFirestore, medecinId: string, nom: string, prenom: string, email: string) {\r\n  try {\r\n    const patientsSnapshot = await firestore.collection('medecin').doc(medecinId).collection('patients').ref\r\n      .where('nom', '==', nom)\r\n      .where('prenom', '==', prenom)\r\n      .where('email', '==', email) // Ajoutez le critère de recherche pour l'e-mail\r\n      .get();\r\n\r\n    if (!patientsSnapshot.empty) {\r\n      // Retournez l'UID du premier patient trouvé\r\n      return patientsSnapshot.docs[0].id;\r\n    } else {\r\n      // Aucun patient trouvé avec ce nom, prénom et e-mail\r\n      return null;\r\n    }\r\n  } catch (error) {\r\n    console.error('Erreur lors de la recherche du patient :', error);\r\n    return null;\r\n  }\r\n}\r\nexport async function getPatientsUIDByMedecinId(firestore: AngularFirestore, medecinId: string): Promise<string[]> {\r\n  try {\r\n    const patientsSnapshot = await firestore.collection('medecin').doc(medecinId).collection('patients').get().toPromise();\r\n    \r\n    if (patientsSnapshot) {\r\n      // Retournez les UID des patients\r\n      return patientsSnapshot.docs.map(doc => doc.id);\r\n    } else {\r\n      // Aucun patient trouvé\r\n      return [];\r\n    }\r\n  } catch (error) {\r\n    console.error('Erreur lors de la récupération des UID des patients :', error);\r\n    return [];\r\n  }\r\n}\r\nexport async function checkExistingPatient(firestore: AngularFirestore, medecinId: string, nom: string, prenom: string): Promise<string | null> {\r\n  try {\r\n    const patientsSnapshot = await firestore.collection('medecin').doc(medecinId).collection('patients').ref\r\n      .where('nom', '==', nom)\r\n      .where('prenom', '==', prenom)\r\n      .get();\r\n\r\n    if (!patientsSnapshot.empty) {\r\n      // Un patient avec le même nom et prénom existe déjà\r\n      const patientDoc = patientsSnapshot.docs[0];\r\n      return patientDoc.id;\r\n    } else {\r\n      // Aucun patient trouvé avec ce nom et prénom\r\n      return null;\r\n    }\r\n  } catch (error) {\r\n    console.error('Erreur lors de la vérification de l\\'existence du patient :', error);\r\n    return null;\r\n  }\r\n}\r\n\r\n\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}