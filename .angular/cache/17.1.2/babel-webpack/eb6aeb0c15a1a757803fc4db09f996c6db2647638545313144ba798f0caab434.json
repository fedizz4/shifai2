{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/MacBook Air/Desktop/shifai1VV/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _RechercheMedicamentPage;\nimport { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"./recherche-medicament.page.html?ngResource\";\nimport __NG_CLI_RESOURCE__1 from \"./recherche-medicament.page.scss?ngResource\";\nimport { HttpClient } from '@angular/common/http';\nimport { Component } from '@angular/core';\nimport { AngularFirestore } from '@angular/fire/compat/firestore';\nimport { getMedicaments } from 'src/firebaseConfig';\nlet RechercheMedicamentPage = (_RechercheMedicamentPage = class RechercheMedicamentPage {\n  constructor(firestore, http) {\n    this.firestore = firestore;\n    this.http = http;\n    this.medicaments = [];\n    this.nom = '';\n  }\n  ngOnInit() {\n    this.readMedicamentsJson();\n    console.log(this.readMedicamentsJson);\n  }\n  fetchMedicament() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      try {\n        if (_this.nom && _this.nom.length >= 3) {\n          // Ajout de la vérification de longueur\n          // Filter the medicaments array based on the given name\n          _this.filteredMedicament = _this.medicaments.find(med => med.specialite.toLowerCase().includes(_this.nom.toLowerCase()));\n          console.log('med is ', _this.nom.toLowerCase());\n          console.log('ffffffff      ', _this.nom);\n          console.log('lmlkmlmklkmllmlkm', _this.filteredMedicament);\n          if (_this.filteredMedicament) {\n            console.log('Médicament disponible :', _this.filteredMedicament);\n          } else {\n            console.error('Aucun médicament trouvé avec le nom spécifié.');\n          }\n        } else {\n          console.error('Le nom de recherche doit contenir au moins 3 caractères.');\n        }\n      } catch (error) {\n        console.error('Erreur lors de la récupération du médicament (fetchMedicament):', error);\n      }\n    })();\n  }\n  getMedicament() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const medicaments = yield getMedicaments(_this2.firestore);\n      console.log(medicaments);\n      _this2.medicaments = medicaments;\n      console.log(_this2.medicaments);\n    })();\n  }\n  readJsonFile(filePath) {\n    return new Promise((resolve, reject) => {\n      this.http.get(filePath, {\n        responseType: 'json'\n      }).toPromise().then(response => {\n        resolve(response);\n      }).catch(error => {\n        reject(error);\n      });\n    });\n  }\n  // Usage\n  readMedicamentsJson() {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        const medicaments = yield _this3.readJsonFile('../../assets/medicaments.json');\n        _this3.medicaments = medicaments;\n        console.log(medicaments);\n      } catch (error) {\n        console.error('Error reading JSON file:', error);\n      }\n    })();\n  }\n}, _RechercheMedicamentPage.ctorParameters = () => [{\n  type: AngularFirestore\n}, {\n  type: HttpClient\n}], _RechercheMedicamentPage);\nRechercheMedicamentPage = __decorate([Component({\n  selector: 'app-recherche-medicament',\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n})], RechercheMedicamentPage);\nexport { RechercheMedicamentPage };","map":{"version":3,"names":["HttpClient","Component","AngularFirestore","getMedicaments","RechercheMedicamentPage","_RechercheMedicamentPage","constructor","firestore","http","medicaments","nom","ngOnInit","readMedicamentsJson","console","log","fetchMedicament","_this","_asyncToGenerator","length","filteredMedicament","find","med","specialite","toLowerCase","includes","error","getMedicament","_this2","readJsonFile","filePath","Promise","resolve","reject","get","responseType","toPromise","then","response","catch","_this3","__decorate","selector","template","__NG_CLI_RESOURCE__0"],"sources":["C:\\Users\\MacBook Air\\Desktop\\shifai1VV\\src\\app\\recherche-medicament\\recherche-medicament.page.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Component, OnInit } from '@angular/core';\nimport { AngularFirestore } from '@angular/fire/compat/firestore';\nimport { getMedicamentByName, getMedicaments } from 'src/firebaseConfig';\n\ninterface MedicamentDD {\n  class: string;\n  conditionnement: string;\n  conservation: string;\n  amm: string;\n  dateamm: string;\n  dci: string;\n  dosage: string;\n  forme: string;\n  indication: string;\n  laboratoire: string;\n  sousclass: string;\n  specialite: string;\n  specification: string;\n  tableau: string;\n}\n\n@Component({\n  selector: 'app-recherche-medicament',\n  templateUrl: './recherche-medicament.page.html',\n  styleUrls: ['./recherche-medicament.page.scss'],\n})\nexport class RechercheMedicamentPage implements OnInit {\n  medicaments: MedicamentDD[] = [];\n  nom: string = '';\n  filteredMedicament: MedicamentDD | undefined;\n\n  constructor(private firestore: AngularFirestore,private http: HttpClient) { }\n\n  ngOnInit() {\n    this.readMedicamentsJson();\n    console.log(this.readMedicamentsJson)\n  }\n\n  async fetchMedicament() {\n    try {\n      if (this.nom && this.nom.length >= 3) { // Ajout de la vérification de longueur\n        // Filter the medicaments array based on the given name\n        this.filteredMedicament = this.medicaments.find(med => med.specialite.toLowerCase().includes(this.nom.toLowerCase()));\n        console.log('med is ', this.nom.toLowerCase());\n        console.log('ffffffff      ', this.nom);\n        console.log('lmlkmlmklkmllmlkm', this.filteredMedicament);\n        if (this.filteredMedicament) {\n          console.log('Médicament disponible :', this.filteredMedicament);\n        } else {\n          console.error('Aucun médicament trouvé avec le nom spécifié.');\n        }\n      } else {\n        console.error('Le nom de recherche doit contenir au moins 3 caractères.');\n      }\n    } catch (error) {\n      console.error('Erreur lors de la récupération du médicament (fetchMedicament):', error);\n    }\n  }\n  \n  async getMedicament(){\n    const medicaments =await getMedicaments(this.firestore);\n    console.log(medicaments)\n\n    this.medicaments=medicaments;\n    console.log(this.medicaments)\n  }\n\n  readJsonFile(filePath: string): Promise<any> {\n    return new Promise((resolve, reject) => {\n      this.http.get(filePath, { responseType: 'json' })\n        .toPromise()\n        .then(response => {\n          resolve(response);\n        })\n        .catch(error => {\n          reject(error);\n        });\n    });\n  }\n\n  // Usage\n  async readMedicamentsJson() {\n    try {\n      const medicaments = await this.readJsonFile('../../assets/medicaments.json');\n      this.medicaments=medicaments;\n      console.log(medicaments);\n    } catch (error) {\n      console.error('Error reading JSON file:', error);\n    }\n  }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}