{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/MacBook Air/Desktop/shifai1VV/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n// Import des modules nécessaires\nimport { initializeApp } from 'firebase/app';\nimport { getAnalytics } from 'firebase/analytics';\nimport { getAuth, signInWithEmailAndPassword } from 'firebase/auth';\nimport { map } from 'rxjs';\nimport { finalize } from 'rxjs/operators';\nimport { getStorage } from 'firebase/storage';\n// Configuration Firebase\nexport const firebaseConfig = {\n  apiKey: \"AIzaSyA7iKnEnxTdm9UdRnegNamwRDsLFESDk7s\",\n  authDomain: \"shifai-f46a0.firebaseapp.com\",\n  projectId: \"shifai-f46a0\",\n  storageBucket: \"shifai-f46a0.appspot.com\",\n  messagingSenderId: \"383597072570\",\n  appId: \"1:383597072570:web:870d9d280b22a1aa28b283\",\n  measurementId: \"G-Y2QLPH92NB\"\n};\n// Initialisation Firebase\nexport const app = initializeApp(firebaseConfig);\nexport const storage = getStorage(app, 'gs://shifai-f46a0.appspot.com');\nconst analytics = getAnalytics(app);\n// Objet d'authentification pour être utilisé dans d'autres fichiers\nconst auth = getAuth(app);\n// Fonction pour connecter l'utilisateur\nexport function loginUser(_x, _x2) {\n  return _loginUser.apply(this, arguments);\n}\nfunction _loginUser() {\n  _loginUser = _asyncToGenerator(function* (email, password) {\n    try {\n      const userCredential = yield signInWithEmailAndPassword(auth, email, password);\n      console.log('Utilisateur connecté :', userCredential.user);\n      return userCredential;\n    } catch (error) {\n      console.error(error);\n      throw error;\n    }\n  });\n  return _loginUser.apply(this, arguments);\n}\nexport function AddUser(_x3, _x4, _x5, _x6, _x7, _x8, _x9, _x10, _x11, _x12) {\n  return _AddUser.apply(this, arguments);\n}\nfunction _AddUser() {\n  _AddUser = _asyncToGenerator(function* (auth, firestore, app, familyName, name, email, password, date, sexe, role) {\n    try {\n      // Ajouter l'utilisateur à l'authentification Firebase\n      const userCredential = yield auth.createUserWithEmailAndPassword(email, password);\n      const user = userCredential.user;\n      // Vérifier si l'utilisateur a bien été créé\n      if (user) {\n        // Ajouter l'utilisateur à la collection \"inscrits\" dans Firestore\n        const userData = {\n          familyName: familyName,\n          name: name,\n          email: email,\n          date: date,\n          sexe: sexe,\n          role: role,\n          uid: user.uid // Utiliser l'UID généré par Firebase Auth\n        };\n        yield firestore.collection('inscrits').doc(user.uid).set(userData);\n        console.log('Utilisateur ajouté avec succès à Firebase et Firestore.');\n        // Créer une sous-collection \"rdv\" pour l'utilisateur\n        yield firestore.collection('inscrits').doc(user.uid).collection('rdv').add({});\n        console.log('Sous-collection \"rdv\" créée avec succès pour l\\'utilisateur.');\n      } else {\n        console.error('Erreur lors de la création de l\\'utilisateur.');\n      }\n    } catch (error) {\n      console.error('Erreur lors de l\\'ajout de l\\'utilisateur et de la sous-collection \"rdv\" à Firebase :', error);\n      throw error; // Vous pouvez gérer l'erreur selon vos besoins\n    }\n  });\n  return _AddUser.apply(this, arguments);\n}\nexport function AddMedicament(_x13, _x14, _x15, _x16, _x17, _x18) {\n  return _AddMedicament.apply(this, arguments);\n}\nfunction _AddMedicament() {\n  _AddMedicament = _asyncToGenerator(function* (firestore, app, nom, dosage, prises, uid) {\n    const medicament = {\n      nom: nom,\n      dosage: dosage,\n      prises: prises.map(prise => ({\n        label: prise.label,\n        checked: prise.checked\n      })),\n      uid: uid\n    };\n    try {\n      yield firestore.collection('medicaments').add(medicament);\n    } catch (error) {\n      console.error('Erreur lors de l\\'ajout du médicament:', error);\n      throw error; // Renvoyer l'erreur pour que le gestionnaire puisse la gérer\n    }\n  });\n  return _AddMedicament.apply(this, arguments);\n}\nexport function getMedicamentsByUid(_x19, _x20) {\n  return _getMedicamentsByUid.apply(this, arguments);\n}\nfunction _getMedicamentsByUid() {\n  _getMedicamentsByUid = _asyncToGenerator(function* (firestore, uid) {\n    try {\n      const snapshot = yield firestore.collection('medicaments').ref.where('uid', '==', uid).get();\n      // Convertir le snapshot en tableau de médicaments en utilisant l'interface\n      const medicaments = snapshot.docs.map(doc => {\n        const data = doc.data(); // Cast vers l'interface définie\n        return {\n          id: doc.id,\n          ...data\n        };\n      });\n      return medicaments;\n    } catch (error) {\n      console.error('Erreur lors de la récupération des médicaments :', error);\n      throw error;\n    }\n  });\n  return _getMedicamentsByUid.apply(this, arguments);\n}\nexport function getMedecinsByLocalisationAndSpecialite(_x21, _x22, _x23) {\n  return _getMedecinsByLocalisationAndSpecialite.apply(this, arguments);\n}\nfunction _getMedecinsByLocalisationAndSpecialite() {\n  _getMedecinsByLocalisationAndSpecialite = _asyncToGenerator(function* (firestore, localisation, specialite) {\n    try {\n      const snapshot = yield firestore.collection('medecin').ref.where('specialite', '==', specialite).where('etat', '==', localisation).get();\n      // Vérifier si snapshot est défini avant de l'utiliser\n      if (snapshot) {\n        // Convertir le snapshot en tableau de médecins\n        const medecins = snapshot.docs.map(doc => {\n          const data = doc.data();\n          return {\n            id: doc.id,\n            ...data\n          };\n        });\n        return medecins;\n      } else {\n        console.error('La requête n\\'a pas renvoyé de snapshot.');\n        return []; // Ou lancez une erreur appropriée selon vos besoins\n      }\n    } catch (error) {\n      console.error('Erreur lors de la récupération des médecins (firebase) :', error);\n      throw error;\n    }\n  });\n  return _getMedecinsByLocalisationAndSpecialite.apply(this, arguments);\n}\nexport function AddMedecin(_x24, _x25, _x26, _x27, _x28, _x29, _x30, _x31, _x32, _x33, _x34, _x35, _x36, _x37) {\n  return _AddMedecin.apply(this, arguments);\n}\nfunction _AddMedecin() {\n  _AddMedecin = _asyncToGenerator(function* (firestore, storage, nom, prenom, email, password, date, sexe, role, delegation, etat, specialite, telephone, file) {\n    let fileUrl = null;\n    if (file) {\n      const filePath = `gs://shifai-f46a0.appspot.com/${file.name}`; // Replace 'votre/chemin/dans/storage' with your storage path\n      const fileRef = storage.refFromURL(filePath);\n      const uploadTask = fileRef.put(file);\n      yield uploadTask.snapshotChanges().pipe(finalize( /*#__PURE__*/_asyncToGenerator(function* () {\n        fileUrl = yield fileRef.getDownloadURL().toPromise(); // Wait for the Observable to resolve\n      }))).toPromise(); // Wait for the upload task to complete\n    }\n    function AddMedecin(_x69, _x70, _x71, _x72, _x73, _x74, _x75, _x76, _x77, _x78, _x79, _x80, _x81) {\n      return _AddMedecin2.apply(this, arguments);\n    }\n    function _AddMedecin2() {\n      _AddMedecin2 = _asyncToGenerator(function* (firestore, nom, prenom, email, password, date, sexe, role, specialite, telephone, fileUrl, delegation, etat) {\n        try {\n          const medecin = {\n            nom: nom,\n            prenom: prenom,\n            email: email,\n            password: password,\n            date: date,\n            sexe: sexe,\n            role: role,\n            specialite: specialite,\n            telephone: telephone,\n            fileUrl: fileUrl,\n            delegation: delegation,\n            etat: etat\n          };\n          // Ajoutez le médecin à la collection \"admin\"\n          const medecinRef = yield firestore.collection('admin').add(medecin);\n          // Récupérez l'ID du médecin nouvellement ajouté\n          const medecinId = medecinRef.id;\n          // Créez automatiquement une sous-collection \"appointments\" pour ce médecin\n          yield firestore.collection('admin').doc(medecinId).collection('rdv').add({/* Données initiales des rendez-vous si nécessaire */});\n          console.log('Médecin ajouté avec succès à Firebase.');\n        } catch (error) {\n          console.error('Erreur lors de l\\'ajout du médecin à Firebase :', error);\n        }\n      });\n      return _AddMedecin2.apply(this, arguments);\n    }\n  });\n  return _AddMedecin.apply(this, arguments);\n}\nexport function getMedecinByUid(_x38, _x39) {\n  return _getMedecinByUid.apply(this, arguments);\n}\nfunction _getMedecinByUid() {\n  _getMedecinByUid = _asyncToGenerator(function* (firestore, uid) {\n    const snapshot = yield firestore.collection('medecin').ref.where('uid', '==', uid).get();\n    if (snapshot) {\n      // Convertir le snapshot en tableau de médecins\n      const medecins = snapshot.docs.map(doc => {\n        const data = doc.data();\n        return {\n          id: doc.id,\n          ...data\n        };\n      });\n      return medecins;\n    } else {\n      console.log('Aucun médecin trouvé pour cet UID :', uid);\n      return null; // Ou renvoyez un objet vide, selon vos besoins\n    }\n  });\n  return _getMedecinByUid.apply(this, arguments);\n}\nexport function loginMedecins(_x40, _x41, _x42) {\n  return _loginMedecins.apply(this, arguments);\n}\nfunction _loginMedecins() {\n  _loginMedecins = _asyncToGenerator(function* (firestore, email, password) {\n    try {\n      // Recherchez le médecin dans la base de données avec l'email fourni\n      const medecinCollection = firestore.collection('medecin').ref;\n      const medecinQuery = yield medecinCollection.where('email', '==', email).get();\n      if (medecinQuery.size === 1) {\n        // Vérifiez le mot de passe (vous pouvez utiliser une bibliothèque de hachage appropriée)\n        const medecinData = medecinQuery.docs[0].data();\n        const uid = medecinQuery.docs[0].id;\n        if (medecinData && medecinData.password === password) {\n          console.log('Connexion réussie en tant que médecin.');\n          return {\n            medecinData,\n            uid\n          }; // Authentification réussie, renvoie les informations du médecin et son UID\n        }\n      }\n      console.error('Identifiants invalides.');\n      return null; // Authentification échouée\n    } catch (error) {\n      console.error('Erreur lors de la connexion du médecin :', error);\n      throw error; // Vous pouvez gérer l'erreur ici ou la laisser remonter\n    }\n  });\n  return _loginMedecins.apply(this, arguments);\n}\nexport const medecinUid = {\n  uid: ''\n};\nexport function ajouterSecretaire(_x43, _x44, _x45, _x46, _x47, _x48, _x49) {\n  return _ajouterSecretaire.apply(this, arguments);\n}\nfunction _ajouterSecretaire() {\n  _ajouterSecretaire = _asyncToGenerator(function* (firestore, nom, prenom, mail, numero, password, medecinUid) {\n    try {\n      // Ajoutez votre logique pour ajouter les données du formulaire à la collection 'secretaire'\n      // Utilisez firestore.collection('secretaire') pour accéder à la collection 'secretaire' dans Firebase\n      yield firestore.collection('secretaire').add({\n        nom: nom,\n        prenom: prenom,\n        mail: mail,\n        numero: numero,\n        password: password,\n        medecinUid: medecinUid\n      });\n      console.log('Secrétaire ajoutée avec succès à la base de données.');\n    } catch (error) {\n      console.error('Erreur lors de l\\'ajout du secrétaire à la base de données :', error);\n      throw error; // Vous pouvez gérer l'erreur ici ou la laisser remonter\n    }\n  });\n  return _ajouterSecretaire.apply(this, arguments);\n}\nexport const getSecretaireByUid = (firestore, uid) => {\n  return firestore.collection('secretaires').doc(uid).snapshotChanges().pipe(map(docChange => {\n    const data = docChange.payload.data();\n    if (data) {\n      return data;\n      console.log(data);\n    } else {\n      throw new Error('Secrétaire non trouvé');\n    }\n  }));\n};\n// firebaseConfig.ts\nexport function getPatientsByMedecinUid(_x50, _x51) {\n  return _getPatientsByMedecinUid.apply(this, arguments);\n}\nfunction _getPatientsByMedecinUid() {\n  _getPatientsByMedecinUid = _asyncToGenerator(function* (firestore, medecinUid) {\n    try {\n      const snapshot = yield firestore.collection('patient').ref.where('medecinUid', '==', medecinUid).get();\n      const patients = snapshot.docs.map(doc => {\n        const data = doc.data();\n        return {\n          id: doc.id,\n          nom: data.nom,\n          prenom: data.prenom,\n          email: data.email,\n          telephone: data.telephone,\n          dateNaissance: data.dateNaissance,\n          sexe: data.sexe\n        };\n      });\n      return patients;\n    } catch (error) {\n      console.error('Error fetching patients:', error);\n      throw error;\n    }\n  });\n  return _getPatientsByMedecinUid.apply(this, arguments);\n}\n;\nexport function getMedicamentByName(_x52, _x53) {\n  return _getMedicamentByName.apply(this, arguments);\n}\nfunction _getMedicamentByName() {\n  _getMedicamentByName = _asyncToGenerator(function* (firestore, nomMedicament) {\n    const snapshot = yield firestore.collection('med').ref.where('specialite', '==', nomMedicament).get();\n    if (snapshot) {\n      // Convertir le snapshot en tableau de médicaments\n      const medicaments = snapshot.docs.map(doc => {\n        const data = doc.data();\n        return {\n          id: doc.id,\n          ...data\n        };\n      });\n      return medicaments;\n    } else {\n      console.log('Aucun médicament trouvé avec ce nom :', nomMedicament);\n      return null; // Ou renvoyez un objet vide, selon vos besoins\n    }\n  });\n  return _getMedicamentByName.apply(this, arguments);\n}\nexport function getPersonByUid(_x54, _x55) {\n  return _getPersonByUid.apply(this, arguments);\n}\nfunction _getPersonByUid() {\n  _getPersonByUid = _asyncToGenerator(function* (firestore, uid) {\n    try {\n      const snapshot = yield firestore.collection('personne').ref.where('uidPersonne', '==', uid).get();\n      if (snapshot) {\n        // Convertir le snapshot en objet personne\n        const personne = snapshot.docs.map(doc => {\n          const data = doc.data();\n          return {\n            id: doc.id,\n            ...data\n          };\n        });\n        return personne;\n      } else {\n        console.log('Aucune personne trouvée avec cet UID :', uid);\n        return null; // Ou renvoyez un objet vide, selon vos besoins\n      }\n    } catch (error) {\n      console.error('Erreur lors de la récupération de la personne par UID:', error);\n      throw error; // Vous pouvez gérer l'erreur selon vos besoins\n    }\n  });\n  return _getPersonByUid.apply(this, arguments);\n}\nexport function savePersonData(_x56, _x57, _x58, _x59) {\n  return _savePersonData.apply(this, arguments);\n}\nfunction _savePersonData() {\n  _savePersonData = _asyncToGenerator(function* (firestore, nom, prenom, uidPersonne) {\n    try {\n      const personne = {\n        nom: nom,\n        prenom: prenom,\n        uidPersonne: uidPersonne\n      };\n      yield firestore.collection('personne').add(personne);\n      console.log('Données de la personne enregistrées avec succès dans Firebase.');\n    } catch (error) {\n      console.error('Erreur lors de l\\'enregistrement des données de la personne dans Firebase :', error);\n      throw error;\n    }\n  });\n  return _savePersonData.apply(this, arguments);\n}\nexport function AddRendezVous(_x60, _x61, _x62) {\n  return _AddRendezVous.apply(this, arguments);\n}\nfunction _AddRendezVous() {\n  _AddRendezVous = _asyncToGenerator(function* (firestore, medecinId, rendezVousData) {\n    try {\n      // Ajoutez le rendez-vous à la sous-collection \"rdv\" pour le médecin spécifié\n      yield firestore.collection('medecin').doc(medecinId).collection('rdv').add(rendezVousData);\n      console.log('Rendez-vous ajouté avec succès à Firebase.');\n    } catch (error) {\n      console.error('Erreur lors de l\\'ajout du rendez-vous à Firebase :', error);\n    }\n  });\n  return _AddRendezVous.apply(this, arguments);\n}\nexport function getRdvByPatientUid(_x63, _x64, _x65) {\n  return _getRdvByPatientUid.apply(this, arguments);\n}\nfunction _getRdvByPatientUid() {\n  _getRdvByPatientUid = _asyncToGenerator(function* (firestore, medecinId, userUid) {\n    try {\n      const snapshot = yield firestore.collection('medecin').doc(medecinId).collection('rdv').ref.where('useruid', '==', userUid).get();\n      if (snapshot) {\n        // Convertir le snapshot en objet rendez-vous\n        const rdv = snapshot.docs.map(doc => {\n          const data = doc.data();\n          return {\n            id: doc.id,\n            ...data\n          };\n        });\n        return rdv;\n      } else {\n        console.log('Aucun rendez-vous trouvé avec cet UID de patient :', userUid);\n        return null; // Ou renvoyez un objet vide, selon vos besoins\n      }\n    } catch (error) {\n      console.error('Erreur lors de la récupération des rendez-vous par UID de patient:', error);\n      throw error; // Vous pouvez gérer l'erreur selon vos besoins\n    }\n  });\n  return _getRdvByPatientUid.apply(this, arguments);\n}\nexport function AddRendezVousForUser(_x66, _x67, _x68) {\n  return _AddRendezVousForUser.apply(this, arguments);\n}\nfunction _AddRendezVousForUser() {\n  _AddRendezVousForUser = _asyncToGenerator(function* (firestore, userId, rendezVousData) {\n    try {\n      // Ajoutez le rendez-vous à la sous-collection \"rdv\" pour l'utilisateur spécifié\n      yield firestore.collection('inscrits').doc(userId).collection('rdv').add(rendezVousData);\n      console.log('Rendez-vous ajouté avec succès chez l\\'utilisateur dans Firebase.');\n    } catch (error) {\n      console.error('Erreur lors de l\\'ajout du rendez-vous chez l\\'utilisateur dans Firebase :', error);\n      throw error; // Vous pouvez gérer l'erreur selon vos besoins\n    }\n  });\n  return _AddRendezVousForUser.apply(this, arguments);\n}","map":{"version":3,"names":["initializeApp","getAnalytics","getAuth","signInWithEmailAndPassword","map","finalize","getStorage","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","app","storage","analytics","auth","loginUser","_x","_x2","_loginUser","apply","arguments","_asyncToGenerator","email","password","userCredential","console","log","user","error","AddUser","_x3","_x4","_x5","_x6","_x7","_x8","_x9","_x10","_x11","_x12","_AddUser","firestore","familyName","name","date","sexe","role","createUserWithEmailAndPassword","userData","uid","collection","doc","set","add","AddMedicament","_x13","_x14","_x15","_x16","_x17","_x18","_AddMedicament","nom","dosage","prises","medicament","prise","label","checked","getMedicamentsByUid","_x19","_x20","_getMedicamentsByUid","snapshot","ref","where","get","medicaments","docs","data","id","getMedecinsByLocalisationAndSpecialite","_x21","_x22","_x23","_getMedecinsByLocalisationAndSpecialite","localisation","specialite","medecins","AddMedecin","_x24","_x25","_x26","_x27","_x28","_x29","_x30","_x31","_x32","_x33","_x34","_x35","_x36","_x37","_AddMedecin","prenom","delegation","etat","telephone","file","fileUrl","filePath","fileRef","refFromURL","uploadTask","put","snapshotChanges","pipe","getDownloadURL","toPromise","_x69","_x70","_x71","_x72","_x73","_x74","_x75","_x76","_x77","_x78","_x79","_x80","_x81","_AddMedecin2","medecin","medecinRef","medecinId","getMedecinByUid","_x38","_x39","_getMedecinByUid","loginMedecins","_x40","_x41","_x42","_loginMedecins","medecinCollection","medecinQuery","size","medecinData","medecinUid","ajouterSecretaire","_x43","_x44","_x45","_x46","_x47","_x48","_x49","_ajouterSecretaire","mail","numero","getSecretaireByUid","docChange","payload","Error","getPatientsByMedecinUid","_x50","_x51","_getPatientsByMedecinUid","patients","dateNaissance","getMedicamentByName","_x52","_x53","_getMedicamentByName","nomMedicament","getPersonByUid","_x54","_x55","_getPersonByUid","personne","savePersonData","_x56","_x57","_x58","_x59","_savePersonData","uidPersonne","AddRendezVous","_x60","_x61","_x62","_AddRendezVous","rendezVousData","getRdvByPatientUid","_x63","_x64","_x65","_getRdvByPatientUid","userUid","rdv","AddRendezVousForUser","_x66","_x67","_x68","_AddRendezVousForUser","userId"],"sources":["C:\\Users\\MacBook Air\\Desktop\\shifai1VV\\src\\firebaseConfig.ts"],"sourcesContent":["// Import des modules nécessaires\r\nimport { initializeApp, FirebaseApp } from 'firebase/app';\r\nimport { getAnalytics } from 'firebase/analytics';\r\nimport { getAuth, signInWithEmailAndPassword, Auth } from 'firebase/auth';\r\nimport { AngularFirestore, CollectionReference, DocumentData, QuerySnapshot } from '@angular/fire/compat/firestore';\r\nimport { Observable, map } from 'rxjs';\r\nimport { AngularFireStorage } from '@angular/fire/compat/storage';\r\nimport { finalize } from 'rxjs/operators';\r\nimport { getStorage } from 'firebase/storage';\r\nimport { userUid } from './app/login/login.page';\r\nimport { AngularFireAuth } from '@angular/fire/compat/auth';\r\n\r\n\r\n\r\n// Configuration Firebase\r\n\r\nexport const firebaseConfig = {\r\n  apiKey: \"AIzaSyA7iKnEnxTdm9UdRnegNamwRDsLFESDk7s\",\r\n  authDomain: \"shifai-f46a0.firebaseapp.com\",\r\n  projectId: \"shifai-f46a0\",\r\n  storageBucket: \"shifai-f46a0.appspot.com\",\r\n  messagingSenderId: \"383597072570\",\r\n  appId: \"1:383597072570:web:870d9d280b22a1aa28b283\",\r\n  measurementId: \"G-Y2QLPH92NB\"\r\n};\r\n\r\n// Initialisation Firebase\r\nexport const app: FirebaseApp = initializeApp(firebaseConfig);\r\n\r\nexport const storage = getStorage(app, 'gs://shifai-f46a0.appspot.com');\r\n\r\nconst analytics = getAnalytics(app);\r\n\r\n// Objet d'authentification pour être utilisé dans d'autres fichiers\r\nconst auth: Auth = getAuth(app);\r\n\r\n\r\n// Fonction pour connecter l'utilisateur\r\nexport async function loginUser(email: string, password: string) {\r\n  try {\r\n    const userCredential = await signInWithEmailAndPassword(auth, email, password);\r\n    console.log('Utilisateur connecté :', userCredential.user);\r\n    return userCredential;\r\n  } catch (error) {\r\n    console.error(error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\nexport async function AddUser(auth: AngularFireAuth, firestore: AngularFirestore, app: FirebaseApp, familyName: string, name: string, email: string, password: string, date: string, sexe: string, role: string) {\r\n  try {\r\n    // Ajouter l'utilisateur à l'authentification Firebase\r\n    const userCredential = await auth.createUserWithEmailAndPassword(email, password);\r\n    const user = userCredential.user;\r\n\r\n    // Vérifier si l'utilisateur a bien été créé\r\n    if (user) {\r\n      // Ajouter l'utilisateur à la collection \"inscrits\" dans Firestore\r\n      const userData = {\r\n        familyName: familyName,\r\n        name: name,\r\n        email: email,\r\n        date: date,\r\n        sexe: sexe,\r\n        role: role,\r\n        uid: user.uid // Utiliser l'UID généré par Firebase Auth\r\n      };\r\n      await firestore.collection('inscrits').doc(user.uid).set(userData);\r\n\r\n      console.log('Utilisateur ajouté avec succès à Firebase et Firestore.');\r\n\r\n      // Créer une sous-collection \"rdv\" pour l'utilisateur\r\n      await firestore.collection('inscrits').doc(user.uid).collection('rdv').add({});\r\n\r\n      console.log('Sous-collection \"rdv\" créée avec succès pour l\\'utilisateur.');\r\n    } else {\r\n      console.error('Erreur lors de la création de l\\'utilisateur.');\r\n    }\r\n  } catch (error) {\r\n    console.error('Erreur lors de l\\'ajout de l\\'utilisateur et de la sous-collection \"rdv\" à Firebase :', error);\r\n    throw error; // Vous pouvez gérer l'erreur selon vos besoins\r\n  }\r\n}\r\n\r\n\r\nexport async function AddMedicament(firestore: AngularFirestore, app: FirebaseApp, nom: string, dosage: number, prises: any[], uid:string) {\r\n  const medicament = {\r\n    nom: nom,\r\n    dosage: dosage,\r\n    prises: prises.map(prise => ({\r\n      label: prise.label,\r\n      checked: prise.checked\r\n    })),\r\n    uid: uid,\r\n  };\r\n\r\n  try {\r\n    await firestore.collection('medicaments').add(medicament);\r\n  } catch (error) {\r\n    console.error('Erreur lors de l\\'ajout du médicament:', error);\r\n    throw error;  // Renvoyer l'erreur pour que le gestionnaire puisse la gérer\r\n  }\r\n}\r\n\r\ninterface MedicamentData {\r\n  nom: string;\r\n  dosage: number;\r\n  prise: boolean[];\r\n  // Autres champs si nécessaire...\r\n}\r\n\r\nexport async function getMedicamentsByUid(firestore: AngularFirestore, uid: string) {\r\n  try {\r\n    const snapshot = await firestore.collection('medicaments').ref.where('uid', '==', uid).get();\r\n  \r\n    // Convertir le snapshot en tableau de médicaments en utilisant l'interface\r\n    const medicaments: MedicamentData[] = snapshot.docs.map(doc => {\r\n      const data = doc.data() as MedicamentData; // Cast vers l'interface définie\r\n      return { id: doc.id, ...data };\r\n    });\r\n  \r\n    return medicaments;\r\n  } catch (error) {\r\n    console.error('Erreur lors de la récupération des médicaments :', error);\r\n    throw error;\r\n  }\r\n  \r\n}\r\n\r\n// Exemple d'interface pour la structure des données des médecins\r\ninterface MedecinData {\r\n  // Définissez les champs nécessaires\r\n  uid : string ;\r\n  nom: string;\r\n  prenom:string;\r\n  localisation:string;\r\n  specialite:string;\r\n  // ... autres champs\r\n}\r\n\r\n\r\n\r\n\r\nexport async function getMedecinsByLocalisationAndSpecialite(firestore: AngularFirestore, localisation: string | null, specialite: string | null) {\r\n  try {\r\n    const snapshot = await firestore.collection('medecin').ref.where('specialite', '==', specialite).where('etat', '==', localisation).get();\r\n\r\n    // Vérifier si snapshot est défini avant de l'utiliser\r\n    if (snapshot) {\r\n      // Convertir le snapshot en tableau de médecins\r\n      const medecins: MedecinData[] = snapshot.docs.map(doc => {\r\n        const data = doc.data() as MedecinData;\r\n        return { id: doc.id, ...data };\r\n      });\r\n\r\n      return medecins;\r\n    } else {\r\n      console.error('La requête n\\'a pas renvoyé de snapshot.');\r\n      return []; // Ou lancez une erreur appropriée selon vos besoins\r\n    }\r\n  } catch (error) {\r\n    console.error('Erreur lors de la récupération des médecins (firebase) :', error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport async function AddMedecin(\r\n  firestore: AngularFirestore,\r\n  storage: AngularFireStorage,\r\n  nom: string,\r\n  prenom: string,\r\n  email: string,\r\n  password: string,\r\n  date: string,\r\n  sexe: string,\r\n  role: string,\r\n  delegation: string,\r\n  etat: string,\r\n  specialite: string,\r\n  telephone: string,\r\n  file: File | null\r\n) {\r\n  let fileUrl: string | null = null;\r\n\r\n  if (file) {\r\n    const filePath = `gs://shifai-f46a0.appspot.com/${file.name}`; // Replace 'votre/chemin/dans/storage' with your storage path\r\n    const fileRef = storage.refFromURL(filePath);\r\n\r\n    const uploadTask = fileRef.put(file);\r\n\r\n    await uploadTask.snapshotChanges().pipe(\r\n      finalize(async () => {\r\n        fileUrl = await fileRef.getDownloadURL().toPromise(); // Wait for the Observable to resolve\r\n      })\r\n    ).toPromise(); // Wait for the upload task to complete\r\n  }\r\n  async function AddMedecin(firestore: AngularFirestore, nom: string, prenom: string, email: string, password: string, date: string, sexe: string, role: string, specialite: string, telephone: string, fileUrl: string, delegation: string, etat: string) {\r\n    try {\r\n      const medecin = {\r\n        nom: nom,\r\n        prenom: prenom,\r\n        email: email,\r\n        password: password,\r\n        date: date,\r\n        sexe: sexe,\r\n        role: role,\r\n        specialite: specialite,\r\n        telephone: telephone,\r\n        fileUrl: fileUrl,\r\n        delegation: delegation,\r\n        etat: etat,\r\n      };\r\n  \r\n      // Ajoutez le médecin à la collection \"admin\"\r\n      const medecinRef = await firestore.collection('admin').add(medecin);\r\n  \r\n      // Récupérez l'ID du médecin nouvellement ajouté\r\n      const medecinId = medecinRef.id;\r\n  \r\n      // Créez automatiquement une sous-collection \"appointments\" pour ce médecin\r\n      await firestore.collection('admin').doc(medecinId).collection('rdv').add({ /* Données initiales des rendez-vous si nécessaire */ });\r\n  \r\n      console.log('Médecin ajouté avec succès à Firebase.');\r\n    } catch (error) {\r\n      console.error('Erreur lors de l\\'ajout du médecin à Firebase :', error);\r\n    }\r\n  }\r\n}  \r\n\r\n\r\n\r\nexport async function getMedecinByUid(firestore: AngularFirestore, uid: string) {\r\n  const snapshot = await firestore.collection('medecin').ref.where('uid', '==', uid).get();\r\n  if (snapshot) {\r\n    // Convertir le snapshot en tableau de médecins\r\n    const medecins: MedecinData[] = snapshot.docs.map(doc => {\r\n      const data = doc.data() as MedecinData;\r\n      return { id: doc.id, ...data };\r\n    });\r\n\r\n    return medecins;\r\n      } else {\r\n        console.log('Aucun médecin trouvé pour cet UID :', uid);\r\n        return null; // Ou renvoyez un objet vide, selon vos besoins\r\n      }\r\n    }\r\n\r\n    export async function loginMedecins(firestore: AngularFirestore, email: string, password: string): Promise<{ medecinData: any, uid: string } | null> {\r\n      try {\r\n        // Recherchez le médecin dans la base de données avec l'email fourni\r\n        const medecinCollection: CollectionReference<DocumentData> = firestore.collection('medecin').ref as CollectionReference<DocumentData>;\r\n        const medecinQuery: QuerySnapshot<DocumentData> = await medecinCollection.where('email', '==', email).get();\r\n    \r\n        if (medecinQuery.size === 1) {\r\n          // Vérifiez le mot de passe (vous pouvez utiliser une bibliothèque de hachage appropriée)\r\n          const medecinData = medecinQuery.docs[0].data() as { password?: string };\r\n          const uid = medecinQuery.docs[0].id;\r\n    \r\n          if (medecinData && medecinData.password === password) {\r\n            console.log('Connexion réussie en tant que médecin.');\r\n            return { medecinData, uid }; // Authentification réussie, renvoie les informations du médecin et son UID\r\n          }\r\n        }\r\n    \r\n        console.error('Identifiants invalides.');\r\n        return null; // Authentification échouée\r\n    \r\n      } catch (error) {\r\n        console.error('Erreur lors de la connexion du médecin :', error);\r\n        throw error; // Vous pouvez gérer l'erreur ici ou la laisser remonter\r\n      }\r\n    }\r\n  \r\n    export const medecinUid = { uid: '' };\r\n\r\n    export async function ajouterSecretaire(\r\n      firestore: AngularFirestore,\r\n      nom: string,\r\n      prenom: string,\r\n      mail: string,\r\n      numero: string,\r\n      password: string,\r\n      medecinUid: string\r\n    ): Promise<void> {\r\n      try {\r\n        // Ajoutez votre logique pour ajouter les données du formulaire à la collection 'secretaire'\r\n        // Utilisez firestore.collection('secretaire') pour accéder à la collection 'secretaire' dans Firebase\r\n        await firestore.collection('secretaire').add({\r\n          nom: nom,\r\n          prenom: prenom,\r\n          mail: mail,\r\n          numero: numero,\r\n          password: password,\r\n          medecinUid: medecinUid\r\n        });\r\n    \r\n        console.log('Secrétaire ajoutée avec succès à la base de données.');\r\n      } catch (error) {\r\n        console.error('Erreur lors de l\\'ajout du secrétaire à la base de données :', error);\r\n        throw error; // Vous pouvez gérer l'erreur ici ou la laisser remonter\r\n      }\r\n    }\r\n    \r\n\r\n    export const getSecretaireByUid = (firestore: AngularFirestore, uid: string): Observable<any> => {\r\n      return firestore.collection('secretaires').doc(uid).snapshotChanges().pipe(\r\n        map(docChange => {\r\n          const data = docChange.payload.data();\r\n          if (data) {\r\n            return data;\r\n            console.log(data);\r\n          } else {\r\n            throw new Error('Secrétaire non trouvé');\r\n          }\r\n        })\r\n      );\r\n    };\r\n\r\n    \r\n\r\n    // firebaseConfig.ts\r\n\r\nexport async function getPatientsByMedecinUid(firestore: AngularFirestore, medecinUid: string): Promise<Patient[]> {\r\n  try {\r\n    const snapshot = await firestore.collection('patient').ref.where('medecinUid', '==', medecinUid).get();\r\n\r\n    const patients: Patient[] = snapshot.docs.map(doc => {\r\n      const data = doc.data() as PatientData;\r\n\r\n      return {\r\n        id: doc.id,\r\n        nom: data.nom,\r\n        prenom: data.prenom,\r\n        email: data.email,\r\n        telephone: data.telephone,\r\n        dateNaissance: data.dateNaissance,\r\n        sexe: data.sexe,\r\n      };\r\n    });\r\n\r\n    return patients;\r\n  } catch (error) {\r\n    console.error('Error fetching patients:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n    interface PatientData {\r\n      nom: string;\r\n      prenom: string;\r\n      email: string;\r\n      telephone: string;\r\n      dateNaissance: string;\r\n      sexe: string;\r\n    }\r\n    \r\n    export interface Patient {\r\n      id: string;\r\n      nom: string;\r\n      prenom: string;\r\n      email: string;\r\n      telephone: string;\r\n      dateNaissance: string;\r\n      sexe: string;\r\n    }\r\n\r\n\r\n\r\n    export interface MedicamentDD {\r\n      class: string;\r\n      conditionnement: string;\r\n      conservation: string;\r\n      amm: string;\r\n      dateamm: string;\r\n      dci: string;\r\n      dosage: string;\r\n      forme: string;\r\n      indication: string;\r\n      laboratoire: string;\r\n      sousclass: string;\r\n      specialite: string;\r\n      specification: string;\r\n      tableau: string;\r\n    }\r\n    \r\n\r\n    export async function getMedicamentByName(firestore: AngularFirestore, nomMedicament: string) {\r\n      const snapshot = await firestore.collection('med').ref.where('specialite', '==', nomMedicament).get();\r\n    \r\n      if (snapshot) {\r\n        // Convertir le snapshot en tableau de médicaments\r\n        const medicaments: MedicamentDD[] = snapshot.docs.map(doc => {\r\n          const data = doc.data() as MedicamentDD;\r\n          return { id: doc.id, ...data };\r\n        });\r\n    \r\n        return medicaments;\r\n      } else {\r\n        console.log('Aucun médicament trouvé avec ce nom :', nomMedicament);\r\n        return null; // Ou renvoyez un objet vide, selon vos besoins\r\n      }\r\n    }\r\n\r\n\r\n    interface PersonneData {\r\n      nom: string;\r\n      prenom: string;\r\n    }\r\n\r\n\r\n  \r\n    export async function getPersonByUid(firestore: AngularFirestore, uid: string) {\r\n      try {\r\n        const snapshot = await firestore.collection('personne').ref.where('uidPersonne', '==', uid).get();\r\n    \r\n        if (snapshot) {\r\n          // Convertir le snapshot en objet personne\r\n          const personne: PersonneData[] = snapshot.docs.map(doc => {\r\n            const data = doc.data() as PersonneData;\r\n            return { id: doc.id, ...data };\r\n          });\r\n          return personne;\r\n        } else {\r\n          console.log('Aucune personne trouvée avec cet UID :', uid);\r\n          return null; // Ou renvoyez un objet vide, selon vos besoins\r\n        }\r\n      } catch (error) {\r\n        console.error('Erreur lors de la récupération de la personne par UID:', error);\r\n        throw error; // Vous pouvez gérer l'erreur selon vos besoins\r\n      }\r\n    }\r\n\r\n    export async function savePersonData(firestore: AngularFirestore, nom: string, prenom: string, uidPersonne: string) {\r\n      try {\r\n        const personne = {\r\n          nom: nom,\r\n          prenom: prenom,\r\n          uidPersonne: uidPersonne\r\n        };\r\n    \r\n        await firestore.collection('personne').add(personne);\r\n        console.log('Données de la personne enregistrées avec succès dans Firebase.');\r\n      } catch (error) {\r\n        console.error('Erreur lors de l\\'enregistrement des données de la personne dans Firebase :', error);\r\n        throw error;\r\n      }\r\n    }\r\n    export async function AddRendezVous(firestore: AngularFirestore, medecinId: string, rendezVousData: any) {\r\n      try {\r\n        // Ajoutez le rendez-vous à la sous-collection \"rdv\" pour le médecin spécifié\r\n        await firestore.collection('medecin').doc(medecinId).collection('rdv').add(rendezVousData);\r\n    \r\n        console.log('Rendez-vous ajouté avec succès à Firebase.');\r\n      } catch (error) {\r\n        console.error('Erreur lors de l\\'ajout du rendez-vous à Firebase :', error);\r\n      }\r\n    }\r\n    interface RendezVousData {\r\n      date: string;\r\n      heure: string;\r\n      nom: string;\r\n      prenom: string;\r\n      useruid: string;\r\n    }\r\n    \r\n    export async function getRdvByPatientUid(firestore: AngularFirestore, medecinId: string, userUid: string) {\r\n      try {\r\n        const snapshot = await firestore.collection('medecin').doc(medecinId).collection('rdv').ref.where('useruid', '==', userUid).get();\r\n    \r\n        if (snapshot) {\r\n          // Convertir le snapshot en objet rendez-vous\r\n          const rdv: RendezVousData[] = snapshot.docs.map(doc => {\r\n            const data = doc.data() as RendezVousData;\r\n            return { id: doc.id, ...data };\r\n          });\r\n          return rdv;\r\n        } else {\r\n          console.log('Aucun rendez-vous trouvé avec cet UID de patient :', userUid);\r\n          return null; // Ou renvoyez un objet vide, selon vos besoins\r\n        }\r\n      } catch (error) {\r\n        console.error('Erreur lors de la récupération des rendez-vous par UID de patient:', error);\r\n        throw error; // Vous pouvez gérer l'erreur selon vos besoins\r\n      }\r\n    }\r\n    \r\n    export async function AddRendezVousForUser(firestore: AngularFirestore, userId: string, rendezVousData: any) {\r\n      try {\r\n        // Ajoutez le rendez-vous à la sous-collection \"rdv\" pour l'utilisateur spécifié\r\n        await firestore.collection('inscrits').doc(userId).collection('rdv').add(rendezVousData);\r\n    \r\n        console.log('Rendez-vous ajouté avec succès chez l\\'utilisateur dans Firebase.');\r\n      } catch (error) {\r\n        console.error('Erreur lors de l\\'ajout du rendez-vous chez l\\'utilisateur dans Firebase :', error);\r\n        throw error; // Vous pouvez gérer l'erreur selon vos besoins\r\n      }\r\n    }"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}