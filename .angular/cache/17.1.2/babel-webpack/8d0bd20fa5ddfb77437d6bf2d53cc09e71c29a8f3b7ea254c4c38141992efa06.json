{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/MacBook Air/Desktop/shifai1VV/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { TestBed, waitForAsync } from '@angular/core/testing';\nimport { AjoutMedecinPage } from './ajout-medecin.page';\nimport { AngularFirestore } from '@angular/fire/compat/firestore'; // Importez AngularFirestore\nimport { NavController, ToastController } from '@ionic/angular';\ndescribe('AjoutMedecinPage', () => {\n  let component;\n  let fixture;\n  let fakeFirestore;\n  let fakeToastController; // Définissez le type correct pour le ToastController simulé\n  beforeEach(waitForAsync(() => {\n    TestBed.configureTestingModule({\n      declarations: [AjoutMedecinPage],\n      providers: [AngularFirestore, NavController, ToastController] // Ajoutez les services nécessaires ici le cas échéant\n    }).compileComponents().then(() => {\n      fixture = TestBed.createComponent(AjoutMedecinPage);\n      component = fixture.componentInstance;\n      // Créez un fake AngularFirestore pour les tests\n      fakeFirestore = TestBed.inject(AngularFirestore);\n      // Créez un fake ToastController pour les tests\n      fakeToastController = jasmine.createSpyObj('ToastController', ['create', 'present']); // Créez un faux objet ToastController\n      component.setToastController(fakeToastController);\n      fixture.detectChanges();\n    });\n  }));\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n  it('should fetch medecins successfully', waitForAsync( /*#__PURE__*/_asyncToGenerator(function* () {\n    component.etat = 'Tunis'; // Exemple d'état pour le test\n    component.specialite = 'Cardiologie'; // Exemple de spécialité pour le test\n    yield component.fetchMedecins();\n    expect(component.medecins.length).toBeGreaterThan(0);\n  })));\n  it('should add medecin for patient successfully', waitForAsync( /*#__PURE__*/_asyncToGenerator(function* () {\n    const fakeMedecin = {\n      uid: 'fake-uid',\n      nom: 'Dr. John Doe',\n      prenom: 'Jane',\n      sexe: 'Masculin',\n      email: 'john.doe@example.com',\n      password: '123456',\n      date: '01/01/1990',\n      delegation: 'Tunis',\n      etat: 'Tunis',\n      specialite: 'Cardiologie',\n      telephone: '1234567890'\n    };\n    yield component.AddMedecinforpatient(fakeMedecin);\n    expect(fakeToastController.create).toHaveBeenCalled(); // Vérifie que la méthode create du ToastController simulé a été appelée\n    expect(console.log).toHaveBeenCalledWith('ajout avec succes');\n  })));\n});","map":{"version":3,"names":["TestBed","waitForAsync","AjoutMedecinPage","AngularFirestore","NavController","ToastController","describe","component","fixture","fakeFirestore","fakeToastController","beforeEach","configureTestingModule","declarations","providers","compileComponents","then","createComponent","componentInstance","inject","jasmine","createSpyObj","setToastController","detectChanges","it","expect","toBeTruthy","_asyncToGenerator","etat","specialite","fetchMedecins","medecins","length","toBeGreaterThan","fakeMedecin","uid","nom","prenom","sexe","email","password","date","delegation","telephone","AddMedecinforpatient","create","toHaveBeenCalled","console","log","toHaveBeenCalledWith"],"sources":["C:\\Users\\MacBook Air\\Desktop\\shifai1VV\\src\\app\\ajout-medecin\\ajout-medecin.page.spec.ts"],"sourcesContent":["import { ComponentFixture, TestBed, waitForAsync } from '@angular/core/testing';\nimport { AjoutMedecinPage, MedecinData } from './ajout-medecin.page';\nimport { AngularFirestore } from '@angular/fire/compat/firestore'; // Importez AngularFirestore\nimport { NavController, ToastController } from '@ionic/angular';\n\ndescribe('AjoutMedecinPage', () => {\n  let component: AjoutMedecinPage;\n  let fixture: ComponentFixture<AjoutMedecinPage>;\n  let fakeFirestore: AngularFirestore;\n  let fakeToastController: any; // Définissez le type correct pour le ToastController simulé\n\n  beforeEach(waitForAsync(() => {\n    TestBed.configureTestingModule({\n      declarations: [AjoutMedecinPage],\n      providers: [AngularFirestore, NavController, ToastController], // Ajoutez les services nécessaires ici le cas échéant\n    }).compileComponents().then(() => {\n      fixture = TestBed.createComponent(AjoutMedecinPage);\n      component = fixture.componentInstance;\n\n      // Créez un fake AngularFirestore pour les tests\n      fakeFirestore = TestBed.inject(AngularFirestore);\n\n      // Créez un fake ToastController pour les tests\n      fakeToastController = jasmine.createSpyObj('ToastController', ['create', 'present']); // Créez un faux objet ToastController\n      component.setToastController(fakeToastController);\n\n      fixture.detectChanges();\n    });\n  }));\n\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n\n  it('should fetch medecins successfully', waitForAsync(async () => {\n    component.etat = 'Tunis'; // Exemple d'état pour le test\n    component.specialite = 'Cardiologie'; // Exemple de spécialité pour le test\n    await component.fetchMedecins();\n    expect(component.medecins.length).toBeGreaterThan(0);\n  }));\n\n  it('should add medecin for patient successfully', waitForAsync(async () => {\n    const fakeMedecin: MedecinData = {\n      uid: 'fake-uid',\n      nom: 'Dr. John Doe',\n      prenom: 'Jane',\n      sexe: 'Masculin',\n      email: 'john.doe@example.com',\n      password: '123456',\n      date: '01/01/1990',\n      delegation: 'Tunis',\n      etat: 'Tunis',\n      specialite: 'Cardiologie',\n      telephone: '1234567890',\n    };\n    await component.AddMedecinforpatient(fakeMedecin);\n    expect(fakeToastController.create).toHaveBeenCalled(); // Vérifie que la méthode create du ToastController simulé a été appelée\n    expect(console.log).toHaveBeenCalledWith('ajout avec succes');\n  }));\n});\n"],"mappings":";AAAA,SAA2BA,OAAO,EAAEC,YAAY,QAAQ,uBAAuB;AAC/E,SAASC,gBAAgB,QAAqB,sBAAsB;AACpE,SAASC,gBAAgB,QAAQ,gCAAgC,CAAC,CAAC;AACnE,SAASC,aAAa,EAAEC,eAAe,QAAQ,gBAAgB;AAE/DC,QAAQ,CAAC,kBAAkB,EAAE,MAAK;EAChC,IAAIC,SAA2B;EAC/B,IAAIC,OAA2C;EAC/C,IAAIC,aAA+B;EACnC,IAAIC,mBAAwB,CAAC,CAAC;EAE9BC,UAAU,CAACV,YAAY,CAAC,MAAK;IAC3BD,OAAO,CAACY,sBAAsB,CAAC;MAC7BC,YAAY,EAAE,CAACX,gBAAgB,CAAC;MAChCY,SAAS,EAAE,CAACX,gBAAgB,EAAEC,aAAa,EAAEC,eAAe,CAAC,CAAE;KAChE,CAAC,CAACU,iBAAiB,EAAE,CAACC,IAAI,CAAC,MAAK;MAC/BR,OAAO,GAAGR,OAAO,CAACiB,eAAe,CAACf,gBAAgB,CAAC;MACnDK,SAAS,GAAGC,OAAO,CAACU,iBAAiB;MAErC;MACAT,aAAa,GAAGT,OAAO,CAACmB,MAAM,CAAChB,gBAAgB,CAAC;MAEhD;MACAO,mBAAmB,GAAGU,OAAO,CAACC,YAAY,CAAC,iBAAiB,EAAE,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC;MACtFd,SAAS,CAACe,kBAAkB,CAACZ,mBAAmB,CAAC;MAEjDF,OAAO,CAACe,aAAa,EAAE;IACzB,CAAC,CAAC;EACJ,CAAC,CAAC,CAAC;EAEHC,EAAE,CAAC,eAAe,EAAE,MAAK;IACvBC,MAAM,CAAClB,SAAS,CAAC,CAACmB,UAAU,EAAE;EAChC,CAAC,CAAC;EAEFF,EAAE,CAAC,oCAAoC,EAAEvB,YAAY,eAAA0B,iBAAA,CAAC,aAAW;IAC/DpB,SAAS,CAACqB,IAAI,GAAG,OAAO,CAAC,CAAC;IAC1BrB,SAAS,CAACsB,UAAU,GAAG,aAAa,CAAC,CAAC;IACtC,MAAMtB,SAAS,CAACuB,aAAa,EAAE;IAC/BL,MAAM,CAAClB,SAAS,CAACwB,QAAQ,CAACC,MAAM,CAAC,CAACC,eAAe,CAAC,CAAC,CAAC;EACtD,CAAC,EAAC,CAAC;EAEHT,EAAE,CAAC,6CAA6C,EAAEvB,YAAY,eAAA0B,iBAAA,CAAC,aAAW;IACxE,MAAMO,WAAW,GAAgB;MAC/BC,GAAG,EAAE,UAAU;MACfC,GAAG,EAAE,cAAc;MACnBC,MAAM,EAAE,MAAM;MACdC,IAAI,EAAE,UAAU;MAChBC,KAAK,EAAE,sBAAsB;MAC7BC,QAAQ,EAAE,QAAQ;MAClBC,IAAI,EAAE,YAAY;MAClBC,UAAU,EAAE,OAAO;MACnBd,IAAI,EAAE,OAAO;MACbC,UAAU,EAAE,aAAa;MACzBc,SAAS,EAAE;KACZ;IACD,MAAMpC,SAAS,CAACqC,oBAAoB,CAACV,WAAW,CAAC;IACjDT,MAAM,CAACf,mBAAmB,CAACmC,MAAM,CAAC,CAACC,gBAAgB,EAAE,CAAC,CAAC;IACvDrB,MAAM,CAACsB,OAAO,CAACC,GAAG,CAAC,CAACC,oBAAoB,CAAC,mBAAmB,CAAC;EAC/D,CAAC,EAAC,CAAC;AACL,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}