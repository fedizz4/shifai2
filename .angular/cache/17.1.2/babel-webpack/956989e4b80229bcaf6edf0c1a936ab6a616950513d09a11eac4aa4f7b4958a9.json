{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { CommonModule } from '@angular/common';\nimport { Component, NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { IonicModule } from '@ionic/angular';\nimport { Subject, takeUntil } from 'rxjs';\nlet WorkHoursModalComponent = class WorkHoursModalComponent {\n  constructor(modalController, firestore) {\n    this.modalController = modalController;\n    this.firestore = firestore;\n    // Working hours for the day\n    this.workHours = [{\n      start: '08:00',\n      end: '08:30'\n    }, {\n      start: '08:30',\n      end: '09:00'\n    }, {\n      start: '09:00',\n      end: '09:30'\n    }, {\n      start: '09:30',\n      end: '10:00'\n    }, {\n      start: '10:00',\n      end: '10:30'\n    }, {\n      start: '10:30',\n      end: '11:00'\n    }, {\n      start: '11:00',\n      end: '11:30'\n    }, {\n      start: '11:30',\n      end: '12:00'\n    }, {\n      start: '14:00',\n      end: '14:30'\n    }, {\n      start: '14:30',\n      end: '15:00'\n    }, {\n      start: '15:00',\n      end: '15:30'\n    }, {\n      start: '15:30',\n      end: '16:00'\n    }, {\n      start: '16:00',\n      end: '16:30'\n    }, {\n      start: '16:30',\n      end: '17:00'\n    }];\n    // Reserved hours for the day\n    this.reservedHours = []; // Initialize as empty array\n    this.destroy$ = new Subject();\n  }\n  ngOnInit() {\n    this.fetchReservedHours();\n  }\n  close() {\n    this.modalController.dismiss();\n  }\n  selectHour(hour) {\n    // Logic to handle when patient selects an hour in the modal\n    // For example, you can pass the selected hour back to the parent component using modal dismiss with data\n    this.modalController.dismiss({\n      selectedHour: hour\n    });\n  }\n  fetchReservedHours() {\n    this.firestore.collection('appointments').valueChanges().pipe(takeUntil(this.destroy$)).subscribe(appointments => {\n      this.reservedHours = appointments.map(appointment => appointment.date.split(' ')[1]);\n    });\n  }\n  isHourReserved(hour) {\n    return this.reservedHours.includes(hour);\n  }\n  ngOnDestroy() {\n    this.destroy$.next(true);\n    this.destroy$.unsubscribe();\n  }\n};\nWorkHoursModalComponent = __decorate([NgModule({\n  imports: [CommonModule, FormsModule, IonicModule],\n  declarations: [WorkHoursModalComponent]\n}), Component({\n  selector: 'app-work-hours-modal',\n  templateUrl: './work-hours-modal.component.html',\n  styleUrls: ['./work-hours-modal.component.scss']\n})], WorkHoursModalComponent);\nexport { WorkHoursModalComponent };","map":{"version":3,"names":["CommonModule","Component","NgModule","FormsModule","IonicModule","Subject","takeUntil","WorkHoursModalComponent","constructor","modalController","firestore","workHours","start","end","reservedHours","destroy$","ngOnInit","fetchReservedHours","close","dismiss","selectHour","hour","selectedHour","collection","valueChanges","pipe","subscribe","appointments","map","appointment","date","split","isHourReserved","includes","ngOnDestroy","next","unsubscribe","__decorate","imports","declarations","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\MacBook Air\\Desktop\\shifai1VV\\src\\app\\affiche-medecin\\work-hours-modal\\work-hours-modal.component.ts"],"sourcesContent":["import { CommonModule } from '@angular/common';\nimport { Component, NgModule, OnInit } from '@angular/core';\nimport { AngularFirestore } from '@angular/fire/compat/firestore';\nimport { FormsModule } from '@angular/forms';\nimport { IonicModule, ModalController } from '@ionic/angular';\nimport { Subject, takeUntil } from 'rxjs';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule\n  ],\n  declarations: [WorkHoursModalComponent]\n})\n\n@Component({\n  selector: 'app-work-hours-modal',\n  templateUrl: './work-hours-modal.component.html',\n  styleUrls: ['./work-hours-modal.component.scss'],\n})\nexport class WorkHoursModalComponent implements OnInit {\n\n  // Working hours for the day\n  workHours: { start: string, end: string }[] = [\n    { start: '08:00', end: '08:30' },\n    { start: '08:30', end: '09:00' },\n    { start: '09:00', end: '09:30' },\n    { start: '09:30', end: '10:00' },\n    { start: '10:00', end: '10:30' },\n    { start: '10:30', end: '11:00' },\n    { start: '11:00', end: '11:30' },\n    { start: '11:30', end: '12:00' },\n    { start: '14:00', end: '14:30' },\n    { start: '14:30', end: '15:00' },\n    { start: '15:00', end: '15:30' },\n    { start: '15:30', end: '16:00' },\n    { start: '16:00', end: '16:30' },\n    { start: '16:30', end: '17:00' },\n];\n\n  constructor(private modalController: ModalController, private firestore: AngularFirestore,) { }\n\n  ngOnInit() {\n    this.fetchReservedHours();\n  }\n\n  close() {\n    this.modalController.dismiss();\n  }\n\n  selectHour(hour: string) {\n    // Logic to handle when patient selects an hour in the modal\n    // For example, you can pass the selected hour back to the parent component using modal dismiss with data\n    this.modalController.dismiss({ selectedHour: hour });\n  }\n   // Reserved hours for the day\n   reservedHours: string[] = []; // Initialize as empty array\n\n   destroy$: Subject<boolean> = new Subject<boolean>();\n \n \n \n   fetchReservedHours() {\n    this.firestore.collection('appointments').valueChanges()\n      .pipe(takeUntil(this.destroy$))\n      .subscribe((appointments: any[]) => {\n        this.reservedHours = appointments.map(appointment => appointment.date.split(' ')[1]) as string[];\n      });\n  }\n \n   isHourReserved(hour: string): boolean {\n     return this.reservedHours.includes(hour);\n   }\n\n \n   ngOnDestroy() {\n     this.destroy$.next(true);\n     this.destroy$.unsubscribe();\n   }\n\n \n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}