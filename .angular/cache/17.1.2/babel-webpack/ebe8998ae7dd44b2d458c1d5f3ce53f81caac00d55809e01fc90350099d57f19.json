{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/MacBook Air/Desktop/shifai1VV/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _PatientPage;\nimport { getRdvByMedUid } from 'src/firebaseConfig';\nimport { FichePatientModalComponent } from './fiche-patient-modal/fiche-patient-modal.component';\nimport { meduid } from '../login-medecin/login-medecin.page';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/compat/firestore\";\nimport * as i2 from \"@ionic/angular\";\nimport * as i3 from \"@angular/common\";\nfunction PatientPage_ion_item_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"ion-item\")(1, \"ion-label\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"ion-button\", 1);\n    i0.ɵɵlistener(\"click\", function PatientPage_ion_item_6_Template_ion_button_click_3_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r3);\n      const rdv_r1 = restoredCtx.$implicit;\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.openFichePatientModal(rdv_r1));\n    });\n    i0.ɵɵtext(4, \"Fiche Patient\");\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const rdv_r1 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate4(\"\", rdv_r1.date, \" - \", rdv_r1.heure, \" - \", rdv_r1.nom, \" \", rdv_r1.prenom, \"\");\n  }\n}\nexport class PatientPage {\n  constructor(firestore, modalController) {\n    this.firestore = firestore;\n    this.modalController = modalController;\n    this.rdvs = [];\n    this.loadRdv();\n  }\n  ngOnInit() {}\n  loadRdv() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      try {\n        const rdvs = yield getRdvByMedUid(_this.firestore, meduid); // Utilisez medecinUid.uid pour obtenir l'UID du médecin\n        if (rdvs && rdvs.length > 0) {\n          _this.rdvs = rdvs;\n        } else {\n          console.log('Aucun rendez-vous trouvé pour ce médecin.');\n        }\n      } catch (error) {\n        console.error('Erreur lors du chargement des rendez-vous:', error);\n      }\n    })();\n  }\n  openFichePatientModal(rendezVous) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const modal = yield _this2.modalController.create({\n        component: FichePatientModalComponent,\n        componentProps: {\n          rendezVousData: rendezVous\n        }\n      });\n      modal.onDidDismiss().then(data => {\n        if (data && data.data) {\n          // Enregistrez les données de la fiche patient dans la base de données Firebase ici\n          console.log('Données de la fiche patient à enregistrer :', data.data);\n        }\n      });\n      return yield modal.present();\n    })();\n  }\n}\n_PatientPage = PatientPage;\n_PatientPage.ɵfac = function PatientPage_Factory(t) {\n  return new (t || _PatientPage)(i0.ɵɵdirectiveInject(i1.AngularFirestore), i0.ɵɵdirectiveInject(i2.ModalController));\n};\n_PatientPage.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: _PatientPage,\n  selectors: [[\"app-affiche-patient\"]],\n  decls: 7,\n  vars: 1,\n  consts: [[4, \"ngFor\", \"ngForOf\"], [\"color\", \"primary\", 3, \"click\"]],\n  template: function PatientPage_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"ion-header\")(1, \"ion-toolbar\")(2, \"ion-title\");\n      i0.ɵɵtext(3, \"Liste des rendez-vous\");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(4, \"ion-content\")(5, \"ion-list\");\n      i0.ɵɵtemplate(6, PatientPage_ion_item_6_Template, 5, 4, \"ion-item\", 0);\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"ngForOf\", ctx.rdvs);\n    }\n  },\n  dependencies: [i3.NgForOf, i2.IonButton, i2.IonContent, i2.IonHeader, i2.IonItem, i2.IonLabel, i2.IonList, i2.IonTitle, i2.IonToolbar],\n  styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"names":["getRdvByMedUid","FichePatientModalComponent","meduid","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵlistener","PatientPage_ion_item_6_Template_ion_button_click_3_listener","restoredCtx","ɵɵrestoreView","_r3","rdv_r1","$implicit","ctx_r2","ɵɵnextContext","ɵɵresetView","openFichePatientModal","ɵɵadvance","ɵɵtextInterpolate4","date","heure","nom","prenom","PatientPage","constructor","firestore","modalController","rdvs","loadRdv","ngOnInit","_this","_asyncToGenerator","length","console","log","error","rendezVous","_this2","modal","create","component","componentProps","rendezVousData","onDidDismiss","then","data","present","ɵɵdirectiveInject","i1","AngularFirestore","i2","ModalController","selectors","decls","vars","consts","template","PatientPage_Template","rf","ctx","ɵɵtemplate","PatientPage_ion_item_6_Template","ɵɵproperty"],"sources":["C:\\Users\\MacBook Air\\Desktop\\shifai1VV\\src\\app\\patient\\patient.page.ts","C:\\Users\\MacBook Air\\Desktop\\shifai1VV\\src\\app\\patient\\patient.page.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { AngularFirestore } from '@angular/fire/compat/firestore';\nimport { ModalController } from '@ionic/angular';\nimport { RendezVousData, getRdvByMedUid, medecinUid } from 'src/firebaseConfig';\nimport { FichePatientModalComponent } from './fiche-patient-modal/fiche-patient-modal.component';\nimport { meduid } from '../login-medecin/login-medecin.page';\n\n\n@Component({\n  selector: 'app-affiche-patient',\n  templateUrl: './patient.page.html',\n  styleUrls: ['./patient.page.scss'],\n})\nexport class PatientPage implements OnInit {\n\n  rdvs: RendezVousData[] = [];\n  constructor(private firestore: AngularFirestore, private modalController: ModalController) {\n    this.loadRdv();\n  }\n\n  ngOnInit() {\n  }\n\n  async loadRdv() {\n    try {\n      const rdvs = await getRdvByMedUid(this.firestore, meduid); // Utilisez medecinUid.uid pour obtenir l'UID du médecin\n      if (rdvs && rdvs.length > 0) {\n        this.rdvs = rdvs;\n      } else {\n        console.log('Aucun rendez-vous trouvé pour ce médecin.');\n      }\n    } catch (error) {\n      console.error('Erreur lors du chargement des rendez-vous:', error);\n    }\n  }\n\n  async openFichePatientModal(rendezVous: RendezVousData) {\n    const modal = await this.modalController.create({\n      component: FichePatientModalComponent,\n      componentProps: {\n        rendezVousData: rendezVous\n      }\n    });\n\n    modal.onDidDismiss().then((data) => {\n      if (data && data.data) {\n        // Enregistrez les données de la fiche patient dans la base de données Firebase ici\n        console.log('Données de la fiche patient à enregistrer :', data.data);\n      }\n    });\n\n    return await modal.present();\n  }\n}\n","<ion-header>\n  <ion-toolbar>\n    <ion-title>Liste des rendez-vous</ion-title>\n  </ion-toolbar>\n</ion-header>\n\n<ion-content>\n  <ion-list>\n    <ion-item *ngFor=\"let rdv of rdvs\">\n      <ion-label>{{ rdv.date }} - {{ rdv.heure }} - {{ rdv.nom }} {{ rdv.prenom }}</ion-label>\n      <ion-button (click)=\"openFichePatientModal(rdv)\" color=\"primary\">Fiche Patient</ion-button>\n    </ion-item>\n  </ion-list>\n</ion-content>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}