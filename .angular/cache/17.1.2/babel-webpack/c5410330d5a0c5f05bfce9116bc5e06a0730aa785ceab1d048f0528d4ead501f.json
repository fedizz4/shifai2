{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/MacBook Air/Desktop/shifai1VV/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _ConsultationMedPage;\nimport { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"./consultation-med.page.html?ngResource\";\nimport __NG_CLI_RESOURCE__1 from \"./consultation-med.page.scss?ngResource\";\nimport { Component } from '@angular/core';\nimport { AngularFirestore } from '@angular/fire/compat/firestore';\nimport { getConsultations, getPatientsByMedUid } from 'src/firebaseConfig';\nimport { medecinUid } from 'src/firebaseConfig';\nlet ConsultationMedPage = (_ConsultationMedPage = class ConsultationMedPage {\n  constructor(firestore) {\n    this.firestore = firestore;\n    this.consultationDate = ''; // Variable pour stocker la date de consultation\n    this.consultations = [];\n    this.uid = medecinUid.uid;\n    this.patients = [];\n    this.consultationsCollection = this.firestore.collection('consultations');\n  }\n  ngOnInit() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      console.log('Med UID:', _this.uid);\n      yield _this.getPatients();\n    })();\n  }\n  searchConsultations() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        if (!_this2.consultationDate) {\n          console.log('Veuillez sélectionner une date de consultation.');\n          return;\n        }\n        // Filtrer les consultations pour la date spécifiée\n        _this2.patients.forEach(patient => {\n          patient.consultations = patient.consultations.filter(consultation => consultation.date === _this2.consultationDate);\n        });\n      } catch (error) {\n        console.error('Error loading consultations for date:', error);\n      }\n    })();\n  }\n  getConsultationsForDate(date) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        const querySnapshot = yield _this3.consultationsCollection.ref.where('date', '==', date).get();\n        if (!querySnapshot.empty) {\n          return querySnapshot.docs.map(doc => doc.data());\n        } else {\n          return []; // Aucune consultation trouvée\n        }\n      } catch (error) {\n        console.error('Error fetching consultations for date:', error);\n        throw error;\n      }\n    })();\n  }\n  getPatients() {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        const patients = yield getPatientsByMedUid(_this4.firestore, _this4.uid);\n        console.log(patients);\n        if (patients.length > 0) {\n          _this4.patients = patients.map(patient => ({\n            ...patient,\n            consultations: [] // Initialiser consultations comme un tableau vide\n          }));\n          console.log('patients', _this4.patients);\n          // Charger les consultations pour chaque patient\n          for (const patient of _this4.patients) {\n            const consultations = yield getConsultations(_this4.firestore, medecinUid.uid, patient.uid);\n            if (consultations && consultations.length > 0) {\n              patient.consultations = consultations; // Ajouter les consultations au patient\n            }\n          }\n        }\n        console.log(\"Patients trouvés :\", _this4.patients);\n      } catch (error) {\n        console.error('Erreur lors de la récupération des patients :', error);\n      }\n    })();\n  }\n}, _ConsultationMedPage.ctorParameters = () => [{\n  type: AngularFirestore\n}], _ConsultationMedPage);\nConsultationMedPage = __decorate([Component({\n  selector: 'app-consultation-med',\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n})], ConsultationMedPage);\nexport { ConsultationMedPage };","map":{"version":3,"names":["Component","AngularFirestore","getConsultations","getPatientsByMedUid","medecinUid","ConsultationMedPage","_ConsultationMedPage","constructor","firestore","consultationDate","consultations","uid","patients","consultationsCollection","collection","ngOnInit","_this","_asyncToGenerator","console","log","getPatients","searchConsultations","_this2","forEach","patient","filter","consultation","date","error","getConsultationsForDate","_this3","querySnapshot","ref","where","get","empty","docs","map","doc","data","_this4","length","__decorate","selector","template","__NG_CLI_RESOURCE__0"],"sources":["C:\\Users\\MacBook Air\\Desktop\\shifai1VV\\src\\app\\consultation-med\\consultation-med.page.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { AngularFirestore, AngularFirestoreCollection, DocumentData } from '@angular/fire/compat/firestore';\nimport { getConsultations, getPatientsByMedUid } from 'src/firebaseConfig';\nimport { medecinUid } from 'src/firebaseConfig';\n\ninterface ConsultationData {\n  date: string;\n  details?: string;\n}\n\ninterface PatientData {\n  uid: string;\n  nom: string;\n  prenom: string;\n  age: number;\n  sexe: string;\n  groupeSanguin: string;\n  situationFamiliale: string;\n  profession: string;\n  email: string;\n  telephone: string;\n  telephone2: string;\n  numeroAssurance: string;\n  adresse: string;\n  note: string;\n  antecedentsMedicaux: string;\n  antecedentsChirurgicaux: string;\n  antecedentsFamiliaux: string;\n  autresAntecedents: string;\n  medicaments: string;\n  useruid: string;\n  consultations?: ConsultationData[];\n}\n\n@Component({\n  selector: 'app-consultation-med',\n  templateUrl: './consultation-med.page.html',\n  styleUrls: ['./consultation-med.page.scss'],\n})\nexport class ConsultationMedPage implements OnInit {\n  consultationDate: string = ''; // Variable pour stocker la date de consultation\n  consultations: ConsultationData[] = [];\n  uid: string = medecinUid.uid;\n  patients: PatientData[] = [];\n  consultationsCollection!: AngularFirestoreCollection<ConsultationData>; // Déclaration de la collection Firestore\n\n  constructor(private firestore: AngularFirestore) {\n    this.consultationsCollection = this.firestore.collection<ConsultationData>('consultations');\n  }\n\n  async ngOnInit() {\n    console.log('Med UID:', this.uid);\n    await this.getPatients();\n  }\n  async searchConsultations() {\n    try {\n      if (!this.consultationDate) {\n        console.log('Veuillez sélectionner une date de consultation.');\n        return;\n      }\n  \n      // Filtrer les consultations pour la date spécifiée\n      this.patients.forEach(patient => {\n        patient.consultations = patient.consultations!.filter(consultation => consultation.date === this.consultationDate);\n      });\n  \n    } catch (error) {\n      console.error('Error loading consultations for date:', error);\n    }\n  }\n  \n\n  async getConsultationsForDate(date: string) {\n    try {\n      const querySnapshot = await this.consultationsCollection.ref.where('date', '==', date).get();\n      if (!querySnapshot.empty) {\n        return querySnapshot.docs.map(doc => doc.data() as ConsultationData);\n      } else {\n        return []; // Aucune consultation trouvée\n      }\n    } catch (error) {\n      console.error('Error fetching consultations for date:', error);\n      throw error;\n    }\n  }\n\n  async getPatients() {\n    try {\n      const patients = await getPatientsByMedUid(this.firestore, this.uid);\n      console.log(patients);\n      if (patients.length > 0) {\n        this.patients = patients.map(patient => ({\n          ...patient,\n          consultations: [] // Initialiser consultations comme un tableau vide\n        }));\n        console.log('patients', this.patients);\n\n        // Charger les consultations pour chaque patient\n        for (const patient of this.patients) {\n          const consultations = await getConsultations(this.firestore, medecinUid.uid, patient.uid);\n          if (consultations && consultations.length > 0) {\n            patient.consultations = consultations; // Ajouter les consultations au patient\n          }\n        }\n      }\n      console.log(\"Patients trouvés :\", this.patients);\n    } catch (error) {\n      console.error('Erreur lors de la récupération des patients :', error);\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}