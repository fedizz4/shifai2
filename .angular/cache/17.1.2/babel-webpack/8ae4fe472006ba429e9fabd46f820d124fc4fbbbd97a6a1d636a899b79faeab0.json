{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/MacBook Air/Desktop/shifai1VV/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _ParametreMedProfilPage;\nimport { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"./parametre-med-profil.page.html?ngResource\";\nimport __NG_CLI_RESOURCE__1 from \"./parametre-med-profil.page.scss?ngResource\";\nimport { Component } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AngularFirestore } from '@angular/fire/compat/firestore';\nimport { getMedecinByUidA, medecinUid } from 'src/firebaseConfig'; // Importez votre fonction getMedecinByUid\nlet ParametreMedProfilPage = (_ParametreMedProfilPage = class ParametreMedProfilPage {\n  // Remplacez ceci par l'UID du médecin que vous souhaitez afficher\n  constructor(router, firestore) {\n    this.router = router;\n    this.firestore = firestore;\n    this.uid = medecinUid.uid;\n    this.nom = \"\";\n    this.prenom = \"\";\n    this.sexe = \"\";\n    this.email = \"\";\n    this.password = \"\";\n    this.date = \"\";\n    this.delegation = \"\";\n    this.etat = \"\";\n    this.specialite = \"\";\n    this.telephone = \"\";\n    this.medecin = null; // Initialisez medecin à null\n    this.formulaireActif = false; // Indicateur pour activer/désactiver le formulaire\n  }\n  ngOnInit() {\n    this.fetchMedecin();\n  }\n  fetchMedecin() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      try {\n        _this.medecin = yield getMedecinByUidA(_this.firestore, medecinUid.uid);\n        console.log(' vfvfedc   ', _this.medecin);\n        if (_this.medecin) {\n          console.log('Médecin récupéré :', _this.medecin);\n          // Mettez à jour les champs du formulaire avec les données récupérées du médecin\n          _this.nom = _this.medecin.nom;\n          _this.prenom = _this.medecin.prenom;\n          _this.sexe = _this.medecin.sexe;\n          _this.email = _this.medecin.email;\n          _this.password = _this.medecin.password;\n          _this.date = _this.medecin.date;\n          _this.delegation = _this.medecin.delegation;\n          _this.etat = _this.medecin.etat;\n          _this.specialite = _this.medecin.specialite;\n          _this.telephone = _this.medecin.telephone;\n        } else {\n          console.error('Aucun médecin trouvé pour cet UID :', medecinUid.uid);\n        }\n      } catch (error) {\n        console.error('Erreur lors de la récupération du médecin :', error);\n      }\n    })();\n  }\n  activerFormulaire() {\n    this.formulaireActif = true; // Active le formulaire pour les modifications\n  }\n  enregistrerDonnees() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        // Vérifiez que medecin n'est pas null avant de tenter la mise à jour\n        if (_this2.medecin) {\n          const medecinA = {\n            nom: _this2.nom,\n            prenom: _this2.prenom,\n            sexe: _this2.sexe,\n            email: _this2.email,\n            password: _this2.password,\n            date: _this2.date,\n            delegation: _this2.delegation,\n            etat: _this2.etat,\n            specialite: _this2.specialite,\n            telephone: _this2.telephone\n          };\n          yield _this2.firestore.collection('medecin').doc(_this2.uid).update(medecinA);\n          console.log('Données du médecin mises à jour avec succès dans Firebase.');\n          _this2.formulaireActif = false; // Désactivez le formulaire après la mise à jour\n        } else {\n          console.error('Aucun médecin trouvé pour la mise à jour.');\n        }\n      } catch (error) {\n        console.error('Erreur lors de la mise à jour des données du médecin dans Firebase :', error);\n      }\n    })();\n  }\n}, _ParametreMedProfilPage.ctorParameters = () => [{\n  type: Router\n}, {\n  type: AngularFirestore\n}], _ParametreMedProfilPage);\nParametreMedProfilPage = __decorate([Component({\n  selector: 'app-parametre-med-profil',\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n})], ParametreMedProfilPage);\nexport { ParametreMedProfilPage };","map":{"version":3,"names":["Component","Router","AngularFirestore","getMedecinByUidA","medecinUid","ParametreMedProfilPage","_ParametreMedProfilPage","constructor","router","firestore","uid","nom","prenom","sexe","email","password","date","delegation","etat","specialite","telephone","medecin","formulaireActif","ngOnInit","fetchMedecin","_this","_asyncToGenerator","console","log","error","activerFormulaire","enregistrerDonnees","_this2","medecinA","collection","doc","update","__decorate","selector","template","__NG_CLI_RESOURCE__0"],"sources":["C:\\Users\\MacBook Air\\Desktop\\shifai1VV\\src\\app\\parametre-med-profil\\parametre-med-profil.page.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AngularFirestore } from '@angular/fire/compat/firestore';\nimport { getMedecinByUid, getMedecinByUidA, medecinUid } from 'src/firebaseConfig'; // Importez votre fonction getMedecinByUid\n\ninterface MedecinData {\n  uid:string,\n  nom: string;\n  prenom: string;\n  sexe: string;\n  email: string;\n  password: string;\n  date: string;\n  delegation: string;\n  etat: string;\n  specialite: string;\n  telephone: string;\n}\n\n@Component({\n  selector: 'app-parametre-med-profil',\n  templateUrl: './parametre-med-profil.page.html',\n  styleUrls: ['./parametre-med-profil.page.scss'],\n})\nexport class ParametreMedProfilPage implements OnInit {\n  uid=medecinUid.uid;\n  nom:string=\"\";\n  prenom:string=\"\";\n  sexe:string=\"\";\n  email: string=\"\";\n  password: string=\"\";\n  date: string=\"\";\n  delegation: string=\"\";\n  etat: string=\"\";\n  specialite: string=\"\";\n  telephone: string=\"\";\n  \n  medecin: MedecinData | null=null ; // Initialisez medecin à null\n  formulaireActif: boolean = false; // Indicateur pour activer/désactiver le formulaire\n ; // Remplacez ceci par l'UID du médecin que vous souhaitez afficher\n\n  constructor(private router: Router, private firestore: AngularFirestore) {}\n\n  ngOnInit() {\n    \n    this.fetchMedecin();\n    \n  }\n\n  async fetchMedecin() {\n    try {\n      this.medecin = await getMedecinByUidA(this.firestore, medecinUid.uid);\n      console.log(' vfvfedc   ',this.medecin)\n      if (this.medecin) {\n        console.log('Médecin récupéré :', this.medecin);\n        // Mettez à jour les champs du formulaire avec les données récupérées du médecin\n        this.nom = this.medecin.nom;\n        this.prenom = this.medecin.prenom;\n        this.sexe = this.medecin.sexe;\n        this.email = this.medecin.email;\n        this.password = this.medecin.password;\n        this.date = this.medecin.date;\n        this.delegation = this.medecin.delegation;\n        this.etat = this.medecin.etat;\n        this.specialite = this.medecin.specialite;\n        this.telephone = this.medecin.telephone;\n      } else {\n        console.error('Aucun médecin trouvé pour cet UID :', medecinUid.uid);\n      }\n    } catch (error) {\n      console.error('Erreur lors de la récupération du médecin :', error);\n    }\n  }\n\n  activerFormulaire() {\n    this.formulaireActif = true; // Active le formulaire pour les modifications\n  }\n\n  async enregistrerDonnees() {\n    try {\n      // Vérifiez que medecin n'est pas null avant de tenter la mise à jour\n      if (this.medecin) {\n        const medecinA = {\n          nom: this.nom,\n          prenom: this.prenom,\n          sexe: this.sexe,\n          email: this.email,\n          password: this.password,\n          date: this.date,\n          delegation: this.delegation,\n          etat: this.etat,\n          specialite: this.specialite,\n          telephone: this.telephone\n        };\n  \n        await this.firestore.collection('medecin').doc(this.uid).update(medecinA);\n        console.log('Données du médecin mises à jour avec succès dans Firebase.');\n        this.formulaireActif = false; // Désactivez le formulaire après la mise à jour\n      } else {\n        console.error('Aucun médecin trouvé pour la mise à jour.');\n      }\n    } catch (error) {\n      console.error('Erreur lors de la mise à jour des données du médecin dans Firebase :', error);\n    }\n  }\n}  "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}