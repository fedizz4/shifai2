{"ast":null,"code":"import { TestBed, waitForAsync } from '@angular/core/testing';\nimport { SignupPage } from './signup.page';\nimport { AngularFirestore } from '@angular/fire/compat/firestore';\nimport { ToastController } from '@ionic/angular';\nimport { of, throwError } from 'rxjs';\ndescribe('SignupPage', () => {\n  let component;\n  let fixture;\n  let mockFirestore;\n  let mockToastController;\n  beforeEach(waitForAsync(() => {\n    mockFirestore = jasmine.createSpyObj('AngularFirestore', ['collection', 'doc', 'set']);\n    mockToastController = jasmine.createSpyObj('ToastController', ['create', 'present']);\n    TestBed.configureTestingModule({\n      declarations: [SignupPage],\n      providers: [{\n        provide: AngularFirestore,\n        useValue: mockFirestore\n      }, {\n        provide: ToastController,\n        useValue: mockToastController\n      }]\n    }).compileComponents();\n    fixture = TestBed.createComponent(SignupPage);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n  }));\n  it('should call AddUser function and save data to Firestore', () => {\n    const mockUserData = {\n      familyName: 'Doe',\n      name: 'John',\n      email: 'john.doe@example.com',\n      password: '123456',\n      date: '1990-01-01',\n      sexe: 'M',\n      role: 'patient'\n    };\n    mockFirestore.collection.and.returnValue({\n      doc: id => ({\n        set: data => of(true)\n      })\n    });\n    component.familyName = mockUserData.familyName;\n    component.name = mockUserData.name;\n    component.email = mockUserData.email;\n    component.password = mockUserData.password;\n    component.date = mockUserData.date;\n    component.sexe = mockUserData.sexe;\n    component.role = mockUserData.role;\n    component.AddUser();\n    expect(mockFirestore.collection).toHaveBeenCalledWith('inscrits');\n    expect(mockFirestore.collection('inscrits').doc).toHaveBeenCalledWith(mockUserData.email);\n    expect(mockFirestore.collection('inscrits').doc(mockUserData.email).set).toHaveBeenCalledWith(mockUserData);\n    expect(mockToastController.create).toHaveBeenCalledWith({\n      message: 'Registration successful!',\n      duration: 3000,\n      position: 'bottom'\n    });\n  });\n  it('should reset form fields after successful registration', () => {\n    const mockUserData = {\n      familyName: 'Doe',\n      name: 'John',\n      email: 'john.doe@example.com',\n      password: '123456',\n      date: '1990-01-01',\n      sexe: 'M',\n      role: 'patient'\n    };\n    mockFirestore.collection.and.returnValue({\n      doc: id => ({\n        set: data => of(true)\n      })\n    });\n    component.familyName = mockUserData.familyName;\n    component.name = mockUserData.name;\n    component.email = mockUserData.email;\n    component.password = mockUserData.password;\n    component.date = mockUserData.date;\n    component.sexe = mockUserData.sexe;\n    component.role = mockUserData.role;\n    component.AddUser();\n    expect(component.familyName).toEqual('');\n    expect(component.name).toEqual('');\n    expect(component.email).toEqual('');\n    expect(component.password).toEqual('');\n    expect(component.date).toEqual('');\n    expect(component.sexe).toEqual('');\n    expect(component.role).toEqual('');\n  });\n});\ndescribe('SignupPage error handling', () => {\n  let component;\n  let fixture;\n  let mockFirestore;\n  let mockToastController;\n  beforeEach(waitForAsync(() => {\n    mockFirestore = jasmine.createSpyObj('AngularFirestore', ['collection', 'doc', 'set']);\n    mockToastController = jasmine.createSpyObj('ToastController', ['create', 'present']);\n    TestBed.configureTestingModule({\n      declarations: [SignupPage],\n      providers: [{\n        provide: AngularFirestore,\n        useValue: mockFirestore\n      }, {\n        provide: ToastController,\n        useValue: mockToastController\n      }]\n    }).compileComponents();\n    fixture = TestBed.createComponent(SignupPage);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n  }));\n  it('should display an error message when the email already exists', () => {\n    const mockUserData = {\n      familyName: 'Doe',\n      name: 'John',\n      email: 'john.doe@example.com',\n      password: '123456',\n      date: '1990-01-01',\n      sexe: 'M',\n      role: 'patient'\n    };\n    mockFirestore.collection.and.returnValue({\n      doc: id => ({\n        set: data => throwError({\n          error: 'ra'\n        })\n      })\n    });\n    component.familyName = mockUserData.familyName;\n    component.name = mockUserData.name;\n    component.email = mockUserData.email;\n    component.password = mockUserData.password;\n    component.date = mockUserData.date;\n    component.sexe = mockUserData.sexe;\n    component.role = mockUserData.role;\n    component.AddUser();\n    expect(mockToastController.create).toHaveBeenCalledWith({\n      message: 'The email address already exists!',\n      duration: 3000,\n      position: 'bottom'\n    });\n  });\n});","map":{"version":3,"names":["TestBed","waitForAsync","SignupPage","AngularFirestore","ToastController","of","throwError","describe","component","fixture","mockFirestore","mockToastController","beforeEach","jasmine","createSpyObj","configureTestingModule","declarations","providers","provide","useValue","compileComponents","createComponent","componentInstance","detectChanges","it","mockUserData","familyName","name","email","password","date","sexe","role","collection","and","returnValue","doc","id","set","data","AddUser","expect","toHaveBeenCalledWith","create","message","duration","position","toEqual","error"],"sources":["C:\\Users\\MacBook Air\\Desktop\\shifai1VV\\src\\app\\signup\\signup.page.spec.ts"],"sourcesContent":["import { ComponentFixture, TestBed, waitForAsync } from '@angular/core/testing';\nimport { SignupPage } from './signup.page';\nimport { AngularFirestore } from '@angular/fire/compat/firestore';\nimport { AddUserToAuth, app } from 'src/firebaseConfig';\nimport { ToastController } from '@ionic/angular';\nimport { of, throwError } from 'rxjs';\n\ndescribe('SignupPage', () => {\n  let component: SignupPage;\n  let fixture: ComponentFixture<SignupPage>;\n  let mockFirestore: any;\n  let mockToastController: any;\n\n  beforeEach(waitForAsync(() => {\n    mockFirestore = jasmine.createSpyObj('AngularFirestore', ['collection', 'doc', 'set']);\n    mockToastController = jasmine.createSpyObj('ToastController', ['create', 'present']);\n\n    TestBed.configureTestingModule({\n      declarations: [SignupPage],\n      providers: [\n        { provide: AngularFirestore, useValue: mockFirestore },\n        { provide: ToastController, useValue: mockToastController }\n      ],\n    }).compileComponents();\n\n    fixture = TestBed.createComponent(SignupPage);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n  }));\n\n  it('should call AddUser function and save data to Firestore', () => {\n    const mockUserData = {\n      familyName: 'Doe',\n      name: 'John',\n      email: 'john.doe@example.com',\n      password: '123456',\n      date: '1990-01-01',\n      sexe: 'M',\n      role: 'patient'\n    };\n\n    mockFirestore.collection.and.returnValue({\n      doc: (id: string) => ({\n        set: (data: any) => of(true)\n      })\n    });\n\n    component.familyName = mockUserData.familyName;\n    component.name = mockUserData.name;\n    component.email = mockUserData.email;\n    component.password = mockUserData.password;\n    component.date = mockUserData.date;\n    component.sexe = mockUserData.sexe;\n    component.role = mockUserData.role;\n\n    component.AddUser();\n\n    expect(mockFirestore.collection).toHaveBeenCalledWith('inscrits');\n    expect(mockFirestore.collection('inscrits').doc).toHaveBeenCalledWith(mockUserData.email);\n    expect(mockFirestore.collection('inscrits').doc(mockUserData.email).set).toHaveBeenCalledWith(mockUserData);\n    expect(mockToastController.create).toHaveBeenCalledWith({\n      message: 'Registration successful!',\n      duration: 3000,\n      position: 'bottom'\n    });\n  });\n\n  it('should reset form fields after successful registration', () => {\n    const mockUserData = {\n      familyName: 'Doe',\n      name: 'John',\n      email: 'john.doe@example.com',\n      password: '123456',\n      date: '1990-01-01',\n      sexe: 'M',\n      role: 'patient'\n    };\n\n    mockFirestore.collection.and.returnValue({\n      doc: (id: string) => ({\n        set: (data: any) => of(true)\n      })\n    });\n\n    component.familyName = mockUserData.familyName;\n    component.name = mockUserData.name;\n    component.email = mockUserData.email;\n    component.password = mockUserData.password;\n    component.date = mockUserData.date;\n    component.sexe = mockUserData.sexe;\n    component.role = mockUserData.role;\n\n    component.AddUser();\n\n    expect(component.familyName).toEqual('');\n    expect(component.name).toEqual('');\n    expect(component.email).toEqual('');\n    expect(component.password).toEqual('');\n    expect(component.date).toEqual('');\n    expect(component.sexe).toEqual('');\n    expect(component.role).toEqual('');\n  });\n});\n\ndescribe('SignupPage error handling', () => {\n  let component: SignupPage;\n  let fixture: ComponentFixture<SignupPage>;\n  let mockFirestore: any;\n  let mockToastController: any;\n\n  beforeEach(waitForAsync(() => {\n    mockFirestore = jasmine.createSpyObj('AngularFirestore', ['collection', 'doc', 'set']);\n    mockToastController = jasmine.createSpyObj('ToastController', ['create', 'present']);\n\n    TestBed.configureTestingModule({\n      declarations: [SignupPage],\n      providers: [\n        { provide: AngularFirestore, useValue: mockFirestore },\n        { provide: ToastController, useValue: mockToastController }\n      ],\n    }).compileComponents();\n\n    fixture = TestBed.createComponent(SignupPage);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n  }));\n\n  it('should display an error message when the email already exists', () => {\n    const mockUserData = {\n      familyName: 'Doe',\n      name: 'John',\n      email: 'john.doe@example.com',\n      password: '123456',\n      date: '1990-01-01',\n      sexe: 'M',\n      role: 'patient'\n    };\n\n    mockFirestore.collection.and.returnValue({\n      doc: (id: string) => ({\n        set: (data: any) => throwError({ error: 'ra' })\n      })\n    });\n\n    component.familyName = mockUserData.familyName;\n    component.name = mockUserData.name;\n    component.email = mockUserData.email;\n    component.password = mockUserData.password;\n    component.date = mockUserData.date;\n    component.sexe = mockUserData.sexe;\n    component.role = mockUserData.role;\n\n    component.AddUser();\n\n    expect(mockToastController.create).toHaveBeenCalledWith({\n      message: 'The email address already exists!',\n      duration: 3000,\n      position: 'bottom'\n    });\n  });\n});"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}